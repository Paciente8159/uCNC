name: PlatformIO CI Release

on:
  push:
    tags:
    - 'v*'

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ÂµCNC ${{ github.ref }}
          draft: false
          prerelease: false
          
  build_release:
    runs-on: ubuntu-latest
    needs: create_release
    strategy:
      fail-fast: false # Allow all machines to finish building
      matrix:
        boards: [LPC176X-RE-ARM, ESP32-MKS-DLC32, STM32F0-Bluepill-F030C8, STM32F4-Blackpill-F411CE, AVR-X-Controller, ESP8266-Wemos-D1-R2, AVR-MKS-DLC, AVR-UNO, STM32F1-Bluepill-F103C8-CLONE, ESP32-MKS-TINYBEE, STM32F1-Bluepill-F103C8, AVR-RAMBO, RP2040-PICO-W, RP2040-PICO-W-MULTICORE, SAMD21-Wemos-M0, AVR-CNC-Shield-V3, STM32F4-Blackpill-F401CC, STM32F4-SKR-Pro-V1_2, RP2040-PICO, ESP32-Wemos-D1-R32, LPC176X-SKR-v1_4-TURBO, STM32F1-MKS-Robin-Nano-V1_2, AVR-MEGA2560-RAMPS-V1_4, LPC176X-MKS-BASE-V1_3, AVR-MKS-GEN-L-V1, SAMD21-Arduino-Zero, RP2350-PICO2]
    steps:
    - uses: actions/checkout@v4
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    - name: Run PlatformIO
      run: pio run -e ${{matrix.boards}}
    - name: Zip binaries
      run: zip ${{matrix.boards}}.zip .pio/build/${{matrix.boards}}/firmware.*
    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
          name: ${{matrix.boards}}
          path: ./${{matrix.boards}}.zip
    - name: Display structure of downloaded files
      run: ls -R
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./${{matrix.boards}}.zip
        asset_name: ${{matrix.boards}}.zip
        asset_content_type: application/zip
