/*
	Name: mcumap_avr.h
	Description: Contains all MCU and PIN definitions for Arduino UNO to run µCNC.

	Copyright: Copyright (c) João Martins
	Author: João Martins
	Date: 04-02-2020

	µCNC is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version. Please see <http://www.gnu.org/licenses/>

	µCNC is distributed WITHOUT ANY WARRANTY;
	Also without the implied warranty of	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	See the	GNU General Public License for more details.
*/

#ifndef MCUMAP_AVR_H
#define MCUMAP_AVR_H

#ifdef __cplusplus
extern "C"
{
#endif

/*
	Generates all the interface definitions.
	This creates a middle HAL layer between the board IO pins and the AVR funtionalities
*/
/*
	MCU specific definitions and replacements
*/
#include <math.h>
#include <inttypes.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdarg.h>
#include <avr/io.h>
#include <avr/wdt.h>
#include <avr/eeprom.h>
#include <avr/cpufunc.h>
#include <avr/pgmspace.h>
#include <avr/interrupt.h>

/*
	AVR Defaults
*/
// defines the frequency of the mcu
#ifndef F_CPU
#define F_CPU 16000000UL
#endif
// defines the maximum and minimum step rates
#ifndef F_STEP_MAX
#ifndef BRESENHAM_16BIT
#define F_STEP_MAX 30000
#else
#define F_STEP_MAX 40000
#endif
#endif
#ifndef F_STEP_MIN
#define F_STEP_MIN 4
#endif

// defines special mcu to access flash strings and arrays
#define __rom__ PROGMEM
#define __romstr__ PSTR
#define rom_strptr pgm_read_word
#define rom_strcpy strcpy_P
#define rom_strncpy strncpy_P
#define rom_memcpy memcpy_P
#define rom_read_byte pgm_read_byte

#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_FLOAT__ 4

// needed by software delays
#ifndef MCU_CLOCKS_PER_CYCLE
#define MCU_CLOCKS_PER_CYCLE 1
#endif
#ifndef MCU_CYCLES_PER_LOOP
#define MCU_CYCLES_PER_LOOP 4
#endif
#ifndef MCU_CYCLES_PER_LOOP_OVERHEAD
#define MCU_CYCLES_PER_LOOP_OVERHEAD 11
#endif

// used by the parser
// this method is faster then normal multiplication (for 32 bit for 16 and 8 bits is slightly lower)
// overrides utils.h definition to implement this method with or without fast math option enabled
#define fast_int_mul10(x) ((((x) << 2) + (x)) << 1)

// Helper macros
#define __helper_ex__(left, mid, right) (left##mid##right)
#define __helper__(left, mid, right) (__helper_ex__(left, mid, right))
// AVR internal register names
#define __outreg__(X) (__helper__(PORT, X, ))
#define __dirreg__(X) (__helper__(DDR, X, ))
#define __inreg__(X) (__helper__(PIN, X, ))
#define __ocrreg__(X, Y) (__helper__(OCR, X, Y))
#define __tmrareg__(X) (__helper__(TCCR, X, A))
#define __tmrbreg__(X) (__helper__(TCCR, X, B))
#define __pcmskreg__(X) (__helper__(PCMSK, X, ))
#define __ucsrbreg__(X) (__helper__(UCSR, X, B))
#define __ucsrareg__(X) (__helper__(UCSR, X, A))
#define __udriebit__(X) (__helper__(UDRIE, X, ))
#define __u2xbit__(X) (__helper__(U2X, X, ))
#define __ubrrhreg__(X) (__helper__(UBRR, X, H))
#define __ubrrlreg__(X) (__helper__(UBRR, X, L))
#define __rxenbit__(X) (__helper__(RXEN, X, ))
#define __txenbit__(X) (__helper__(TXEN, X, ))
#define __rxciebit__(X) (__helper__(RXCIE, X, ))
#define __udrebit__(X) (__helper__(UDRE, X, ))
#define __rxcbit__(X) (__helper__(RXC, X, ))
#define __udrreg__(X) (__helper__(UDR, X, ))
#define __tifrreg__(X) (__helper__(TIFR, X, ))
#define __timskreg__(X) (__helper__(TIMSK, X, ))
#define __ociebreg__(X) (__helper__(OCIE, X, B))
#define __ocieareg__(X) (__helper__(OCIE, X, A))
#define __tcntreg__(X) (__helper__(TCNT, X, ))

#define __timeravect__(X) (__helper__(TIMER, X, _COMPA_vect))
#define __timerbvect__(X) (__helper__(TIMER, X, _COMPB_vect))
#define __comrxvect__(X) (__helper__(USART, X, _RX_vect))
#define __comtxvect__(X) (__helper__(USART, X, _UDRE_vect))

// Autogenerated macros
// IO pins
#if (defined(STEP0_PORT) && defined(STEP0_BIT))
#define DIO1 1
#define STEP0 1
#define DIO1_PORT (STEP0_PORT)
#define DIO1_BIT (STEP0_BIT)
#define STEP0_OUTREG (__outreg__(STEP0_PORT))
#define STEP0_INREG (__inreg__(STEP0_PORT))
#define STEP0_DIRREG (__dirreg__(STEP0_PORT))
#define DIO1_OUTREG (__outreg__(STEP0_PORT))
#define DIO1_INREG (__inreg__(STEP0_PORT))
#define DIO1_DIRREG (__dirreg__(STEP0_PORT))
#endif
#if (defined(STEP1_PORT) && defined(STEP1_BIT))
#define DIO2 2
#define STEP1 2
#define DIO2_PORT (STEP1_PORT)
#define DIO2_BIT (STEP1_BIT)
#define STEP1_OUTREG (__outreg__(STEP1_PORT))
#define STEP1_INREG (__inreg__(STEP1_PORT))
#define STEP1_DIRREG (__dirreg__(STEP1_PORT))
#define DIO2_OUTREG (__outreg__(STEP1_PORT))
#define DIO2_INREG (__inreg__(STEP1_PORT))
#define DIO2_DIRREG (__dirreg__(STEP1_PORT))
#endif
#if (defined(STEP2_PORT) && defined(STEP2_BIT))
#define DIO3 3
#define STEP2 3
#define DIO3_PORT (STEP2_PORT)
#define DIO3_BIT (STEP2_BIT)
#define STEP2_OUTREG (__outreg__(STEP2_PORT))
#define STEP2_INREG (__inreg__(STEP2_PORT))
#define STEP2_DIRREG (__dirreg__(STEP2_PORT))
#define DIO3_OUTREG (__outreg__(STEP2_PORT))
#define DIO3_INREG (__inreg__(STEP2_PORT))
#define DIO3_DIRREG (__dirreg__(STEP2_PORT))
#endif
#if (defined(STEP3_PORT) && defined(STEP3_BIT))
#define DIO4 4
#define STEP3 4
#define DIO4_PORT (STEP3_PORT)
#define DIO4_BIT (STEP3_BIT)
#define STEP3_OUTREG (__outreg__(STEP3_PORT))
#define STEP3_INREG (__inreg__(STEP3_PORT))
#define STEP3_DIRREG (__dirreg__(STEP3_PORT))
#define DIO4_OUTREG (__outreg__(STEP3_PORT))
#define DIO4_INREG (__inreg__(STEP3_PORT))
#define DIO4_DIRREG (__dirreg__(STEP3_PORT))
#endif
#if (defined(STEP4_PORT) && defined(STEP4_BIT))
#define DIO5 5
#define STEP4 5
#define DIO5_PORT (STEP4_PORT)
#define DIO5_BIT (STEP4_BIT)
#define STEP4_OUTREG (__outreg__(STEP4_PORT))
#define STEP4_INREG (__inreg__(STEP4_PORT))
#define STEP4_DIRREG (__dirreg__(STEP4_PORT))
#define DIO5_OUTREG (__outreg__(STEP4_PORT))
#define DIO5_INREG (__inreg__(STEP4_PORT))
#define DIO5_DIRREG (__dirreg__(STEP4_PORT))
#endif
#if (defined(STEP5_PORT) && defined(STEP5_BIT))
#define DIO6 6
#define STEP5 6
#define DIO6_PORT (STEP5_PORT)
#define DIO6_BIT (STEP5_BIT)
#define STEP5_OUTREG (__outreg__(STEP5_PORT))
#define STEP5_INREG (__inreg__(STEP5_PORT))
#define STEP5_DIRREG (__dirreg__(STEP5_PORT))
#define DIO6_OUTREG (__outreg__(STEP5_PORT))
#define DIO6_INREG (__inreg__(STEP5_PORT))
#define DIO6_DIRREG (__dirreg__(STEP5_PORT))
#endif
#if (defined(STEP6_PORT) && defined(STEP6_BIT))
#define DIO7 7
#define STEP6 7
#define DIO7_PORT (STEP6_PORT)
#define DIO7_BIT (STEP6_BIT)
#define STEP6_OUTREG (__outreg__(STEP6_PORT))
#define STEP6_INREG (__inreg__(STEP6_PORT))
#define STEP6_DIRREG (__dirreg__(STEP6_PORT))
#define DIO7_OUTREG (__outreg__(STEP6_PORT))
#define DIO7_INREG (__inreg__(STEP6_PORT))
#define DIO7_DIRREG (__dirreg__(STEP6_PORT))
#endif
#if (defined(STEP7_PORT) && defined(STEP7_BIT))
#define DIO8 8
#define STEP7 8
#define DIO8_PORT (STEP7_PORT)
#define DIO8_BIT (STEP7_BIT)
#define STEP7_OUTREG (__outreg__(STEP7_PORT))
#define STEP7_INREG (__inreg__(STEP7_PORT))
#define STEP7_DIRREG (__dirreg__(STEP7_PORT))
#define DIO8_OUTREG (__outreg__(STEP7_PORT))
#define DIO8_INREG (__inreg__(STEP7_PORT))
#define DIO8_DIRREG (__dirreg__(STEP7_PORT))
#endif
#if (defined(DIR0_PORT) && defined(DIR0_BIT))
#define DIO9 9
#define DIR0 9
#define DIO9_PORT (DIR0_PORT)
#define DIO9_BIT (DIR0_BIT)
#define DIR0_OUTREG (__outreg__(DIR0_PORT))
#define DIR0_INREG (__inreg__(DIR0_PORT))
#define DIR0_DIRREG (__dirreg__(DIR0_PORT))
#define DIO9_OUTREG (__outreg__(DIR0_PORT))
#define DIO9_INREG (__inreg__(DIR0_PORT))
#define DIO9_DIRREG (__dirreg__(DIR0_PORT))
#endif
#if (defined(DIR1_PORT) && defined(DIR1_BIT))
#define DIO10 10
#define DIR1 10
#define DIO10_PORT (DIR1_PORT)
#define DIO10_BIT (DIR1_BIT)
#define DIR1_OUTREG (__outreg__(DIR1_PORT))
#define DIR1_INREG (__inreg__(DIR1_PORT))
#define DIR1_DIRREG (__dirreg__(DIR1_PORT))
#define DIO10_OUTREG (__outreg__(DIR1_PORT))
#define DIO10_INREG (__inreg__(DIR1_PORT))
#define DIO10_DIRREG (__dirreg__(DIR1_PORT))
#endif
#if (defined(DIR2_PORT) && defined(DIR2_BIT))
#define DIO11 11
#define DIR2 11
#define DIO11_PORT (DIR2_PORT)
#define DIO11_BIT (DIR2_BIT)
#define DIR2_OUTREG (__outreg__(DIR2_PORT))
#define DIR2_INREG (__inreg__(DIR2_PORT))
#define DIR2_DIRREG (__dirreg__(DIR2_PORT))
#define DIO11_OUTREG (__outreg__(DIR2_PORT))
#define DIO11_INREG (__inreg__(DIR2_PORT))
#define DIO11_DIRREG (__dirreg__(DIR2_PORT))
#endif
#if (defined(DIR3_PORT) && defined(DIR3_BIT))
#define DIO12 12
#define DIR3 12
#define DIO12_PORT (DIR3_PORT)
#define DIO12_BIT (DIR3_BIT)
#define DIR3_OUTREG (__outreg__(DIR3_PORT))
#define DIR3_INREG (__inreg__(DIR3_PORT))
#define DIR3_DIRREG (__dirreg__(DIR3_PORT))
#define DIO12_OUTREG (__outreg__(DIR3_PORT))
#define DIO12_INREG (__inreg__(DIR3_PORT))
#define DIO12_DIRREG (__dirreg__(DIR3_PORT))
#endif
#if (defined(DIR4_PORT) && defined(DIR4_BIT))
#define DIO13 13
#define DIR4 13
#define DIO13_PORT (DIR4_PORT)
#define DIO13_BIT (DIR4_BIT)
#define DIR4_OUTREG (__outreg__(DIR4_PORT))
#define DIR4_INREG (__inreg__(DIR4_PORT))
#define DIR4_DIRREG (__dirreg__(DIR4_PORT))
#define DIO13_OUTREG (__outreg__(DIR4_PORT))
#define DIO13_INREG (__inreg__(DIR4_PORT))
#define DIO13_DIRREG (__dirreg__(DIR4_PORT))
#endif
#if (defined(DIR5_PORT) && defined(DIR5_BIT))
#define DIO14 14
#define DIR5 14
#define DIO14_PORT (DIR5_PORT)
#define DIO14_BIT (DIR5_BIT)
#define DIR5_OUTREG (__outreg__(DIR5_PORT))
#define DIR5_INREG (__inreg__(DIR5_PORT))
#define DIR5_DIRREG (__dirreg__(DIR5_PORT))
#define DIO14_OUTREG (__outreg__(DIR5_PORT))
#define DIO14_INREG (__inreg__(DIR5_PORT))
#define DIO14_DIRREG (__dirreg__(DIR5_PORT))
#endif
#if (defined(DIR6_PORT) && defined(DIR6_BIT))
#define DIO15 15
#define DIR6 15
#define DIO15_PORT (DIR6_PORT)
#define DIO15_BIT (DIR6_BIT)
#define DIR6_OUTREG (__outreg__(DIR6_PORT))
#define DIR6_INREG (__inreg__(DIR6_PORT))
#define DIR6_DIRREG (__dirreg__(DIR6_PORT))
#define DIO15_OUTREG (__outreg__(DIR6_PORT))
#define DIO15_INREG (__inreg__(DIR6_PORT))
#define DIO15_DIRREG (__dirreg__(DIR6_PORT))
#endif
#if (defined(DIR7_PORT) && defined(DIR7_BIT))
#define DIO16 16
#define DIR7 16
#define DIO16_PORT (DIR7_PORT)
#define DIO16_BIT (DIR7_BIT)
#define DIR7_OUTREG (__outreg__(DIR7_PORT))
#define DIR7_INREG (__inreg__(DIR7_PORT))
#define DIR7_DIRREG (__dirreg__(DIR7_PORT))
#define DIO16_OUTREG (__outreg__(DIR7_PORT))
#define DIO16_INREG (__inreg__(DIR7_PORT))
#define DIO16_DIRREG (__dirreg__(DIR7_PORT))
#endif
#if (defined(STEP0_EN_PORT) && defined(STEP0_EN_BIT))
#define DIO17 17
#define STEP0_EN 17
#define DIO17_PORT (STEP0_EN_PORT)
#define DIO17_BIT (STEP0_EN_BIT)
#define STEP0_EN_OUTREG (__outreg__(STEP0_EN_PORT))
#define STEP0_EN_INREG (__inreg__(STEP0_EN_PORT))
#define STEP0_EN_DIRREG (__dirreg__(STEP0_EN_PORT))
#define DIO17_OUTREG (__outreg__(STEP0_EN_PORT))
#define DIO17_INREG (__inreg__(STEP0_EN_PORT))
#define DIO17_DIRREG (__dirreg__(STEP0_EN_PORT))
#endif
#if (defined(STEP1_EN_PORT) && defined(STEP1_EN_BIT))
#define DIO18 18
#define STEP1_EN 18
#define DIO18_PORT (STEP1_EN_PORT)
#define DIO18_BIT (STEP1_EN_BIT)
#define STEP1_EN_OUTREG (__outreg__(STEP1_EN_PORT))
#define STEP1_EN_INREG (__inreg__(STEP1_EN_PORT))
#define STEP1_EN_DIRREG (__dirreg__(STEP1_EN_PORT))
#define DIO18_OUTREG (__outreg__(STEP1_EN_PORT))
#define DIO18_INREG (__inreg__(STEP1_EN_PORT))
#define DIO18_DIRREG (__dirreg__(STEP1_EN_PORT))
#endif
#if (defined(STEP2_EN_PORT) && defined(STEP2_EN_BIT))
#define DIO19 19
#define STEP2_EN 19
#define DIO19_PORT (STEP2_EN_PORT)
#define DIO19_BIT (STEP2_EN_BIT)
#define STEP2_EN_OUTREG (__outreg__(STEP2_EN_PORT))
#define STEP2_EN_INREG (__inreg__(STEP2_EN_PORT))
#define STEP2_EN_DIRREG (__dirreg__(STEP2_EN_PORT))
#define DIO19_OUTREG (__outreg__(STEP2_EN_PORT))
#define DIO19_INREG (__inreg__(STEP2_EN_PORT))
#define DIO19_DIRREG (__dirreg__(STEP2_EN_PORT))
#endif
#if (defined(STEP3_EN_PORT) && defined(STEP3_EN_BIT))
#define DIO20 20
#define STEP3_EN 20
#define DIO20_PORT (STEP3_EN_PORT)
#define DIO20_BIT (STEP3_EN_BIT)
#define STEP3_EN_OUTREG (__outreg__(STEP3_EN_PORT))
#define STEP3_EN_INREG (__inreg__(STEP3_EN_PORT))
#define STEP3_EN_DIRREG (__dirreg__(STEP3_EN_PORT))
#define DIO20_OUTREG (__outreg__(STEP3_EN_PORT))
#define DIO20_INREG (__inreg__(STEP3_EN_PORT))
#define DIO20_DIRREG (__dirreg__(STEP3_EN_PORT))
#endif
#if (defined(STEP4_EN_PORT) && defined(STEP4_EN_BIT))
#define DIO21 21
#define STEP4_EN 21
#define DIO21_PORT (STEP4_EN_PORT)
#define DIO21_BIT (STEP4_EN_BIT)
#define STEP4_EN_OUTREG (__outreg__(STEP4_EN_PORT))
#define STEP4_EN_INREG (__inreg__(STEP4_EN_PORT))
#define STEP4_EN_DIRREG (__dirreg__(STEP4_EN_PORT))
#define DIO21_OUTREG (__outreg__(STEP4_EN_PORT))
#define DIO21_INREG (__inreg__(STEP4_EN_PORT))
#define DIO21_DIRREG (__dirreg__(STEP4_EN_PORT))
#endif
#if (defined(STEP5_EN_PORT) && defined(STEP5_EN_BIT))
#define DIO22 22
#define STEP5_EN 22
#define DIO22_PORT (STEP5_EN_PORT)
#define DIO22_BIT (STEP5_EN_BIT)
#define STEP5_EN_OUTREG (__outreg__(STEP5_EN_PORT))
#define STEP5_EN_INREG (__inreg__(STEP5_EN_PORT))
#define STEP5_EN_DIRREG (__dirreg__(STEP5_EN_PORT))
#define DIO22_OUTREG (__outreg__(STEP5_EN_PORT))
#define DIO22_INREG (__inreg__(STEP5_EN_PORT))
#define DIO22_DIRREG (__dirreg__(STEP5_EN_PORT))
#endif
#if (defined(STEP6_EN_PORT) && defined(STEP6_EN_BIT))
#define DIO23 23
#define STEP6_EN 23
#define DIO23_PORT (STEP6_EN_PORT)
#define DIO23_BIT (STEP6_EN_BIT)
#define STEP6_EN_OUTREG (__outreg__(STEP6_EN_PORT))
#define STEP6_EN_INREG (__inreg__(STEP6_EN_PORT))
#define STEP6_EN_DIRREG (__dirreg__(STEP6_EN_PORT))
#define DIO23_OUTREG (__outreg__(STEP6_EN_PORT))
#define DIO23_INREG (__inreg__(STEP6_EN_PORT))
#define DIO23_DIRREG (__dirreg__(STEP6_EN_PORT))
#endif
#if (defined(STEP7_EN_PORT) && defined(STEP7_EN_BIT))
#define DIO24 24
#define STEP7_EN 24
#define DIO24_PORT (STEP7_EN_PORT)
#define DIO24_BIT (STEP7_EN_BIT)
#define STEP7_EN_OUTREG (__outreg__(STEP7_EN_PORT))
#define STEP7_EN_INREG (__inreg__(STEP7_EN_PORT))
#define STEP7_EN_DIRREG (__dirreg__(STEP7_EN_PORT))
#define DIO24_OUTREG (__outreg__(STEP7_EN_PORT))
#define DIO24_INREG (__inreg__(STEP7_EN_PORT))
#define DIO24_DIRREG (__dirreg__(STEP7_EN_PORT))
#endif
#if (defined(PWM0_PORT) && defined(PWM0_BIT))
#define DIO25 25
#define PWM0 25
#define DIO25_PORT (PWM0_PORT)
#define DIO25_BIT (PWM0_BIT)
#define PWM0_OUTREG (__outreg__(PWM0_PORT))
#define PWM0_INREG (__inreg__(PWM0_PORT))
#define PWM0_DIRREG (__dirreg__(PWM0_PORT))
#define DIO25_OUTREG (__outreg__(PWM0_PORT))
#define DIO25_INREG (__inreg__(PWM0_PORT))
#define DIO25_DIRREG (__dirreg__(PWM0_PORT))
#endif
#if (defined(PWM1_PORT) && defined(PWM1_BIT))
#define DIO26 26
#define PWM1 26
#define DIO26_PORT (PWM1_PORT)
#define DIO26_BIT (PWM1_BIT)
#define PWM1_OUTREG (__outreg__(PWM1_PORT))
#define PWM1_INREG (__inreg__(PWM1_PORT))
#define PWM1_DIRREG (__dirreg__(PWM1_PORT))
#define DIO26_OUTREG (__outreg__(PWM1_PORT))
#define DIO26_INREG (__inreg__(PWM1_PORT))
#define DIO26_DIRREG (__dirreg__(PWM1_PORT))
#endif
#if (defined(PWM2_PORT) && defined(PWM2_BIT))
#define DIO27 27
#define PWM2 27
#define DIO27_PORT (PWM2_PORT)
#define DIO27_BIT (PWM2_BIT)
#define PWM2_OUTREG (__outreg__(PWM2_PORT))
#define PWM2_INREG (__inreg__(PWM2_PORT))
#define PWM2_DIRREG (__dirreg__(PWM2_PORT))
#define DIO27_OUTREG (__outreg__(PWM2_PORT))
#define DIO27_INREG (__inreg__(PWM2_PORT))
#define DIO27_DIRREG (__dirreg__(PWM2_PORT))
#endif
#if (defined(PWM3_PORT) && defined(PWM3_BIT))
#define DIO28 28
#define PWM3 28
#define DIO28_PORT (PWM3_PORT)
#define DIO28_BIT (PWM3_BIT)
#define PWM3_OUTREG (__outreg__(PWM3_PORT))
#define PWM3_INREG (__inreg__(PWM3_PORT))
#define PWM3_DIRREG (__dirreg__(PWM3_PORT))
#define DIO28_OUTREG (__outreg__(PWM3_PORT))
#define DIO28_INREG (__inreg__(PWM3_PORT))
#define DIO28_DIRREG (__dirreg__(PWM3_PORT))
#endif
#if (defined(PWM4_PORT) && defined(PWM4_BIT))
#define DIO29 29
#define PWM4 29
#define DIO29_PORT (PWM4_PORT)
#define DIO29_BIT (PWM4_BIT)
#define PWM4_OUTREG (__outreg__(PWM4_PORT))
#define PWM4_INREG (__inreg__(PWM4_PORT))
#define PWM4_DIRREG (__dirreg__(PWM4_PORT))
#define DIO29_OUTREG (__outreg__(PWM4_PORT))
#define DIO29_INREG (__inreg__(PWM4_PORT))
#define DIO29_DIRREG (__dirreg__(PWM4_PORT))
#endif
#if (defined(PWM5_PORT) && defined(PWM5_BIT))
#define DIO30 30
#define PWM5 30
#define DIO30_PORT (PWM5_PORT)
#define DIO30_BIT (PWM5_BIT)
#define PWM5_OUTREG (__outreg__(PWM5_PORT))
#define PWM5_INREG (__inreg__(PWM5_PORT))
#define PWM5_DIRREG (__dirreg__(PWM5_PORT))
#define DIO30_OUTREG (__outreg__(PWM5_PORT))
#define DIO30_INREG (__inreg__(PWM5_PORT))
#define DIO30_DIRREG (__dirreg__(PWM5_PORT))
#endif
#if (defined(PWM6_PORT) && defined(PWM6_BIT))
#define DIO31 31
#define PWM6 31
#define DIO31_PORT (PWM6_PORT)
#define DIO31_BIT (PWM6_BIT)
#define PWM6_OUTREG (__outreg__(PWM6_PORT))
#define PWM6_INREG (__inreg__(PWM6_PORT))
#define PWM6_DIRREG (__dirreg__(PWM6_PORT))
#define DIO31_OUTREG (__outreg__(PWM6_PORT))
#define DIO31_INREG (__inreg__(PWM6_PORT))
#define DIO31_DIRREG (__dirreg__(PWM6_PORT))
#endif
#if (defined(PWM7_PORT) && defined(PWM7_BIT))
#define DIO32 32
#define PWM7 32
#define DIO32_PORT (PWM7_PORT)
#define DIO32_BIT (PWM7_BIT)
#define PWM7_OUTREG (__outreg__(PWM7_PORT))
#define PWM7_INREG (__inreg__(PWM7_PORT))
#define PWM7_DIRREG (__dirreg__(PWM7_PORT))
#define DIO32_OUTREG (__outreg__(PWM7_PORT))
#define DIO32_INREG (__inreg__(PWM7_PORT))
#define DIO32_DIRREG (__dirreg__(PWM7_PORT))
#endif
#if (defined(PWM8_PORT) && defined(PWM8_BIT))
#define DIO33 33
#define PWM8 33
#define DIO33_PORT (PWM8_PORT)
#define DIO33_BIT (PWM8_BIT)
#define PWM8_OUTREG (__outreg__(PWM8_PORT))
#define PWM8_INREG (__inreg__(PWM8_PORT))
#define PWM8_DIRREG (__dirreg__(PWM8_PORT))
#define DIO33_OUTREG (__outreg__(PWM8_PORT))
#define DIO33_INREG (__inreg__(PWM8_PORT))
#define DIO33_DIRREG (__dirreg__(PWM8_PORT))
#endif
#if (defined(PWM9_PORT) && defined(PWM9_BIT))
#define DIO34 34
#define PWM9 34
#define DIO34_PORT (PWM9_PORT)
#define DIO34_BIT (PWM9_BIT)
#define PWM9_OUTREG (__outreg__(PWM9_PORT))
#define PWM9_INREG (__inreg__(PWM9_PORT))
#define PWM9_DIRREG (__dirreg__(PWM9_PORT))
#define DIO34_OUTREG (__outreg__(PWM9_PORT))
#define DIO34_INREG (__inreg__(PWM9_PORT))
#define DIO34_DIRREG (__dirreg__(PWM9_PORT))
#endif
#if (defined(PWM10_PORT) && defined(PWM10_BIT))
#define DIO35 35
#define PWM10 35
#define DIO35_PORT (PWM10_PORT)
#define DIO35_BIT (PWM10_BIT)
#define PWM10_OUTREG (__outreg__(PWM10_PORT))
#define PWM10_INREG (__inreg__(PWM10_PORT))
#define PWM10_DIRREG (__dirreg__(PWM10_PORT))
#define DIO35_OUTREG (__outreg__(PWM10_PORT))
#define DIO35_INREG (__inreg__(PWM10_PORT))
#define DIO35_DIRREG (__dirreg__(PWM10_PORT))
#endif
#if (defined(PWM11_PORT) && defined(PWM11_BIT))
#define DIO36 36
#define PWM11 36
#define DIO36_PORT (PWM11_PORT)
#define DIO36_BIT (PWM11_BIT)
#define PWM11_OUTREG (__outreg__(PWM11_PORT))
#define PWM11_INREG (__inreg__(PWM11_PORT))
#define PWM11_DIRREG (__dirreg__(PWM11_PORT))
#define DIO36_OUTREG (__outreg__(PWM11_PORT))
#define DIO36_INREG (__inreg__(PWM11_PORT))
#define DIO36_DIRREG (__dirreg__(PWM11_PORT))
#endif
#if (defined(PWM12_PORT) && defined(PWM12_BIT))
#define DIO37 37
#define PWM12 37
#define DIO37_PORT (PWM12_PORT)
#define DIO37_BIT (PWM12_BIT)
#define PWM12_OUTREG (__outreg__(PWM12_PORT))
#define PWM12_INREG (__inreg__(PWM12_PORT))
#define PWM12_DIRREG (__dirreg__(PWM12_PORT))
#define DIO37_OUTREG (__outreg__(PWM12_PORT))
#define DIO37_INREG (__inreg__(PWM12_PORT))
#define DIO37_DIRREG (__dirreg__(PWM12_PORT))
#endif
#if (defined(PWM13_PORT) && defined(PWM13_BIT))
#define DIO38 38
#define PWM13 38
#define DIO38_PORT (PWM13_PORT)
#define DIO38_BIT (PWM13_BIT)
#define PWM13_OUTREG (__outreg__(PWM13_PORT))
#define PWM13_INREG (__inreg__(PWM13_PORT))
#define PWM13_DIRREG (__dirreg__(PWM13_PORT))
#define DIO38_OUTREG (__outreg__(PWM13_PORT))
#define DIO38_INREG (__inreg__(PWM13_PORT))
#define DIO38_DIRREG (__dirreg__(PWM13_PORT))
#endif
#if (defined(PWM14_PORT) && defined(PWM14_BIT))
#define DIO39 39
#define PWM14 39
#define DIO39_PORT (PWM14_PORT)
#define DIO39_BIT (PWM14_BIT)
#define PWM14_OUTREG (__outreg__(PWM14_PORT))
#define PWM14_INREG (__inreg__(PWM14_PORT))
#define PWM14_DIRREG (__dirreg__(PWM14_PORT))
#define DIO39_OUTREG (__outreg__(PWM14_PORT))
#define DIO39_INREG (__inreg__(PWM14_PORT))
#define DIO39_DIRREG (__dirreg__(PWM14_PORT))
#endif
#if (defined(PWM15_PORT) && defined(PWM15_BIT))
#define DIO40 40
#define PWM15 40
#define DIO40_PORT (PWM15_PORT)
#define DIO40_BIT (PWM15_BIT)
#define PWM15_OUTREG (__outreg__(PWM15_PORT))
#define PWM15_INREG (__inreg__(PWM15_PORT))
#define PWM15_DIRREG (__dirreg__(PWM15_PORT))
#define DIO40_OUTREG (__outreg__(PWM15_PORT))
#define DIO40_INREG (__inreg__(PWM15_PORT))
#define DIO40_DIRREG (__dirreg__(PWM15_PORT))
#endif
#if (defined(SERVO0_PORT) && defined(SERVO0_BIT))
#define DIO41 41
#define SERVO0 41
#define DIO41_PORT (SERVO0_PORT)
#define DIO41_BIT (SERVO0_BIT)
#define SERVO0_OUTREG (__outreg__(SERVO0_PORT))
#define SERVO0_INREG (__inreg__(SERVO0_PORT))
#define SERVO0_DIRREG (__dirreg__(SERVO0_PORT))
#define DIO41_OUTREG (__outreg__(SERVO0_PORT))
#define DIO41_INREG (__inreg__(SERVO0_PORT))
#define DIO41_DIRREG (__dirreg__(SERVO0_PORT))
#endif
#if (defined(SERVO1_PORT) && defined(SERVO1_BIT))
#define DIO42 42
#define SERVO1 42
#define DIO42_PORT (SERVO1_PORT)
#define DIO42_BIT (SERVO1_BIT)
#define SERVO1_OUTREG (__outreg__(SERVO1_PORT))
#define SERVO1_INREG (__inreg__(SERVO1_PORT))
#define SERVO1_DIRREG (__dirreg__(SERVO1_PORT))
#define DIO42_OUTREG (__outreg__(SERVO1_PORT))
#define DIO42_INREG (__inreg__(SERVO1_PORT))
#define DIO42_DIRREG (__dirreg__(SERVO1_PORT))
#endif
#if (defined(SERVO2_PORT) && defined(SERVO2_BIT))
#define DIO43 43
#define SERVO2 43
#define DIO43_PORT (SERVO2_PORT)
#define DIO43_BIT (SERVO2_BIT)
#define SERVO2_OUTREG (__outreg__(SERVO2_PORT))
#define SERVO2_INREG (__inreg__(SERVO2_PORT))
#define SERVO2_DIRREG (__dirreg__(SERVO2_PORT))
#define DIO43_OUTREG (__outreg__(SERVO2_PORT))
#define DIO43_INREG (__inreg__(SERVO2_PORT))
#define DIO43_DIRREG (__dirreg__(SERVO2_PORT))
#endif
#if (defined(SERVO3_PORT) && defined(SERVO3_BIT))
#define DIO44 44
#define SERVO3 44
#define DIO44_PORT (SERVO3_PORT)
#define DIO44_BIT (SERVO3_BIT)
#define SERVO3_OUTREG (__outreg__(SERVO3_PORT))
#define SERVO3_INREG (__inreg__(SERVO3_PORT))
#define SERVO3_DIRREG (__dirreg__(SERVO3_PORT))
#define DIO44_OUTREG (__outreg__(SERVO3_PORT))
#define DIO44_INREG (__inreg__(SERVO3_PORT))
#define DIO44_DIRREG (__dirreg__(SERVO3_PORT))
#endif
#if (defined(SERVO4_PORT) && defined(SERVO4_BIT))
#define DIO45 45
#define SERVO4 45
#define DIO45_PORT (SERVO4_PORT)
#define DIO45_BIT (SERVO4_BIT)
#define SERVO4_OUTREG (__outreg__(SERVO4_PORT))
#define SERVO4_INREG (__inreg__(SERVO4_PORT))
#define SERVO4_DIRREG (__dirreg__(SERVO4_PORT))
#define DIO45_OUTREG (__outreg__(SERVO4_PORT))
#define DIO45_INREG (__inreg__(SERVO4_PORT))
#define DIO45_DIRREG (__dirreg__(SERVO4_PORT))
#endif
#if (defined(SERVO5_PORT) && defined(SERVO5_BIT))
#define DIO46 46
#define SERVO5 46
#define DIO46_PORT (SERVO5_PORT)
#define DIO46_BIT (SERVO5_BIT)
#define SERVO5_OUTREG (__outreg__(SERVO5_PORT))
#define SERVO5_INREG (__inreg__(SERVO5_PORT))
#define SERVO5_DIRREG (__dirreg__(SERVO5_PORT))
#define DIO46_OUTREG (__outreg__(SERVO5_PORT))
#define DIO46_INREG (__inreg__(SERVO5_PORT))
#define DIO46_DIRREG (__dirreg__(SERVO5_PORT))
#endif
#if (defined(DOUT0_PORT) && defined(DOUT0_BIT))
#define DIO47 47
#define DOUT0 47
#define DIO47_PORT (DOUT0_PORT)
#define DIO47_BIT (DOUT0_BIT)
#define DOUT0_OUTREG (__outreg__(DOUT0_PORT))
#define DOUT0_INREG (__inreg__(DOUT0_PORT))
#define DOUT0_DIRREG (__dirreg__(DOUT0_PORT))
#define DIO47_OUTREG (__outreg__(DOUT0_PORT))
#define DIO47_INREG (__inreg__(DOUT0_PORT))
#define DIO47_DIRREG (__dirreg__(DOUT0_PORT))
#endif
#if (defined(DOUT1_PORT) && defined(DOUT1_BIT))
#define DIO48 48
#define DOUT1 48
#define DIO48_PORT (DOUT1_PORT)
#define DIO48_BIT (DOUT1_BIT)
#define DOUT1_OUTREG (__outreg__(DOUT1_PORT))
#define DOUT1_INREG (__inreg__(DOUT1_PORT))
#define DOUT1_DIRREG (__dirreg__(DOUT1_PORT))
#define DIO48_OUTREG (__outreg__(DOUT1_PORT))
#define DIO48_INREG (__inreg__(DOUT1_PORT))
#define DIO48_DIRREG (__dirreg__(DOUT1_PORT))
#endif
#if (defined(DOUT2_PORT) && defined(DOUT2_BIT))
#define DIO49 49
#define DOUT2 49
#define DIO49_PORT (DOUT2_PORT)
#define DIO49_BIT (DOUT2_BIT)
#define DOUT2_OUTREG (__outreg__(DOUT2_PORT))
#define DOUT2_INREG (__inreg__(DOUT2_PORT))
#define DOUT2_DIRREG (__dirreg__(DOUT2_PORT))
#define DIO49_OUTREG (__outreg__(DOUT2_PORT))
#define DIO49_INREG (__inreg__(DOUT2_PORT))
#define DIO49_DIRREG (__dirreg__(DOUT2_PORT))
#endif
#if (defined(DOUT3_PORT) && defined(DOUT3_BIT))
#define DIO50 50
#define DOUT3 50
#define DIO50_PORT (DOUT3_PORT)
#define DIO50_BIT (DOUT3_BIT)
#define DOUT3_OUTREG (__outreg__(DOUT3_PORT))
#define DOUT3_INREG (__inreg__(DOUT3_PORT))
#define DOUT3_DIRREG (__dirreg__(DOUT3_PORT))
#define DIO50_OUTREG (__outreg__(DOUT3_PORT))
#define DIO50_INREG (__inreg__(DOUT3_PORT))
#define DIO50_DIRREG (__dirreg__(DOUT3_PORT))
#endif
#if (defined(DOUT4_PORT) && defined(DOUT4_BIT))
#define DIO51 51
#define DOUT4 51
#define DIO51_PORT (DOUT4_PORT)
#define DIO51_BIT (DOUT4_BIT)
#define DOUT4_OUTREG (__outreg__(DOUT4_PORT))
#define DOUT4_INREG (__inreg__(DOUT4_PORT))
#define DOUT4_DIRREG (__dirreg__(DOUT4_PORT))
#define DIO51_OUTREG (__outreg__(DOUT4_PORT))
#define DIO51_INREG (__inreg__(DOUT4_PORT))
#define DIO51_DIRREG (__dirreg__(DOUT4_PORT))
#endif
#if (defined(DOUT5_PORT) && defined(DOUT5_BIT))
#define DIO52 52
#define DOUT5 52
#define DIO52_PORT (DOUT5_PORT)
#define DIO52_BIT (DOUT5_BIT)
#define DOUT5_OUTREG (__outreg__(DOUT5_PORT))
#define DOUT5_INREG (__inreg__(DOUT5_PORT))
#define DOUT5_DIRREG (__dirreg__(DOUT5_PORT))
#define DIO52_OUTREG (__outreg__(DOUT5_PORT))
#define DIO52_INREG (__inreg__(DOUT5_PORT))
#define DIO52_DIRREG (__dirreg__(DOUT5_PORT))
#endif
#if (defined(DOUT6_PORT) && defined(DOUT6_BIT))
#define DIO53 53
#define DOUT6 53
#define DIO53_PORT (DOUT6_PORT)
#define DIO53_BIT (DOUT6_BIT)
#define DOUT6_OUTREG (__outreg__(DOUT6_PORT))
#define DOUT6_INREG (__inreg__(DOUT6_PORT))
#define DOUT6_DIRREG (__dirreg__(DOUT6_PORT))
#define DIO53_OUTREG (__outreg__(DOUT6_PORT))
#define DIO53_INREG (__inreg__(DOUT6_PORT))
#define DIO53_DIRREG (__dirreg__(DOUT6_PORT))
#endif
#if (defined(DOUT7_PORT) && defined(DOUT7_BIT))
#define DIO54 54
#define DOUT7 54
#define DIO54_PORT (DOUT7_PORT)
#define DIO54_BIT (DOUT7_BIT)
#define DOUT7_OUTREG (__outreg__(DOUT7_PORT))
#define DOUT7_INREG (__inreg__(DOUT7_PORT))
#define DOUT7_DIRREG (__dirreg__(DOUT7_PORT))
#define DIO54_OUTREG (__outreg__(DOUT7_PORT))
#define DIO54_INREG (__inreg__(DOUT7_PORT))
#define DIO54_DIRREG (__dirreg__(DOUT7_PORT))
#endif
#if (defined(DOUT8_PORT) && defined(DOUT8_BIT))
#define DIO55 55
#define DOUT8 55
#define DIO55_PORT (DOUT8_PORT)
#define DIO55_BIT (DOUT8_BIT)
#define DOUT8_OUTREG (__outreg__(DOUT8_PORT))
#define DOUT8_INREG (__inreg__(DOUT8_PORT))
#define DOUT8_DIRREG (__dirreg__(DOUT8_PORT))
#define DIO55_OUTREG (__outreg__(DOUT8_PORT))
#define DIO55_INREG (__inreg__(DOUT8_PORT))
#define DIO55_DIRREG (__dirreg__(DOUT8_PORT))
#endif
#if (defined(DOUT9_PORT) && defined(DOUT9_BIT))
#define DIO56 56
#define DOUT9 56
#define DIO56_PORT (DOUT9_PORT)
#define DIO56_BIT (DOUT9_BIT)
#define DOUT9_OUTREG (__outreg__(DOUT9_PORT))
#define DOUT9_INREG (__inreg__(DOUT9_PORT))
#define DOUT9_DIRREG (__dirreg__(DOUT9_PORT))
#define DIO56_OUTREG (__outreg__(DOUT9_PORT))
#define DIO56_INREG (__inreg__(DOUT9_PORT))
#define DIO56_DIRREG (__dirreg__(DOUT9_PORT))
#endif
#if (defined(DOUT10_PORT) && defined(DOUT10_BIT))
#define DIO57 57
#define DOUT10 57
#define DIO57_PORT (DOUT10_PORT)
#define DIO57_BIT (DOUT10_BIT)
#define DOUT10_OUTREG (__outreg__(DOUT10_PORT))
#define DOUT10_INREG (__inreg__(DOUT10_PORT))
#define DOUT10_DIRREG (__dirreg__(DOUT10_PORT))
#define DIO57_OUTREG (__outreg__(DOUT10_PORT))
#define DIO57_INREG (__inreg__(DOUT10_PORT))
#define DIO57_DIRREG (__dirreg__(DOUT10_PORT))
#endif
#if (defined(DOUT11_PORT) && defined(DOUT11_BIT))
#define DIO58 58
#define DOUT11 58
#define DIO58_PORT (DOUT11_PORT)
#define DIO58_BIT (DOUT11_BIT)
#define DOUT11_OUTREG (__outreg__(DOUT11_PORT))
#define DOUT11_INREG (__inreg__(DOUT11_PORT))
#define DOUT11_DIRREG (__dirreg__(DOUT11_PORT))
#define DIO58_OUTREG (__outreg__(DOUT11_PORT))
#define DIO58_INREG (__inreg__(DOUT11_PORT))
#define DIO58_DIRREG (__dirreg__(DOUT11_PORT))
#endif
#if (defined(DOUT12_PORT) && defined(DOUT12_BIT))
#define DIO59 59
#define DOUT12 59
#define DIO59_PORT (DOUT12_PORT)
#define DIO59_BIT (DOUT12_BIT)
#define DOUT12_OUTREG (__outreg__(DOUT12_PORT))
#define DOUT12_INREG (__inreg__(DOUT12_PORT))
#define DOUT12_DIRREG (__dirreg__(DOUT12_PORT))
#define DIO59_OUTREG (__outreg__(DOUT12_PORT))
#define DIO59_INREG (__inreg__(DOUT12_PORT))
#define DIO59_DIRREG (__dirreg__(DOUT12_PORT))
#endif
#if (defined(DOUT13_PORT) && defined(DOUT13_BIT))
#define DIO60 60
#define DOUT13 60
#define DIO60_PORT (DOUT13_PORT)
#define DIO60_BIT (DOUT13_BIT)
#define DOUT13_OUTREG (__outreg__(DOUT13_PORT))
#define DOUT13_INREG (__inreg__(DOUT13_PORT))
#define DOUT13_DIRREG (__dirreg__(DOUT13_PORT))
#define DIO60_OUTREG (__outreg__(DOUT13_PORT))
#define DIO60_INREG (__inreg__(DOUT13_PORT))
#define DIO60_DIRREG (__dirreg__(DOUT13_PORT))
#endif
#if (defined(DOUT14_PORT) && defined(DOUT14_BIT))
#define DIO61 61
#define DOUT14 61
#define DIO61_PORT (DOUT14_PORT)
#define DIO61_BIT (DOUT14_BIT)
#define DOUT14_OUTREG (__outreg__(DOUT14_PORT))
#define DOUT14_INREG (__inreg__(DOUT14_PORT))
#define DOUT14_DIRREG (__dirreg__(DOUT14_PORT))
#define DIO61_OUTREG (__outreg__(DOUT14_PORT))
#define DIO61_INREG (__inreg__(DOUT14_PORT))
#define DIO61_DIRREG (__dirreg__(DOUT14_PORT))
#endif
#if (defined(DOUT15_PORT) && defined(DOUT15_BIT))
#define DIO62 62
#define DOUT15 62
#define DIO62_PORT (DOUT15_PORT)
#define DIO62_BIT (DOUT15_BIT)
#define DOUT15_OUTREG (__outreg__(DOUT15_PORT))
#define DOUT15_INREG (__inreg__(DOUT15_PORT))
#define DOUT15_DIRREG (__dirreg__(DOUT15_PORT))
#define DIO62_OUTREG (__outreg__(DOUT15_PORT))
#define DIO62_INREG (__inreg__(DOUT15_PORT))
#define DIO62_DIRREG (__dirreg__(DOUT15_PORT))
#endif
#if (defined(DOUT16_PORT) && defined(DOUT16_BIT))
#define DIO63 63
#define DOUT16 63
#define DIO63_PORT (DOUT16_PORT)
#define DIO63_BIT (DOUT16_BIT)
#define DOUT16_OUTREG (__outreg__(DOUT16_PORT))
#define DOUT16_INREG (__inreg__(DOUT16_PORT))
#define DOUT16_DIRREG (__dirreg__(DOUT16_PORT))
#define DIO63_OUTREG (__outreg__(DOUT16_PORT))
#define DIO63_INREG (__inreg__(DOUT16_PORT))
#define DIO63_DIRREG (__dirreg__(DOUT16_PORT))
#endif
#if (defined(DOUT17_PORT) && defined(DOUT17_BIT))
#define DIO64 64
#define DOUT17 64
#define DIO64_PORT (DOUT17_PORT)
#define DIO64_BIT (DOUT17_BIT)
#define DOUT17_OUTREG (__outreg__(DOUT17_PORT))
#define DOUT17_INREG (__inreg__(DOUT17_PORT))
#define DOUT17_DIRREG (__dirreg__(DOUT17_PORT))
#define DIO64_OUTREG (__outreg__(DOUT17_PORT))
#define DIO64_INREG (__inreg__(DOUT17_PORT))
#define DIO64_DIRREG (__dirreg__(DOUT17_PORT))
#endif
#if (defined(DOUT18_PORT) && defined(DOUT18_BIT))
#define DIO65 65
#define DOUT18 65
#define DIO65_PORT (DOUT18_PORT)
#define DIO65_BIT (DOUT18_BIT)
#define DOUT18_OUTREG (__outreg__(DOUT18_PORT))
#define DOUT18_INREG (__inreg__(DOUT18_PORT))
#define DOUT18_DIRREG (__dirreg__(DOUT18_PORT))
#define DIO65_OUTREG (__outreg__(DOUT18_PORT))
#define DIO65_INREG (__inreg__(DOUT18_PORT))
#define DIO65_DIRREG (__dirreg__(DOUT18_PORT))
#endif
#if (defined(DOUT19_PORT) && defined(DOUT19_BIT))
#define DIO66 66
#define DOUT19 66
#define DIO66_PORT (DOUT19_PORT)
#define DIO66_BIT (DOUT19_BIT)
#define DOUT19_OUTREG (__outreg__(DOUT19_PORT))
#define DOUT19_INREG (__inreg__(DOUT19_PORT))
#define DOUT19_DIRREG (__dirreg__(DOUT19_PORT))
#define DIO66_OUTREG (__outreg__(DOUT19_PORT))
#define DIO66_INREG (__inreg__(DOUT19_PORT))
#define DIO66_DIRREG (__dirreg__(DOUT19_PORT))
#endif
#if (defined(DOUT20_PORT) && defined(DOUT20_BIT))
#define DIO67 67
#define DOUT20 67
#define DIO67_PORT (DOUT20_PORT)
#define DIO67_BIT (DOUT20_BIT)
#define DOUT20_OUTREG (__outreg__(DOUT20_PORT))
#define DOUT20_INREG (__inreg__(DOUT20_PORT))
#define DOUT20_DIRREG (__dirreg__(DOUT20_PORT))
#define DIO67_OUTREG (__outreg__(DOUT20_PORT))
#define DIO67_INREG (__inreg__(DOUT20_PORT))
#define DIO67_DIRREG (__dirreg__(DOUT20_PORT))
#endif
#if (defined(DOUT21_PORT) && defined(DOUT21_BIT))
#define DIO68 68
#define DOUT21 68
#define DIO68_PORT (DOUT21_PORT)
#define DIO68_BIT (DOUT21_BIT)
#define DOUT21_OUTREG (__outreg__(DOUT21_PORT))
#define DOUT21_INREG (__inreg__(DOUT21_PORT))
#define DOUT21_DIRREG (__dirreg__(DOUT21_PORT))
#define DIO68_OUTREG (__outreg__(DOUT21_PORT))
#define DIO68_INREG (__inreg__(DOUT21_PORT))
#define DIO68_DIRREG (__dirreg__(DOUT21_PORT))
#endif
#if (defined(DOUT22_PORT) && defined(DOUT22_BIT))
#define DIO69 69
#define DOUT22 69
#define DIO69_PORT (DOUT22_PORT)
#define DIO69_BIT (DOUT22_BIT)
#define DOUT22_OUTREG (__outreg__(DOUT22_PORT))
#define DOUT22_INREG (__inreg__(DOUT22_PORT))
#define DOUT22_DIRREG (__dirreg__(DOUT22_PORT))
#define DIO69_OUTREG (__outreg__(DOUT22_PORT))
#define DIO69_INREG (__inreg__(DOUT22_PORT))
#define DIO69_DIRREG (__dirreg__(DOUT22_PORT))
#endif
#if (defined(DOUT23_PORT) && defined(DOUT23_BIT))
#define DIO70 70
#define DOUT23 70
#define DIO70_PORT (DOUT23_PORT)
#define DIO70_BIT (DOUT23_BIT)
#define DOUT23_OUTREG (__outreg__(DOUT23_PORT))
#define DOUT23_INREG (__inreg__(DOUT23_PORT))
#define DOUT23_DIRREG (__dirreg__(DOUT23_PORT))
#define DIO70_OUTREG (__outreg__(DOUT23_PORT))
#define DIO70_INREG (__inreg__(DOUT23_PORT))
#define DIO70_DIRREG (__dirreg__(DOUT23_PORT))
#endif
#if (defined(DOUT24_PORT) && defined(DOUT24_BIT))
#define DIO71 71
#define DOUT24 71
#define DIO71_PORT (DOUT24_PORT)
#define DIO71_BIT (DOUT24_BIT)
#define DOUT24_OUTREG (__outreg__(DOUT24_PORT))
#define DOUT24_INREG (__inreg__(DOUT24_PORT))
#define DOUT24_DIRREG (__dirreg__(DOUT24_PORT))
#define DIO71_OUTREG (__outreg__(DOUT24_PORT))
#define DIO71_INREG (__inreg__(DOUT24_PORT))
#define DIO71_DIRREG (__dirreg__(DOUT24_PORT))
#endif
#if (defined(DOUT25_PORT) && defined(DOUT25_BIT))
#define DIO72 72
#define DOUT25 72
#define DIO72_PORT (DOUT25_PORT)
#define DIO72_BIT (DOUT25_BIT)
#define DOUT25_OUTREG (__outreg__(DOUT25_PORT))
#define DOUT25_INREG (__inreg__(DOUT25_PORT))
#define DOUT25_DIRREG (__dirreg__(DOUT25_PORT))
#define DIO72_OUTREG (__outreg__(DOUT25_PORT))
#define DIO72_INREG (__inreg__(DOUT25_PORT))
#define DIO72_DIRREG (__dirreg__(DOUT25_PORT))
#endif
#if (defined(DOUT26_PORT) && defined(DOUT26_BIT))
#define DIO73 73
#define DOUT26 73
#define DIO73_PORT (DOUT26_PORT)
#define DIO73_BIT (DOUT26_BIT)
#define DOUT26_OUTREG (__outreg__(DOUT26_PORT))
#define DOUT26_INREG (__inreg__(DOUT26_PORT))
#define DOUT26_DIRREG (__dirreg__(DOUT26_PORT))
#define DIO73_OUTREG (__outreg__(DOUT26_PORT))
#define DIO73_INREG (__inreg__(DOUT26_PORT))
#define DIO73_DIRREG (__dirreg__(DOUT26_PORT))
#endif
#if (defined(DOUT27_PORT) && defined(DOUT27_BIT))
#define DIO74 74
#define DOUT27 74
#define DIO74_PORT (DOUT27_PORT)
#define DIO74_BIT (DOUT27_BIT)
#define DOUT27_OUTREG (__outreg__(DOUT27_PORT))
#define DOUT27_INREG (__inreg__(DOUT27_PORT))
#define DOUT27_DIRREG (__dirreg__(DOUT27_PORT))
#define DIO74_OUTREG (__outreg__(DOUT27_PORT))
#define DIO74_INREG (__inreg__(DOUT27_PORT))
#define DIO74_DIRREG (__dirreg__(DOUT27_PORT))
#endif
#if (defined(DOUT28_PORT) && defined(DOUT28_BIT))
#define DIO75 75
#define DOUT28 75
#define DIO75_PORT (DOUT28_PORT)
#define DIO75_BIT (DOUT28_BIT)
#define DOUT28_OUTREG (__outreg__(DOUT28_PORT))
#define DOUT28_INREG (__inreg__(DOUT28_PORT))
#define DOUT28_DIRREG (__dirreg__(DOUT28_PORT))
#define DIO75_OUTREG (__outreg__(DOUT28_PORT))
#define DIO75_INREG (__inreg__(DOUT28_PORT))
#define DIO75_DIRREG (__dirreg__(DOUT28_PORT))
#endif
#if (defined(DOUT29_PORT) && defined(DOUT29_BIT))
#define DIO76 76
#define DOUT29 76
#define DIO76_PORT (DOUT29_PORT)
#define DIO76_BIT (DOUT29_BIT)
#define DOUT29_OUTREG (__outreg__(DOUT29_PORT))
#define DOUT29_INREG (__inreg__(DOUT29_PORT))
#define DOUT29_DIRREG (__dirreg__(DOUT29_PORT))
#define DIO76_OUTREG (__outreg__(DOUT29_PORT))
#define DIO76_INREG (__inreg__(DOUT29_PORT))
#define DIO76_DIRREG (__dirreg__(DOUT29_PORT))
#endif
#if (defined(DOUT30_PORT) && defined(DOUT30_BIT))
#define DIO77 77
#define DOUT30 77
#define DIO77_PORT (DOUT30_PORT)
#define DIO77_BIT (DOUT30_BIT)
#define DOUT30_OUTREG (__outreg__(DOUT30_PORT))
#define DOUT30_INREG (__inreg__(DOUT30_PORT))
#define DOUT30_DIRREG (__dirreg__(DOUT30_PORT))
#define DIO77_OUTREG (__outreg__(DOUT30_PORT))
#define DIO77_INREG (__inreg__(DOUT30_PORT))
#define DIO77_DIRREG (__dirreg__(DOUT30_PORT))
#endif
#if (defined(DOUT31_PORT) && defined(DOUT31_BIT))
#define DIO78 78
#define DOUT31 78
#define DIO78_PORT (DOUT31_PORT)
#define DIO78_BIT (DOUT31_BIT)
#define DOUT31_OUTREG (__outreg__(DOUT31_PORT))
#define DOUT31_INREG (__inreg__(DOUT31_PORT))
#define DOUT31_DIRREG (__dirreg__(DOUT31_PORT))
#define DIO78_OUTREG (__outreg__(DOUT31_PORT))
#define DIO78_INREG (__inreg__(DOUT31_PORT))
#define DIO78_DIRREG (__dirreg__(DOUT31_PORT))
#endif
#if (defined(DOUT32_PORT) && defined(DOUT32_BIT))
#define DIO79 79
#define DOUT32 79
#define DIO79_PORT (DOUT32_PORT)
#define DIO79_BIT (DOUT32_BIT)
#define DOUT32_OUTREG (__outreg__(DOUT32_PORT))
#define DOUT32_INREG (__inreg__(DOUT32_PORT))
#define DOUT32_DIRREG (__dirreg__(DOUT32_PORT))
#define DIO79_OUTREG (__outreg__(DOUT32_PORT))
#define DIO79_INREG (__inreg__(DOUT32_PORT))
#define DIO79_DIRREG (__dirreg__(DOUT32_PORT))
#endif
#if (defined(DOUT33_PORT) && defined(DOUT33_BIT))
#define DIO80 80
#define DOUT33 80
#define DIO80_PORT (DOUT33_PORT)
#define DIO80_BIT (DOUT33_BIT)
#define DOUT33_OUTREG (__outreg__(DOUT33_PORT))
#define DOUT33_INREG (__inreg__(DOUT33_PORT))
#define DOUT33_DIRREG (__dirreg__(DOUT33_PORT))
#define DIO80_OUTREG (__outreg__(DOUT33_PORT))
#define DIO80_INREG (__inreg__(DOUT33_PORT))
#define DIO80_DIRREG (__dirreg__(DOUT33_PORT))
#endif
#if (defined(DOUT34_PORT) && defined(DOUT34_BIT))
#define DIO81 81
#define DOUT34 81
#define DIO81_PORT (DOUT34_PORT)
#define DIO81_BIT (DOUT34_BIT)
#define DOUT34_OUTREG (__outreg__(DOUT34_PORT))
#define DOUT34_INREG (__inreg__(DOUT34_PORT))
#define DOUT34_DIRREG (__dirreg__(DOUT34_PORT))
#define DIO81_OUTREG (__outreg__(DOUT34_PORT))
#define DIO81_INREG (__inreg__(DOUT34_PORT))
#define DIO81_DIRREG (__dirreg__(DOUT34_PORT))
#endif
#if (defined(DOUT35_PORT) && defined(DOUT35_BIT))
#define DIO82 82
#define DOUT35 82
#define DIO82_PORT (DOUT35_PORT)
#define DIO82_BIT (DOUT35_BIT)
#define DOUT35_OUTREG (__outreg__(DOUT35_PORT))
#define DOUT35_INREG (__inreg__(DOUT35_PORT))
#define DOUT35_DIRREG (__dirreg__(DOUT35_PORT))
#define DIO82_OUTREG (__outreg__(DOUT35_PORT))
#define DIO82_INREG (__inreg__(DOUT35_PORT))
#define DIO82_DIRREG (__dirreg__(DOUT35_PORT))
#endif
#if (defined(DOUT36_PORT) && defined(DOUT36_BIT))
#define DIO83 83
#define DOUT36 83
#define DIO83_PORT (DOUT36_PORT)
#define DIO83_BIT (DOUT36_BIT)
#define DOUT36_OUTREG (__outreg__(DOUT36_PORT))
#define DOUT36_INREG (__inreg__(DOUT36_PORT))
#define DOUT36_DIRREG (__dirreg__(DOUT36_PORT))
#define DIO83_OUTREG (__outreg__(DOUT36_PORT))
#define DIO83_INREG (__inreg__(DOUT36_PORT))
#define DIO83_DIRREG (__dirreg__(DOUT36_PORT))
#endif
#if (defined(DOUT37_PORT) && defined(DOUT37_BIT))
#define DIO84 84
#define DOUT37 84
#define DIO84_PORT (DOUT37_PORT)
#define DIO84_BIT (DOUT37_BIT)
#define DOUT37_OUTREG (__outreg__(DOUT37_PORT))
#define DOUT37_INREG (__inreg__(DOUT37_PORT))
#define DOUT37_DIRREG (__dirreg__(DOUT37_PORT))
#define DIO84_OUTREG (__outreg__(DOUT37_PORT))
#define DIO84_INREG (__inreg__(DOUT37_PORT))
#define DIO84_DIRREG (__dirreg__(DOUT37_PORT))
#endif
#if (defined(DOUT38_PORT) && defined(DOUT38_BIT))
#define DIO85 85
#define DOUT38 85
#define DIO85_PORT (DOUT38_PORT)
#define DIO85_BIT (DOUT38_BIT)
#define DOUT38_OUTREG (__outreg__(DOUT38_PORT))
#define DOUT38_INREG (__inreg__(DOUT38_PORT))
#define DOUT38_DIRREG (__dirreg__(DOUT38_PORT))
#define DIO85_OUTREG (__outreg__(DOUT38_PORT))
#define DIO85_INREG (__inreg__(DOUT38_PORT))
#define DIO85_DIRREG (__dirreg__(DOUT38_PORT))
#endif
#if (defined(DOUT39_PORT) && defined(DOUT39_BIT))
#define DIO86 86
#define DOUT39 86
#define DIO86_PORT (DOUT39_PORT)
#define DIO86_BIT (DOUT39_BIT)
#define DOUT39_OUTREG (__outreg__(DOUT39_PORT))
#define DOUT39_INREG (__inreg__(DOUT39_PORT))
#define DOUT39_DIRREG (__dirreg__(DOUT39_PORT))
#define DIO86_OUTREG (__outreg__(DOUT39_PORT))
#define DIO86_INREG (__inreg__(DOUT39_PORT))
#define DIO86_DIRREG (__dirreg__(DOUT39_PORT))
#endif
#if (defined(DOUT40_PORT) && defined(DOUT40_BIT))
#define DIO87 87
#define DOUT40 87
#define DIO87_PORT (DOUT40_PORT)
#define DIO87_BIT (DOUT40_BIT)
#define DOUT40_OUTREG (__outreg__(DOUT40_PORT))
#define DOUT40_INREG (__inreg__(DOUT40_PORT))
#define DOUT40_DIRREG (__dirreg__(DOUT40_PORT))
#define DIO87_OUTREG (__outreg__(DOUT40_PORT))
#define DIO87_INREG (__inreg__(DOUT40_PORT))
#define DIO87_DIRREG (__dirreg__(DOUT40_PORT))
#endif
#if (defined(DOUT41_PORT) && defined(DOUT41_BIT))
#define DIO88 88
#define DOUT41 88
#define DIO88_PORT (DOUT41_PORT)
#define DIO88_BIT (DOUT41_BIT)
#define DOUT41_OUTREG (__outreg__(DOUT41_PORT))
#define DOUT41_INREG (__inreg__(DOUT41_PORT))
#define DOUT41_DIRREG (__dirreg__(DOUT41_PORT))
#define DIO88_OUTREG (__outreg__(DOUT41_PORT))
#define DIO88_INREG (__inreg__(DOUT41_PORT))
#define DIO88_DIRREG (__dirreg__(DOUT41_PORT))
#endif
#if (defined(DOUT42_PORT) && defined(DOUT42_BIT))
#define DIO89 89
#define DOUT42 89
#define DIO89_PORT (DOUT42_PORT)
#define DIO89_BIT (DOUT42_BIT)
#define DOUT42_OUTREG (__outreg__(DOUT42_PORT))
#define DOUT42_INREG (__inreg__(DOUT42_PORT))
#define DOUT42_DIRREG (__dirreg__(DOUT42_PORT))
#define DIO89_OUTREG (__outreg__(DOUT42_PORT))
#define DIO89_INREG (__inreg__(DOUT42_PORT))
#define DIO89_DIRREG (__dirreg__(DOUT42_PORT))
#endif
#if (defined(DOUT43_PORT) && defined(DOUT43_BIT))
#define DIO90 90
#define DOUT43 90
#define DIO90_PORT (DOUT43_PORT)
#define DIO90_BIT (DOUT43_BIT)
#define DOUT43_OUTREG (__outreg__(DOUT43_PORT))
#define DOUT43_INREG (__inreg__(DOUT43_PORT))
#define DOUT43_DIRREG (__dirreg__(DOUT43_PORT))
#define DIO90_OUTREG (__outreg__(DOUT43_PORT))
#define DIO90_INREG (__inreg__(DOUT43_PORT))
#define DIO90_DIRREG (__dirreg__(DOUT43_PORT))
#endif
#if (defined(DOUT44_PORT) && defined(DOUT44_BIT))
#define DIO91 91
#define DOUT44 91
#define DIO91_PORT (DOUT44_PORT)
#define DIO91_BIT (DOUT44_BIT)
#define DOUT44_OUTREG (__outreg__(DOUT44_PORT))
#define DOUT44_INREG (__inreg__(DOUT44_PORT))
#define DOUT44_DIRREG (__dirreg__(DOUT44_PORT))
#define DIO91_OUTREG (__outreg__(DOUT44_PORT))
#define DIO91_INREG (__inreg__(DOUT44_PORT))
#define DIO91_DIRREG (__dirreg__(DOUT44_PORT))
#endif
#if (defined(DOUT45_PORT) && defined(DOUT45_BIT))
#define DIO92 92
#define DOUT45 92
#define DIO92_PORT (DOUT45_PORT)
#define DIO92_BIT (DOUT45_BIT)
#define DOUT45_OUTREG (__outreg__(DOUT45_PORT))
#define DOUT45_INREG (__inreg__(DOUT45_PORT))
#define DOUT45_DIRREG (__dirreg__(DOUT45_PORT))
#define DIO92_OUTREG (__outreg__(DOUT45_PORT))
#define DIO92_INREG (__inreg__(DOUT45_PORT))
#define DIO92_DIRREG (__dirreg__(DOUT45_PORT))
#endif
#if (defined(DOUT46_PORT) && defined(DOUT46_BIT))
#define DIO93 93
#define DOUT46 93
#define DIO93_PORT (DOUT46_PORT)
#define DIO93_BIT (DOUT46_BIT)
#define DOUT46_OUTREG (__outreg__(DOUT46_PORT))
#define DOUT46_INREG (__inreg__(DOUT46_PORT))
#define DOUT46_DIRREG (__dirreg__(DOUT46_PORT))
#define DIO93_OUTREG (__outreg__(DOUT46_PORT))
#define DIO93_INREG (__inreg__(DOUT46_PORT))
#define DIO93_DIRREG (__dirreg__(DOUT46_PORT))
#endif
#if (defined(DOUT47_PORT) && defined(DOUT47_BIT))
#define DIO94 94
#define DOUT47 94
#define DIO94_PORT (DOUT47_PORT)
#define DIO94_BIT (DOUT47_BIT)
#define DOUT47_OUTREG (__outreg__(DOUT47_PORT))
#define DOUT47_INREG (__inreg__(DOUT47_PORT))
#define DOUT47_DIRREG (__dirreg__(DOUT47_PORT))
#define DIO94_OUTREG (__outreg__(DOUT47_PORT))
#define DIO94_INREG (__inreg__(DOUT47_PORT))
#define DIO94_DIRREG (__dirreg__(DOUT47_PORT))
#endif
#if (defined(DOUT48_PORT) && defined(DOUT48_BIT))
#define DIO95 95
#define DOUT48 95
#define DIO95_PORT (DOUT48_PORT)
#define DIO95_BIT (DOUT48_BIT)
#define DOUT48_OUTREG (__outreg__(DOUT48_PORT))
#define DOUT48_INREG (__inreg__(DOUT48_PORT))
#define DOUT48_DIRREG (__dirreg__(DOUT48_PORT))
#define DIO95_OUTREG (__outreg__(DOUT48_PORT))
#define DIO95_INREG (__inreg__(DOUT48_PORT))
#define DIO95_DIRREG (__dirreg__(DOUT48_PORT))
#endif
#if (defined(DOUT49_PORT) && defined(DOUT49_BIT))
#define DIO96 96
#define DOUT49 96
#define DIO96_PORT (DOUT49_PORT)
#define DIO96_BIT (DOUT49_BIT)
#define DOUT49_OUTREG (__outreg__(DOUT49_PORT))
#define DOUT49_INREG (__inreg__(DOUT49_PORT))
#define DOUT49_DIRREG (__dirreg__(DOUT49_PORT))
#define DIO96_OUTREG (__outreg__(DOUT49_PORT))
#define DIO96_INREG (__inreg__(DOUT49_PORT))
#define DIO96_DIRREG (__dirreg__(DOUT49_PORT))
#endif
#if (defined(LIMIT_X_PORT) && defined(LIMIT_X_BIT))
#define DIO100 100
#define LIMIT_X 100
#define DIO100_PORT (LIMIT_X_PORT)
#define DIO100_BIT (LIMIT_X_BIT)
#define LIMIT_X_OUTREG (__outreg__(LIMIT_X_PORT))
#define LIMIT_X_INREG (__inreg__(LIMIT_X_PORT))
#define LIMIT_X_DIRREG (__dirreg__(LIMIT_X_PORT))
#define DIO100_OUTREG (__outreg__(LIMIT_X_PORT))
#define DIO100_INREG (__inreg__(LIMIT_X_PORT))
#define DIO100_DIRREG (__dirreg__(LIMIT_X_PORT))
#endif
#if (defined(LIMIT_Y_PORT) && defined(LIMIT_Y_BIT))
#define DIO101 101
#define LIMIT_Y 101
#define DIO101_PORT (LIMIT_Y_PORT)
#define DIO101_BIT (LIMIT_Y_BIT)
#define LIMIT_Y_OUTREG (__outreg__(LIMIT_Y_PORT))
#define LIMIT_Y_INREG (__inreg__(LIMIT_Y_PORT))
#define LIMIT_Y_DIRREG (__dirreg__(LIMIT_Y_PORT))
#define DIO101_OUTREG (__outreg__(LIMIT_Y_PORT))
#define DIO101_INREG (__inreg__(LIMIT_Y_PORT))
#define DIO101_DIRREG (__dirreg__(LIMIT_Y_PORT))
#endif
#if (defined(LIMIT_Z_PORT) && defined(LIMIT_Z_BIT))
#define DIO102 102
#define LIMIT_Z 102
#define DIO102_PORT (LIMIT_Z_PORT)
#define DIO102_BIT (LIMIT_Z_BIT)
#define LIMIT_Z_OUTREG (__outreg__(LIMIT_Z_PORT))
#define LIMIT_Z_INREG (__inreg__(LIMIT_Z_PORT))
#define LIMIT_Z_DIRREG (__dirreg__(LIMIT_Z_PORT))
#define DIO102_OUTREG (__outreg__(LIMIT_Z_PORT))
#define DIO102_INREG (__inreg__(LIMIT_Z_PORT))
#define DIO102_DIRREG (__dirreg__(LIMIT_Z_PORT))
#endif
#if (defined(LIMIT_X2_PORT) && defined(LIMIT_X2_BIT))
#define DIO103 103
#define LIMIT_X2 103
#define DIO103_PORT (LIMIT_X2_PORT)
#define DIO103_BIT (LIMIT_X2_BIT)
#define LIMIT_X2_OUTREG (__outreg__(LIMIT_X2_PORT))
#define LIMIT_X2_INREG (__inreg__(LIMIT_X2_PORT))
#define LIMIT_X2_DIRREG (__dirreg__(LIMIT_X2_PORT))
#define DIO103_OUTREG (__outreg__(LIMIT_X2_PORT))
#define DIO103_INREG (__inreg__(LIMIT_X2_PORT))
#define DIO103_DIRREG (__dirreg__(LIMIT_X2_PORT))
#endif
#if (defined(LIMIT_Y2_PORT) && defined(LIMIT_Y2_BIT))
#define DIO104 104
#define LIMIT_Y2 104
#define DIO104_PORT (LIMIT_Y2_PORT)
#define DIO104_BIT (LIMIT_Y2_BIT)
#define LIMIT_Y2_OUTREG (__outreg__(LIMIT_Y2_PORT))
#define LIMIT_Y2_INREG (__inreg__(LIMIT_Y2_PORT))
#define LIMIT_Y2_DIRREG (__dirreg__(LIMIT_Y2_PORT))
#define DIO104_OUTREG (__outreg__(LIMIT_Y2_PORT))
#define DIO104_INREG (__inreg__(LIMIT_Y2_PORT))
#define DIO104_DIRREG (__dirreg__(LIMIT_Y2_PORT))
#endif
#if (defined(LIMIT_Z2_PORT) && defined(LIMIT_Z2_BIT))
#define DIO105 105
#define LIMIT_Z2 105
#define DIO105_PORT (LIMIT_Z2_PORT)
#define DIO105_BIT (LIMIT_Z2_BIT)
#define LIMIT_Z2_OUTREG (__outreg__(LIMIT_Z2_PORT))
#define LIMIT_Z2_INREG (__inreg__(LIMIT_Z2_PORT))
#define LIMIT_Z2_DIRREG (__dirreg__(LIMIT_Z2_PORT))
#define DIO105_OUTREG (__outreg__(LIMIT_Z2_PORT))
#define DIO105_INREG (__inreg__(LIMIT_Z2_PORT))
#define DIO105_DIRREG (__dirreg__(LIMIT_Z2_PORT))
#endif
#if (defined(LIMIT_A_PORT) && defined(LIMIT_A_BIT))
#define DIO106 106
#define LIMIT_A 106
#define DIO106_PORT (LIMIT_A_PORT)
#define DIO106_BIT (LIMIT_A_BIT)
#define LIMIT_A_OUTREG (__outreg__(LIMIT_A_PORT))
#define LIMIT_A_INREG (__inreg__(LIMIT_A_PORT))
#define LIMIT_A_DIRREG (__dirreg__(LIMIT_A_PORT))
#define DIO106_OUTREG (__outreg__(LIMIT_A_PORT))
#define DIO106_INREG (__inreg__(LIMIT_A_PORT))
#define DIO106_DIRREG (__dirreg__(LIMIT_A_PORT))
#endif
#if (defined(LIMIT_B_PORT) && defined(LIMIT_B_BIT))
#define DIO107 107
#define LIMIT_B 107
#define DIO107_PORT (LIMIT_B_PORT)
#define DIO107_BIT (LIMIT_B_BIT)
#define LIMIT_B_OUTREG (__outreg__(LIMIT_B_PORT))
#define LIMIT_B_INREG (__inreg__(LIMIT_B_PORT))
#define LIMIT_B_DIRREG (__dirreg__(LIMIT_B_PORT))
#define DIO107_OUTREG (__outreg__(LIMIT_B_PORT))
#define DIO107_INREG (__inreg__(LIMIT_B_PORT))
#define DIO107_DIRREG (__dirreg__(LIMIT_B_PORT))
#endif
#if (defined(LIMIT_C_PORT) && defined(LIMIT_C_BIT))
#define DIO108 108
#define LIMIT_C 108
#define DIO108_PORT (LIMIT_C_PORT)
#define DIO108_BIT (LIMIT_C_BIT)
#define LIMIT_C_OUTREG (__outreg__(LIMIT_C_PORT))
#define LIMIT_C_INREG (__inreg__(LIMIT_C_PORT))
#define LIMIT_C_DIRREG (__dirreg__(LIMIT_C_PORT))
#define DIO108_OUTREG (__outreg__(LIMIT_C_PORT))
#define DIO108_INREG (__inreg__(LIMIT_C_PORT))
#define DIO108_DIRREG (__dirreg__(LIMIT_C_PORT))
#endif
#if (defined(PROBE_PORT) && defined(PROBE_BIT))
#define DIO109 109
#define PROBE 109
#define DIO109_PORT (PROBE_PORT)
#define DIO109_BIT (PROBE_BIT)
#define PROBE_OUTREG (__outreg__(PROBE_PORT))
#define PROBE_INREG (__inreg__(PROBE_PORT))
#define PROBE_DIRREG (__dirreg__(PROBE_PORT))
#define DIO109_OUTREG (__outreg__(PROBE_PORT))
#define DIO109_INREG (__inreg__(PROBE_PORT))
#define DIO109_DIRREG (__dirreg__(PROBE_PORT))
#endif
#if (defined(ESTOP_PORT) && defined(ESTOP_BIT))
#define DIO110 110
#define ESTOP 110
#define DIO110_PORT (ESTOP_PORT)
#define DIO110_BIT (ESTOP_BIT)
#define ESTOP_OUTREG (__outreg__(ESTOP_PORT))
#define ESTOP_INREG (__inreg__(ESTOP_PORT))
#define ESTOP_DIRREG (__dirreg__(ESTOP_PORT))
#define DIO110_OUTREG (__outreg__(ESTOP_PORT))
#define DIO110_INREG (__inreg__(ESTOP_PORT))
#define DIO110_DIRREG (__dirreg__(ESTOP_PORT))
#endif
#if (defined(SAFETY_DOOR_PORT) && defined(SAFETY_DOOR_BIT))
#define DIO111 111
#define SAFETY_DOOR 111
#define DIO111_PORT (SAFETY_DOOR_PORT)
#define DIO111_BIT (SAFETY_DOOR_BIT)
#define SAFETY_DOOR_OUTREG (__outreg__(SAFETY_DOOR_PORT))
#define SAFETY_DOOR_INREG (__inreg__(SAFETY_DOOR_PORT))
#define SAFETY_DOOR_DIRREG (__dirreg__(SAFETY_DOOR_PORT))
#define DIO111_OUTREG (__outreg__(SAFETY_DOOR_PORT))
#define DIO111_INREG (__inreg__(SAFETY_DOOR_PORT))
#define DIO111_DIRREG (__dirreg__(SAFETY_DOOR_PORT))
#endif
#if (defined(FHOLD_PORT) && defined(FHOLD_BIT))
#define DIO112 112
#define FHOLD 112
#define DIO112_PORT (FHOLD_PORT)
#define DIO112_BIT (FHOLD_BIT)
#define FHOLD_OUTREG (__outreg__(FHOLD_PORT))
#define FHOLD_INREG (__inreg__(FHOLD_PORT))
#define FHOLD_DIRREG (__dirreg__(FHOLD_PORT))
#define DIO112_OUTREG (__outreg__(FHOLD_PORT))
#define DIO112_INREG (__inreg__(FHOLD_PORT))
#define DIO112_DIRREG (__dirreg__(FHOLD_PORT))
#endif
#if (defined(CS_RES_PORT) && defined(CS_RES_BIT))
#define DIO113 113
#define CS_RES 113
#define DIO113_PORT (CS_RES_PORT)
#define DIO113_BIT (CS_RES_BIT)
#define CS_RES_OUTREG (__outreg__(CS_RES_PORT))
#define CS_RES_INREG (__inreg__(CS_RES_PORT))
#define CS_RES_DIRREG (__dirreg__(CS_RES_PORT))
#define DIO113_OUTREG (__outreg__(CS_RES_PORT))
#define DIO113_INREG (__inreg__(CS_RES_PORT))
#define DIO113_DIRREG (__dirreg__(CS_RES_PORT))
#endif
#if (defined(ANALOG0_PORT) && defined(ANALOG0_BIT))
#define DIO114 114
#define ANALOG0 114
#define DIO114_PORT (ANALOG0_PORT)
#define DIO114_BIT (ANALOG0_BIT)
#define ANALOG0_OUTREG (__outreg__(ANALOG0_PORT))
#define ANALOG0_INREG (__inreg__(ANALOG0_PORT))
#define ANALOG0_DIRREG (__dirreg__(ANALOG0_PORT))
#define DIO114_OUTREG (__outreg__(ANALOG0_PORT))
#define DIO114_INREG (__inreg__(ANALOG0_PORT))
#define DIO114_DIRREG (__dirreg__(ANALOG0_PORT))
#endif
#if (defined(ANALOG1_PORT) && defined(ANALOG1_BIT))
#define DIO115 115
#define ANALOG1 115
#define DIO115_PORT (ANALOG1_PORT)
#define DIO115_BIT (ANALOG1_BIT)
#define ANALOG1_OUTREG (__outreg__(ANALOG1_PORT))
#define ANALOG1_INREG (__inreg__(ANALOG1_PORT))
#define ANALOG1_DIRREG (__dirreg__(ANALOG1_PORT))
#define DIO115_OUTREG (__outreg__(ANALOG1_PORT))
#define DIO115_INREG (__inreg__(ANALOG1_PORT))
#define DIO115_DIRREG (__dirreg__(ANALOG1_PORT))
#endif
#if (defined(ANALOG2_PORT) && defined(ANALOG2_BIT))
#define DIO116 116
#define ANALOG2 116
#define DIO116_PORT (ANALOG2_PORT)
#define DIO116_BIT (ANALOG2_BIT)
#define ANALOG2_OUTREG (__outreg__(ANALOG2_PORT))
#define ANALOG2_INREG (__inreg__(ANALOG2_PORT))
#define ANALOG2_DIRREG (__dirreg__(ANALOG2_PORT))
#define DIO116_OUTREG (__outreg__(ANALOG2_PORT))
#define DIO116_INREG (__inreg__(ANALOG2_PORT))
#define DIO116_DIRREG (__dirreg__(ANALOG2_PORT))
#endif
#if (defined(ANALOG3_PORT) && defined(ANALOG3_BIT))
#define DIO117 117
#define ANALOG3 117
#define DIO117_PORT (ANALOG3_PORT)
#define DIO117_BIT (ANALOG3_BIT)
#define ANALOG3_OUTREG (__outreg__(ANALOG3_PORT))
#define ANALOG3_INREG (__inreg__(ANALOG3_PORT))
#define ANALOG3_DIRREG (__dirreg__(ANALOG3_PORT))
#define DIO117_OUTREG (__outreg__(ANALOG3_PORT))
#define DIO117_INREG (__inreg__(ANALOG3_PORT))
#define DIO117_DIRREG (__dirreg__(ANALOG3_PORT))
#endif
#if (defined(ANALOG4_PORT) && defined(ANALOG4_BIT))
#define DIO118 118
#define ANALOG4 118
#define DIO118_PORT (ANALOG4_PORT)
#define DIO118_BIT (ANALOG4_BIT)
#define ANALOG4_OUTREG (__outreg__(ANALOG4_PORT))
#define ANALOG4_INREG (__inreg__(ANALOG4_PORT))
#define ANALOG4_DIRREG (__dirreg__(ANALOG4_PORT))
#define DIO118_OUTREG (__outreg__(ANALOG4_PORT))
#define DIO118_INREG (__inreg__(ANALOG4_PORT))
#define DIO118_DIRREG (__dirreg__(ANALOG4_PORT))
#endif
#if (defined(ANALOG5_PORT) && defined(ANALOG5_BIT))
#define DIO119 119
#define ANALOG5 119
#define DIO119_PORT (ANALOG5_PORT)
#define DIO119_BIT (ANALOG5_BIT)
#define ANALOG5_OUTREG (__outreg__(ANALOG5_PORT))
#define ANALOG5_INREG (__inreg__(ANALOG5_PORT))
#define ANALOG5_DIRREG (__dirreg__(ANALOG5_PORT))
#define DIO119_OUTREG (__outreg__(ANALOG5_PORT))
#define DIO119_INREG (__inreg__(ANALOG5_PORT))
#define DIO119_DIRREG (__dirreg__(ANALOG5_PORT))
#endif
#if (defined(ANALOG6_PORT) && defined(ANALOG6_BIT))
#define DIO120 120
#define ANALOG6 120
#define DIO120_PORT (ANALOG6_PORT)
#define DIO120_BIT (ANALOG6_BIT)
#define ANALOG6_OUTREG (__outreg__(ANALOG6_PORT))
#define ANALOG6_INREG (__inreg__(ANALOG6_PORT))
#define ANALOG6_DIRREG (__dirreg__(ANALOG6_PORT))
#define DIO120_OUTREG (__outreg__(ANALOG6_PORT))
#define DIO120_INREG (__inreg__(ANALOG6_PORT))
#define DIO120_DIRREG (__dirreg__(ANALOG6_PORT))
#endif
#if (defined(ANALOG7_PORT) && defined(ANALOG7_BIT))
#define DIO121 121
#define ANALOG7 121
#define DIO121_PORT (ANALOG7_PORT)
#define DIO121_BIT (ANALOG7_BIT)
#define ANALOG7_OUTREG (__outreg__(ANALOG7_PORT))
#define ANALOG7_INREG (__inreg__(ANALOG7_PORT))
#define ANALOG7_DIRREG (__dirreg__(ANALOG7_PORT))
#define DIO121_OUTREG (__outreg__(ANALOG7_PORT))
#define DIO121_INREG (__inreg__(ANALOG7_PORT))
#define DIO121_DIRREG (__dirreg__(ANALOG7_PORT))
#endif
#if (defined(ANALOG8_PORT) && defined(ANALOG8_BIT))
#define DIO122 122
#define ANALOG8 122
#define DIO122_PORT (ANALOG8_PORT)
#define DIO122_BIT (ANALOG8_BIT)
#define ANALOG8_OUTREG (__outreg__(ANALOG8_PORT))
#define ANALOG8_INREG (__inreg__(ANALOG8_PORT))
#define ANALOG8_DIRREG (__dirreg__(ANALOG8_PORT))
#define DIO122_OUTREG (__outreg__(ANALOG8_PORT))
#define DIO122_INREG (__inreg__(ANALOG8_PORT))
#define DIO122_DIRREG (__dirreg__(ANALOG8_PORT))
#endif
#if (defined(ANALOG9_PORT) && defined(ANALOG9_BIT))
#define DIO123 123
#define ANALOG9 123
#define DIO123_PORT (ANALOG9_PORT)
#define DIO123_BIT (ANALOG9_BIT)
#define ANALOG9_OUTREG (__outreg__(ANALOG9_PORT))
#define ANALOG9_INREG (__inreg__(ANALOG9_PORT))
#define ANALOG9_DIRREG (__dirreg__(ANALOG9_PORT))
#define DIO123_OUTREG (__outreg__(ANALOG9_PORT))
#define DIO123_INREG (__inreg__(ANALOG9_PORT))
#define DIO123_DIRREG (__dirreg__(ANALOG9_PORT))
#endif
#if (defined(ANALOG10_PORT) && defined(ANALOG10_BIT))
#define DIO124 124
#define ANALOG10 124
#define DIO124_PORT (ANALOG10_PORT)
#define DIO124_BIT (ANALOG10_BIT)
#define ANALOG10_OUTREG (__outreg__(ANALOG10_PORT))
#define ANALOG10_INREG (__inreg__(ANALOG10_PORT))
#define ANALOG10_DIRREG (__dirreg__(ANALOG10_PORT))
#define DIO124_OUTREG (__outreg__(ANALOG10_PORT))
#define DIO124_INREG (__inreg__(ANALOG10_PORT))
#define DIO124_DIRREG (__dirreg__(ANALOG10_PORT))
#endif
#if (defined(ANALOG11_PORT) && defined(ANALOG11_BIT))
#define DIO125 125
#define ANALOG11 125
#define DIO125_PORT (ANALOG11_PORT)
#define DIO125_BIT (ANALOG11_BIT)
#define ANALOG11_OUTREG (__outreg__(ANALOG11_PORT))
#define ANALOG11_INREG (__inreg__(ANALOG11_PORT))
#define ANALOG11_DIRREG (__dirreg__(ANALOG11_PORT))
#define DIO125_OUTREG (__outreg__(ANALOG11_PORT))
#define DIO125_INREG (__inreg__(ANALOG11_PORT))
#define DIO125_DIRREG (__dirreg__(ANALOG11_PORT))
#endif
#if (defined(ANALOG12_PORT) && defined(ANALOG12_BIT))
#define DIO126 126
#define ANALOG12 126
#define DIO126_PORT (ANALOG12_PORT)
#define DIO126_BIT (ANALOG12_BIT)
#define ANALOG12_OUTREG (__outreg__(ANALOG12_PORT))
#define ANALOG12_INREG (__inreg__(ANALOG12_PORT))
#define ANALOG12_DIRREG (__dirreg__(ANALOG12_PORT))
#define DIO126_OUTREG (__outreg__(ANALOG12_PORT))
#define DIO126_INREG (__inreg__(ANALOG12_PORT))
#define DIO126_DIRREG (__dirreg__(ANALOG12_PORT))
#endif
#if (defined(ANALOG13_PORT) && defined(ANALOG13_BIT))
#define DIO127 127
#define ANALOG13 127
#define DIO127_PORT (ANALOG13_PORT)
#define DIO127_BIT (ANALOG13_BIT)
#define ANALOG13_OUTREG (__outreg__(ANALOG13_PORT))
#define ANALOG13_INREG (__inreg__(ANALOG13_PORT))
#define ANALOG13_DIRREG (__dirreg__(ANALOG13_PORT))
#define DIO127_OUTREG (__outreg__(ANALOG13_PORT))
#define DIO127_INREG (__inreg__(ANALOG13_PORT))
#define DIO127_DIRREG (__dirreg__(ANALOG13_PORT))
#endif
#if (defined(ANALOG14_PORT) && defined(ANALOG14_BIT))
#define DIO128 128
#define ANALOG14 128
#define DIO128_PORT (ANALOG14_PORT)
#define DIO128_BIT (ANALOG14_BIT)
#define ANALOG14_OUTREG (__outreg__(ANALOG14_PORT))
#define ANALOG14_INREG (__inreg__(ANALOG14_PORT))
#define ANALOG14_DIRREG (__dirreg__(ANALOG14_PORT))
#define DIO128_OUTREG (__outreg__(ANALOG14_PORT))
#define DIO128_INREG (__inreg__(ANALOG14_PORT))
#define DIO128_DIRREG (__dirreg__(ANALOG14_PORT))
#endif
#if (defined(ANALOG15_PORT) && defined(ANALOG15_BIT))
#define DIO129 129
#define ANALOG15 129
#define DIO129_PORT (ANALOG15_PORT)
#define DIO129_BIT (ANALOG15_BIT)
#define ANALOG15_OUTREG (__outreg__(ANALOG15_PORT))
#define ANALOG15_INREG (__inreg__(ANALOG15_PORT))
#define ANALOG15_DIRREG (__dirreg__(ANALOG15_PORT))
#define DIO129_OUTREG (__outreg__(ANALOG15_PORT))
#define DIO129_INREG (__inreg__(ANALOG15_PORT))
#define DIO129_DIRREG (__dirreg__(ANALOG15_PORT))
#endif
#if (defined(DIN0_PORT) && defined(DIN0_BIT))
#define DIO130 130
#define DIN0 130
#define DIO130_PORT (DIN0_PORT)
#define DIO130_BIT (DIN0_BIT)
#define DIN0_OUTREG (__outreg__(DIN0_PORT))
#define DIN0_INREG (__inreg__(DIN0_PORT))
#define DIN0_DIRREG (__dirreg__(DIN0_PORT))
#define DIO130_OUTREG (__outreg__(DIN0_PORT))
#define DIO130_INREG (__inreg__(DIN0_PORT))
#define DIO130_DIRREG (__dirreg__(DIN0_PORT))
#endif
#if (defined(DIN1_PORT) && defined(DIN1_BIT))
#define DIO131 131
#define DIN1 131
#define DIO131_PORT (DIN1_PORT)
#define DIO131_BIT (DIN1_BIT)
#define DIN1_OUTREG (__outreg__(DIN1_PORT))
#define DIN1_INREG (__inreg__(DIN1_PORT))
#define DIN1_DIRREG (__dirreg__(DIN1_PORT))
#define DIO131_OUTREG (__outreg__(DIN1_PORT))
#define DIO131_INREG (__inreg__(DIN1_PORT))
#define DIO131_DIRREG (__dirreg__(DIN1_PORT))
#endif
#if (defined(DIN2_PORT) && defined(DIN2_BIT))
#define DIO132 132
#define DIN2 132
#define DIO132_PORT (DIN2_PORT)
#define DIO132_BIT (DIN2_BIT)
#define DIN2_OUTREG (__outreg__(DIN2_PORT))
#define DIN2_INREG (__inreg__(DIN2_PORT))
#define DIN2_DIRREG (__dirreg__(DIN2_PORT))
#define DIO132_OUTREG (__outreg__(DIN2_PORT))
#define DIO132_INREG (__inreg__(DIN2_PORT))
#define DIO132_DIRREG (__dirreg__(DIN2_PORT))
#endif
#if (defined(DIN3_PORT) && defined(DIN3_BIT))
#define DIO133 133
#define DIN3 133
#define DIO133_PORT (DIN3_PORT)
#define DIO133_BIT (DIN3_BIT)
#define DIN3_OUTREG (__outreg__(DIN3_PORT))
#define DIN3_INREG (__inreg__(DIN3_PORT))
#define DIN3_DIRREG (__dirreg__(DIN3_PORT))
#define DIO133_OUTREG (__outreg__(DIN3_PORT))
#define DIO133_INREG (__inreg__(DIN3_PORT))
#define DIO133_DIRREG (__dirreg__(DIN3_PORT))
#endif
#if (defined(DIN4_PORT) && defined(DIN4_BIT))
#define DIO134 134
#define DIN4 134
#define DIO134_PORT (DIN4_PORT)
#define DIO134_BIT (DIN4_BIT)
#define DIN4_OUTREG (__outreg__(DIN4_PORT))
#define DIN4_INREG (__inreg__(DIN4_PORT))
#define DIN4_DIRREG (__dirreg__(DIN4_PORT))
#define DIO134_OUTREG (__outreg__(DIN4_PORT))
#define DIO134_INREG (__inreg__(DIN4_PORT))
#define DIO134_DIRREG (__dirreg__(DIN4_PORT))
#endif
#if (defined(DIN5_PORT) && defined(DIN5_BIT))
#define DIO135 135
#define DIN5 135
#define DIO135_PORT (DIN5_PORT)
#define DIO135_BIT (DIN5_BIT)
#define DIN5_OUTREG (__outreg__(DIN5_PORT))
#define DIN5_INREG (__inreg__(DIN5_PORT))
#define DIN5_DIRREG (__dirreg__(DIN5_PORT))
#define DIO135_OUTREG (__outreg__(DIN5_PORT))
#define DIO135_INREG (__inreg__(DIN5_PORT))
#define DIO135_DIRREG (__dirreg__(DIN5_PORT))
#endif
#if (defined(DIN6_PORT) && defined(DIN6_BIT))
#define DIO136 136
#define DIN6 136
#define DIO136_PORT (DIN6_PORT)
#define DIO136_BIT (DIN6_BIT)
#define DIN6_OUTREG (__outreg__(DIN6_PORT))
#define DIN6_INREG (__inreg__(DIN6_PORT))
#define DIN6_DIRREG (__dirreg__(DIN6_PORT))
#define DIO136_OUTREG (__outreg__(DIN6_PORT))
#define DIO136_INREG (__inreg__(DIN6_PORT))
#define DIO136_DIRREG (__dirreg__(DIN6_PORT))
#endif
#if (defined(DIN7_PORT) && defined(DIN7_BIT))
#define DIO137 137
#define DIN7 137
#define DIO137_PORT (DIN7_PORT)
#define DIO137_BIT (DIN7_BIT)
#define DIN7_OUTREG (__outreg__(DIN7_PORT))
#define DIN7_INREG (__inreg__(DIN7_PORT))
#define DIN7_DIRREG (__dirreg__(DIN7_PORT))
#define DIO137_OUTREG (__outreg__(DIN7_PORT))
#define DIO137_INREG (__inreg__(DIN7_PORT))
#define DIO137_DIRREG (__dirreg__(DIN7_PORT))
#endif
#if (defined(DIN8_PORT) && defined(DIN8_BIT))
#define DIO138 138
#define DIN8 138
#define DIO138_PORT (DIN8_PORT)
#define DIO138_BIT (DIN8_BIT)
#define DIN8_OUTREG (__outreg__(DIN8_PORT))
#define DIN8_INREG (__inreg__(DIN8_PORT))
#define DIN8_DIRREG (__dirreg__(DIN8_PORT))
#define DIO138_OUTREG (__outreg__(DIN8_PORT))
#define DIO138_INREG (__inreg__(DIN8_PORT))
#define DIO138_DIRREG (__dirreg__(DIN8_PORT))
#endif
#if (defined(DIN9_PORT) && defined(DIN9_BIT))
#define DIO139 139
#define DIN9 139
#define DIO139_PORT (DIN9_PORT)
#define DIO139_BIT (DIN9_BIT)
#define DIN9_OUTREG (__outreg__(DIN9_PORT))
#define DIN9_INREG (__inreg__(DIN9_PORT))
#define DIN9_DIRREG (__dirreg__(DIN9_PORT))
#define DIO139_OUTREG (__outreg__(DIN9_PORT))
#define DIO139_INREG (__inreg__(DIN9_PORT))
#define DIO139_DIRREG (__dirreg__(DIN9_PORT))
#endif
#if (defined(DIN10_PORT) && defined(DIN10_BIT))
#define DIO140 140
#define DIN10 140
#define DIO140_PORT (DIN10_PORT)
#define DIO140_BIT (DIN10_BIT)
#define DIN10_OUTREG (__outreg__(DIN10_PORT))
#define DIN10_INREG (__inreg__(DIN10_PORT))
#define DIN10_DIRREG (__dirreg__(DIN10_PORT))
#define DIO140_OUTREG (__outreg__(DIN10_PORT))
#define DIO140_INREG (__inreg__(DIN10_PORT))
#define DIO140_DIRREG (__dirreg__(DIN10_PORT))
#endif
#if (defined(DIN11_PORT) && defined(DIN11_BIT))
#define DIO141 141
#define DIN11 141
#define DIO141_PORT (DIN11_PORT)
#define DIO141_BIT (DIN11_BIT)
#define DIN11_OUTREG (__outreg__(DIN11_PORT))
#define DIN11_INREG (__inreg__(DIN11_PORT))
#define DIN11_DIRREG (__dirreg__(DIN11_PORT))
#define DIO141_OUTREG (__outreg__(DIN11_PORT))
#define DIO141_INREG (__inreg__(DIN11_PORT))
#define DIO141_DIRREG (__dirreg__(DIN11_PORT))
#endif
#if (defined(DIN12_PORT) && defined(DIN12_BIT))
#define DIO142 142
#define DIN12 142
#define DIO142_PORT (DIN12_PORT)
#define DIO142_BIT (DIN12_BIT)
#define DIN12_OUTREG (__outreg__(DIN12_PORT))
#define DIN12_INREG (__inreg__(DIN12_PORT))
#define DIN12_DIRREG (__dirreg__(DIN12_PORT))
#define DIO142_OUTREG (__outreg__(DIN12_PORT))
#define DIO142_INREG (__inreg__(DIN12_PORT))
#define DIO142_DIRREG (__dirreg__(DIN12_PORT))
#endif
#if (defined(DIN13_PORT) && defined(DIN13_BIT))
#define DIO143 143
#define DIN13 143
#define DIO143_PORT (DIN13_PORT)
#define DIO143_BIT (DIN13_BIT)
#define DIN13_OUTREG (__outreg__(DIN13_PORT))
#define DIN13_INREG (__inreg__(DIN13_PORT))
#define DIN13_DIRREG (__dirreg__(DIN13_PORT))
#define DIO143_OUTREG (__outreg__(DIN13_PORT))
#define DIO143_INREG (__inreg__(DIN13_PORT))
#define DIO143_DIRREG (__dirreg__(DIN13_PORT))
#endif
#if (defined(DIN14_PORT) && defined(DIN14_BIT))
#define DIO144 144
#define DIN14 144
#define DIO144_PORT (DIN14_PORT)
#define DIO144_BIT (DIN14_BIT)
#define DIN14_OUTREG (__outreg__(DIN14_PORT))
#define DIN14_INREG (__inreg__(DIN14_PORT))
#define DIN14_DIRREG (__dirreg__(DIN14_PORT))
#define DIO144_OUTREG (__outreg__(DIN14_PORT))
#define DIO144_INREG (__inreg__(DIN14_PORT))
#define DIO144_DIRREG (__dirreg__(DIN14_PORT))
#endif
#if (defined(DIN15_PORT) && defined(DIN15_BIT))
#define DIO145 145
#define DIN15 145
#define DIO145_PORT (DIN15_PORT)
#define DIO145_BIT (DIN15_BIT)
#define DIN15_OUTREG (__outreg__(DIN15_PORT))
#define DIN15_INREG (__inreg__(DIN15_PORT))
#define DIN15_DIRREG (__dirreg__(DIN15_PORT))
#define DIO145_OUTREG (__outreg__(DIN15_PORT))
#define DIO145_INREG (__inreg__(DIN15_PORT))
#define DIO145_DIRREG (__dirreg__(DIN15_PORT))
#endif
#if (defined(DIN16_PORT) && defined(DIN16_BIT))
#define DIO146 146
#define DIN16 146
#define DIO146_PORT (DIN16_PORT)
#define DIO146_BIT (DIN16_BIT)
#define DIN16_OUTREG (__outreg__(DIN16_PORT))
#define DIN16_INREG (__inreg__(DIN16_PORT))
#define DIN16_DIRREG (__dirreg__(DIN16_PORT))
#define DIO146_OUTREG (__outreg__(DIN16_PORT))
#define DIO146_INREG (__inreg__(DIN16_PORT))
#define DIO146_DIRREG (__dirreg__(DIN16_PORT))
#endif
#if (defined(DIN17_PORT) && defined(DIN17_BIT))
#define DIO147 147
#define DIN17 147
#define DIO147_PORT (DIN17_PORT)
#define DIO147_BIT (DIN17_BIT)
#define DIN17_OUTREG (__outreg__(DIN17_PORT))
#define DIN17_INREG (__inreg__(DIN17_PORT))
#define DIN17_DIRREG (__dirreg__(DIN17_PORT))
#define DIO147_OUTREG (__outreg__(DIN17_PORT))
#define DIO147_INREG (__inreg__(DIN17_PORT))
#define DIO147_DIRREG (__dirreg__(DIN17_PORT))
#endif
#if (defined(DIN18_PORT) && defined(DIN18_BIT))
#define DIO148 148
#define DIN18 148
#define DIO148_PORT (DIN18_PORT)
#define DIO148_BIT (DIN18_BIT)
#define DIN18_OUTREG (__outreg__(DIN18_PORT))
#define DIN18_INREG (__inreg__(DIN18_PORT))
#define DIN18_DIRREG (__dirreg__(DIN18_PORT))
#define DIO148_OUTREG (__outreg__(DIN18_PORT))
#define DIO148_INREG (__inreg__(DIN18_PORT))
#define DIO148_DIRREG (__dirreg__(DIN18_PORT))
#endif
#if (defined(DIN19_PORT) && defined(DIN19_BIT))
#define DIO149 149
#define DIN19 149
#define DIO149_PORT (DIN19_PORT)
#define DIO149_BIT (DIN19_BIT)
#define DIN19_OUTREG (__outreg__(DIN19_PORT))
#define DIN19_INREG (__inreg__(DIN19_PORT))
#define DIN19_DIRREG (__dirreg__(DIN19_PORT))
#define DIO149_OUTREG (__outreg__(DIN19_PORT))
#define DIO149_INREG (__inreg__(DIN19_PORT))
#define DIO149_DIRREG (__dirreg__(DIN19_PORT))
#endif
#if (defined(DIN20_PORT) && defined(DIN20_BIT))
#define DIO150 150
#define DIN20 150
#define DIO150_PORT (DIN20_PORT)
#define DIO150_BIT (DIN20_BIT)
#define DIN20_OUTREG (__outreg__(DIN20_PORT))
#define DIN20_INREG (__inreg__(DIN20_PORT))
#define DIN20_DIRREG (__dirreg__(DIN20_PORT))
#define DIO150_OUTREG (__outreg__(DIN20_PORT))
#define DIO150_INREG (__inreg__(DIN20_PORT))
#define DIO150_DIRREG (__dirreg__(DIN20_PORT))
#endif
#if (defined(DIN21_PORT) && defined(DIN21_BIT))
#define DIO151 151
#define DIN21 151
#define DIO151_PORT (DIN21_PORT)
#define DIO151_BIT (DIN21_BIT)
#define DIN21_OUTREG (__outreg__(DIN21_PORT))
#define DIN21_INREG (__inreg__(DIN21_PORT))
#define DIN21_DIRREG (__dirreg__(DIN21_PORT))
#define DIO151_OUTREG (__outreg__(DIN21_PORT))
#define DIO151_INREG (__inreg__(DIN21_PORT))
#define DIO151_DIRREG (__dirreg__(DIN21_PORT))
#endif
#if (defined(DIN22_PORT) && defined(DIN22_BIT))
#define DIO152 152
#define DIN22 152
#define DIO152_PORT (DIN22_PORT)
#define DIO152_BIT (DIN22_BIT)
#define DIN22_OUTREG (__outreg__(DIN22_PORT))
#define DIN22_INREG (__inreg__(DIN22_PORT))
#define DIN22_DIRREG (__dirreg__(DIN22_PORT))
#define DIO152_OUTREG (__outreg__(DIN22_PORT))
#define DIO152_INREG (__inreg__(DIN22_PORT))
#define DIO152_DIRREG (__dirreg__(DIN22_PORT))
#endif
#if (defined(DIN23_PORT) && defined(DIN23_BIT))
#define DIO153 153
#define DIN23 153
#define DIO153_PORT (DIN23_PORT)
#define DIO153_BIT (DIN23_BIT)
#define DIN23_OUTREG (__outreg__(DIN23_PORT))
#define DIN23_INREG (__inreg__(DIN23_PORT))
#define DIN23_DIRREG (__dirreg__(DIN23_PORT))
#define DIO153_OUTREG (__outreg__(DIN23_PORT))
#define DIO153_INREG (__inreg__(DIN23_PORT))
#define DIO153_DIRREG (__dirreg__(DIN23_PORT))
#endif
#if (defined(DIN24_PORT) && defined(DIN24_BIT))
#define DIO154 154
#define DIN24 154
#define DIO154_PORT (DIN24_PORT)
#define DIO154_BIT (DIN24_BIT)
#define DIN24_OUTREG (__outreg__(DIN24_PORT))
#define DIN24_INREG (__inreg__(DIN24_PORT))
#define DIN24_DIRREG (__dirreg__(DIN24_PORT))
#define DIO154_OUTREG (__outreg__(DIN24_PORT))
#define DIO154_INREG (__inreg__(DIN24_PORT))
#define DIO154_DIRREG (__dirreg__(DIN24_PORT))
#endif
#if (defined(DIN25_PORT) && defined(DIN25_BIT))
#define DIO155 155
#define DIN25 155
#define DIO155_PORT (DIN25_PORT)
#define DIO155_BIT (DIN25_BIT)
#define DIN25_OUTREG (__outreg__(DIN25_PORT))
#define DIN25_INREG (__inreg__(DIN25_PORT))
#define DIN25_DIRREG (__dirreg__(DIN25_PORT))
#define DIO155_OUTREG (__outreg__(DIN25_PORT))
#define DIO155_INREG (__inreg__(DIN25_PORT))
#define DIO155_DIRREG (__dirreg__(DIN25_PORT))
#endif
#if (defined(DIN26_PORT) && defined(DIN26_BIT))
#define DIO156 156
#define DIN26 156
#define DIO156_PORT (DIN26_PORT)
#define DIO156_BIT (DIN26_BIT)
#define DIN26_OUTREG (__outreg__(DIN26_PORT))
#define DIN26_INREG (__inreg__(DIN26_PORT))
#define DIN26_DIRREG (__dirreg__(DIN26_PORT))
#define DIO156_OUTREG (__outreg__(DIN26_PORT))
#define DIO156_INREG (__inreg__(DIN26_PORT))
#define DIO156_DIRREG (__dirreg__(DIN26_PORT))
#endif
#if (defined(DIN27_PORT) && defined(DIN27_BIT))
#define DIO157 157
#define DIN27 157
#define DIO157_PORT (DIN27_PORT)
#define DIO157_BIT (DIN27_BIT)
#define DIN27_OUTREG (__outreg__(DIN27_PORT))
#define DIN27_INREG (__inreg__(DIN27_PORT))
#define DIN27_DIRREG (__dirreg__(DIN27_PORT))
#define DIO157_OUTREG (__outreg__(DIN27_PORT))
#define DIO157_INREG (__inreg__(DIN27_PORT))
#define DIO157_DIRREG (__dirreg__(DIN27_PORT))
#endif
#if (defined(DIN28_PORT) && defined(DIN28_BIT))
#define DIO158 158
#define DIN28 158
#define DIO158_PORT (DIN28_PORT)
#define DIO158_BIT (DIN28_BIT)
#define DIN28_OUTREG (__outreg__(DIN28_PORT))
#define DIN28_INREG (__inreg__(DIN28_PORT))
#define DIN28_DIRREG (__dirreg__(DIN28_PORT))
#define DIO158_OUTREG (__outreg__(DIN28_PORT))
#define DIO158_INREG (__inreg__(DIN28_PORT))
#define DIO158_DIRREG (__dirreg__(DIN28_PORT))
#endif
#if (defined(DIN29_PORT) && defined(DIN29_BIT))
#define DIO159 159
#define DIN29 159
#define DIO159_PORT (DIN29_PORT)
#define DIO159_BIT (DIN29_BIT)
#define DIN29_OUTREG (__outreg__(DIN29_PORT))
#define DIN29_INREG (__inreg__(DIN29_PORT))
#define DIN29_DIRREG (__dirreg__(DIN29_PORT))
#define DIO159_OUTREG (__outreg__(DIN29_PORT))
#define DIO159_INREG (__inreg__(DIN29_PORT))
#define DIO159_DIRREG (__dirreg__(DIN29_PORT))
#endif
#if (defined(DIN30_PORT) && defined(DIN30_BIT))
#define DIO160 160
#define DIN30 160
#define DIO160_PORT (DIN30_PORT)
#define DIO160_BIT (DIN30_BIT)
#define DIN30_OUTREG (__outreg__(DIN30_PORT))
#define DIN30_INREG (__inreg__(DIN30_PORT))
#define DIN30_DIRREG (__dirreg__(DIN30_PORT))
#define DIO160_OUTREG (__outreg__(DIN30_PORT))
#define DIO160_INREG (__inreg__(DIN30_PORT))
#define DIO160_DIRREG (__dirreg__(DIN30_PORT))
#endif
#if (defined(DIN31_PORT) && defined(DIN31_BIT))
#define DIO161 161
#define DIN31 161
#define DIO161_PORT (DIN31_PORT)
#define DIO161_BIT (DIN31_BIT)
#define DIN31_OUTREG (__outreg__(DIN31_PORT))
#define DIN31_INREG (__inreg__(DIN31_PORT))
#define DIN31_DIRREG (__dirreg__(DIN31_PORT))
#define DIO161_OUTREG (__outreg__(DIN31_PORT))
#define DIO161_INREG (__inreg__(DIN31_PORT))
#define DIO161_DIRREG (__dirreg__(DIN31_PORT))
#endif
#if (defined(DIN32_PORT) && defined(DIN32_BIT))
#define DIO162 162
#define DIN32 162
#define DIO162_PORT (DIN32_PORT)
#define DIO162_BIT (DIN32_BIT)
#define DIN32_OUTREG (__outreg__(DIN32_PORT))
#define DIN32_INREG (__inreg__(DIN32_PORT))
#define DIN32_DIRREG (__dirreg__(DIN32_PORT))
#define DIO162_OUTREG (__outreg__(DIN32_PORT))
#define DIO162_INREG (__inreg__(DIN32_PORT))
#define DIO162_DIRREG (__dirreg__(DIN32_PORT))
#endif
#if (defined(DIN33_PORT) && defined(DIN33_BIT))
#define DIO163 163
#define DIN33 163
#define DIO163_PORT (DIN33_PORT)
#define DIO163_BIT (DIN33_BIT)
#define DIN33_OUTREG (__outreg__(DIN33_PORT))
#define DIN33_INREG (__inreg__(DIN33_PORT))
#define DIN33_DIRREG (__dirreg__(DIN33_PORT))
#define DIO163_OUTREG (__outreg__(DIN33_PORT))
#define DIO163_INREG (__inreg__(DIN33_PORT))
#define DIO163_DIRREG (__dirreg__(DIN33_PORT))
#endif
#if (defined(DIN34_PORT) && defined(DIN34_BIT))
#define DIO164 164
#define DIN34 164
#define DIO164_PORT (DIN34_PORT)
#define DIO164_BIT (DIN34_BIT)
#define DIN34_OUTREG (__outreg__(DIN34_PORT))
#define DIN34_INREG (__inreg__(DIN34_PORT))
#define DIN34_DIRREG (__dirreg__(DIN34_PORT))
#define DIO164_OUTREG (__outreg__(DIN34_PORT))
#define DIO164_INREG (__inreg__(DIN34_PORT))
#define DIO164_DIRREG (__dirreg__(DIN34_PORT))
#endif
#if (defined(DIN35_PORT) && defined(DIN35_BIT))
#define DIO165 165
#define DIN35 165
#define DIO165_PORT (DIN35_PORT)
#define DIO165_BIT (DIN35_BIT)
#define DIN35_OUTREG (__outreg__(DIN35_PORT))
#define DIN35_INREG (__inreg__(DIN35_PORT))
#define DIN35_DIRREG (__dirreg__(DIN35_PORT))
#define DIO165_OUTREG (__outreg__(DIN35_PORT))
#define DIO165_INREG (__inreg__(DIN35_PORT))
#define DIO165_DIRREG (__dirreg__(DIN35_PORT))
#endif
#if (defined(DIN36_PORT) && defined(DIN36_BIT))
#define DIO166 166
#define DIN36 166
#define DIO166_PORT (DIN36_PORT)
#define DIO166_BIT (DIN36_BIT)
#define DIN36_OUTREG (__outreg__(DIN36_PORT))
#define DIN36_INREG (__inreg__(DIN36_PORT))
#define DIN36_DIRREG (__dirreg__(DIN36_PORT))
#define DIO166_OUTREG (__outreg__(DIN36_PORT))
#define DIO166_INREG (__inreg__(DIN36_PORT))
#define DIO166_DIRREG (__dirreg__(DIN36_PORT))
#endif
#if (defined(DIN37_PORT) && defined(DIN37_BIT))
#define DIO167 167
#define DIN37 167
#define DIO167_PORT (DIN37_PORT)
#define DIO167_BIT (DIN37_BIT)
#define DIN37_OUTREG (__outreg__(DIN37_PORT))
#define DIN37_INREG (__inreg__(DIN37_PORT))
#define DIN37_DIRREG (__dirreg__(DIN37_PORT))
#define DIO167_OUTREG (__outreg__(DIN37_PORT))
#define DIO167_INREG (__inreg__(DIN37_PORT))
#define DIO167_DIRREG (__dirreg__(DIN37_PORT))
#endif
#if (defined(DIN38_PORT) && defined(DIN38_BIT))
#define DIO168 168
#define DIN38 168
#define DIO168_PORT (DIN38_PORT)
#define DIO168_BIT (DIN38_BIT)
#define DIN38_OUTREG (__outreg__(DIN38_PORT))
#define DIN38_INREG (__inreg__(DIN38_PORT))
#define DIN38_DIRREG (__dirreg__(DIN38_PORT))
#define DIO168_OUTREG (__outreg__(DIN38_PORT))
#define DIO168_INREG (__inreg__(DIN38_PORT))
#define DIO168_DIRREG (__dirreg__(DIN38_PORT))
#endif
#if (defined(DIN39_PORT) && defined(DIN39_BIT))
#define DIO169 169
#define DIN39 169
#define DIO169_PORT (DIN39_PORT)
#define DIO169_BIT (DIN39_BIT)
#define DIN39_OUTREG (__outreg__(DIN39_PORT))
#define DIN39_INREG (__inreg__(DIN39_PORT))
#define DIN39_DIRREG (__dirreg__(DIN39_PORT))
#define DIO169_OUTREG (__outreg__(DIN39_PORT))
#define DIO169_INREG (__inreg__(DIN39_PORT))
#define DIO169_DIRREG (__dirreg__(DIN39_PORT))
#endif
#if (defined(DIN40_PORT) && defined(DIN40_BIT))
#define DIO170 170
#define DIN40 170
#define DIO170_PORT (DIN40_PORT)
#define DIO170_BIT (DIN40_BIT)
#define DIN40_OUTREG (__outreg__(DIN40_PORT))
#define DIN40_INREG (__inreg__(DIN40_PORT))
#define DIN40_DIRREG (__dirreg__(DIN40_PORT))
#define DIO170_OUTREG (__outreg__(DIN40_PORT))
#define DIO170_INREG (__inreg__(DIN40_PORT))
#define DIO170_DIRREG (__dirreg__(DIN40_PORT))
#endif
#if (defined(DIN41_PORT) && defined(DIN41_BIT))
#define DIO171 171
#define DIN41 171
#define DIO171_PORT (DIN41_PORT)
#define DIO171_BIT (DIN41_BIT)
#define DIN41_OUTREG (__outreg__(DIN41_PORT))
#define DIN41_INREG (__inreg__(DIN41_PORT))
#define DIN41_DIRREG (__dirreg__(DIN41_PORT))
#define DIO171_OUTREG (__outreg__(DIN41_PORT))
#define DIO171_INREG (__inreg__(DIN41_PORT))
#define DIO171_DIRREG (__dirreg__(DIN41_PORT))
#endif
#if (defined(DIN42_PORT) && defined(DIN42_BIT))
#define DIO172 172
#define DIN42 172
#define DIO172_PORT (DIN42_PORT)
#define DIO172_BIT (DIN42_BIT)
#define DIN42_OUTREG (__outreg__(DIN42_PORT))
#define DIN42_INREG (__inreg__(DIN42_PORT))
#define DIN42_DIRREG (__dirreg__(DIN42_PORT))
#define DIO172_OUTREG (__outreg__(DIN42_PORT))
#define DIO172_INREG (__inreg__(DIN42_PORT))
#define DIO172_DIRREG (__dirreg__(DIN42_PORT))
#endif
#if (defined(DIN43_PORT) && defined(DIN43_BIT))
#define DIO173 173
#define DIN43 173
#define DIO173_PORT (DIN43_PORT)
#define DIO173_BIT (DIN43_BIT)
#define DIN43_OUTREG (__outreg__(DIN43_PORT))
#define DIN43_INREG (__inreg__(DIN43_PORT))
#define DIN43_DIRREG (__dirreg__(DIN43_PORT))
#define DIO173_OUTREG (__outreg__(DIN43_PORT))
#define DIO173_INREG (__inreg__(DIN43_PORT))
#define DIO173_DIRREG (__dirreg__(DIN43_PORT))
#endif
#if (defined(DIN44_PORT) && defined(DIN44_BIT))
#define DIO174 174
#define DIN44 174
#define DIO174_PORT (DIN44_PORT)
#define DIO174_BIT (DIN44_BIT)
#define DIN44_OUTREG (__outreg__(DIN44_PORT))
#define DIN44_INREG (__inreg__(DIN44_PORT))
#define DIN44_DIRREG (__dirreg__(DIN44_PORT))
#define DIO174_OUTREG (__outreg__(DIN44_PORT))
#define DIO174_INREG (__inreg__(DIN44_PORT))
#define DIO174_DIRREG (__dirreg__(DIN44_PORT))
#endif
#if (defined(DIN45_PORT) && defined(DIN45_BIT))
#define DIO175 175
#define DIN45 175
#define DIO175_PORT (DIN45_PORT)
#define DIO175_BIT (DIN45_BIT)
#define DIN45_OUTREG (__outreg__(DIN45_PORT))
#define DIN45_INREG (__inreg__(DIN45_PORT))
#define DIN45_DIRREG (__dirreg__(DIN45_PORT))
#define DIO175_OUTREG (__outreg__(DIN45_PORT))
#define DIO175_INREG (__inreg__(DIN45_PORT))
#define DIO175_DIRREG (__dirreg__(DIN45_PORT))
#endif
#if (defined(DIN46_PORT) && defined(DIN46_BIT))
#define DIO176 176
#define DIN46 176
#define DIO176_PORT (DIN46_PORT)
#define DIO176_BIT (DIN46_BIT)
#define DIN46_OUTREG (__outreg__(DIN46_PORT))
#define DIN46_INREG (__inreg__(DIN46_PORT))
#define DIN46_DIRREG (__dirreg__(DIN46_PORT))
#define DIO176_OUTREG (__outreg__(DIN46_PORT))
#define DIO176_INREG (__inreg__(DIN46_PORT))
#define DIO176_DIRREG (__dirreg__(DIN46_PORT))
#endif
#if (defined(DIN47_PORT) && defined(DIN47_BIT))
#define DIO177 177
#define DIN47 177
#define DIO177_PORT (DIN47_PORT)
#define DIO177_BIT (DIN47_BIT)
#define DIN47_OUTREG (__outreg__(DIN47_PORT))
#define DIN47_INREG (__inreg__(DIN47_PORT))
#define DIN47_DIRREG (__dirreg__(DIN47_PORT))
#define DIO177_OUTREG (__outreg__(DIN47_PORT))
#define DIO177_INREG (__inreg__(DIN47_PORT))
#define DIO177_DIRREG (__dirreg__(DIN47_PORT))
#endif
#if (defined(DIN48_PORT) && defined(DIN48_BIT))
#define DIO178 178
#define DIN48 178
#define DIO178_PORT (DIN48_PORT)
#define DIO178_BIT (DIN48_BIT)
#define DIN48_OUTREG (__outreg__(DIN48_PORT))
#define DIN48_INREG (__inreg__(DIN48_PORT))
#define DIN48_DIRREG (__dirreg__(DIN48_PORT))
#define DIO178_OUTREG (__outreg__(DIN48_PORT))
#define DIO178_INREG (__inreg__(DIN48_PORT))
#define DIO178_DIRREG (__dirreg__(DIN48_PORT))
#endif
#if (defined(DIN49_PORT) && defined(DIN49_BIT))
#define DIO179 179
#define DIN49 179
#define DIO179_PORT (DIN49_PORT)
#define DIO179_BIT (DIN49_BIT)
#define DIN49_OUTREG (__outreg__(DIN49_PORT))
#define DIN49_INREG (__inreg__(DIN49_PORT))
#define DIN49_DIRREG (__dirreg__(DIN49_PORT))
#define DIO179_OUTREG (__outreg__(DIN49_PORT))
#define DIO179_INREG (__inreg__(DIN49_PORT))
#define DIO179_DIRREG (__dirreg__(DIN49_PORT))
#endif
#if (defined(TX_PORT) && defined(TX_BIT))
#define DIO200 200
#define TX 200
#define DIO200_PORT (TX_PORT)
#define DIO200_BIT (TX_BIT)
#define TX_OUTREG (__outreg__(TX_PORT))
#define TX_INREG (__inreg__(TX_PORT))
#define TX_DIRREG (__dirreg__(TX_PORT))
#define DIO200_OUTREG (__outreg__(TX_PORT))
#define DIO200_INREG (__inreg__(TX_PORT))
#define DIO200_DIRREG (__dirreg__(TX_PORT))
#endif
#if (defined(RX_PORT) && defined(RX_BIT))
#define DIO201 201
#define RX 201
#define DIO201_PORT (RX_PORT)
#define DIO201_BIT (RX_BIT)
#define RX_OUTREG (__outreg__(RX_PORT))
#define RX_INREG (__inreg__(RX_PORT))
#define RX_DIRREG (__dirreg__(RX_PORT))
#define DIO201_OUTREG (__outreg__(RX_PORT))
#define DIO201_INREG (__inreg__(RX_PORT))
#define DIO201_DIRREG (__dirreg__(RX_PORT))
#endif
#if (defined(USB_DM_PORT) && defined(USB_DM_BIT))
#define DIO202 202
#define USB_DM 202
#define DIO202_PORT (USB_DM_PORT)
#define DIO202_BIT (USB_DM_BIT)
#define USB_DM_OUTREG (__outreg__(USB_DM_PORT))
#define USB_DM_INREG (__inreg__(USB_DM_PORT))
#define USB_DM_DIRREG (__dirreg__(USB_DM_PORT))
#define DIO202_OUTREG (__outreg__(USB_DM_PORT))
#define DIO202_INREG (__inreg__(USB_DM_PORT))
#define DIO202_DIRREG (__dirreg__(USB_DM_PORT))
#endif
#if (defined(USB_DP_PORT) && defined(USB_DP_BIT))
#define DIO203 203
#define USB_DP 203
#define DIO203_PORT (USB_DP_PORT)
#define DIO203_BIT (USB_DP_BIT)
#define USB_DP_OUTREG (__outreg__(USB_DP_PORT))
#define USB_DP_INREG (__inreg__(USB_DP_PORT))
#define USB_DP_DIRREG (__dirreg__(USB_DP_PORT))
#define DIO203_OUTREG (__outreg__(USB_DP_PORT))
#define DIO203_INREG (__inreg__(USB_DP_PORT))
#define DIO203_DIRREG (__dirreg__(USB_DP_PORT))
#endif
#if (defined(SPI_CLK_PORT) && defined(SPI_CLK_BIT))
#define DIO204 204
#define SPI_CLK 204
#define DIO204_PORT (SPI_CLK_PORT)
#define DIO204_BIT (SPI_CLK_BIT)
#define SPI_CLK_OUTREG (__outreg__(SPI_CLK_PORT))
#define SPI_CLK_INREG (__inreg__(SPI_CLK_PORT))
#define SPI_CLK_DIRREG (__dirreg__(SPI_CLK_PORT))
#define DIO204_OUTREG (__outreg__(SPI_CLK_PORT))
#define DIO204_INREG (__inreg__(SPI_CLK_PORT))
#define DIO204_DIRREG (__dirreg__(SPI_CLK_PORT))
#endif
#if (defined(SPI_SDI_PORT) && defined(SPI_SDI_BIT))
#define DIO205 205
#define SPI_SDI 205
#define DIO205_PORT (SPI_SDI_PORT)
#define DIO205_BIT (SPI_SDI_BIT)
#define SPI_SDI_OUTREG (__outreg__(SPI_SDI_PORT))
#define SPI_SDI_INREG (__inreg__(SPI_SDI_PORT))
#define SPI_SDI_DIRREG (__dirreg__(SPI_SDI_PORT))
#define DIO205_OUTREG (__outreg__(SPI_SDI_PORT))
#define DIO205_INREG (__inreg__(SPI_SDI_PORT))
#define DIO205_DIRREG (__dirreg__(SPI_SDI_PORT))
#endif
#if (defined(SPI_SDO_PORT) && defined(SPI_SDO_BIT))
#define DIO206 206
#define SPI_SDO 206
#define DIO206_PORT (SPI_SDO_PORT)
#define DIO206_BIT (SPI_SDO_BIT)
#define SPI_SDO_OUTREG (__outreg__(SPI_SDO_PORT))
#define SPI_SDO_INREG (__inreg__(SPI_SDO_PORT))
#define SPI_SDO_DIRREG (__dirreg__(SPI_SDO_PORT))
#define DIO206_OUTREG (__outreg__(SPI_SDO_PORT))
#define DIO206_INREG (__inreg__(SPI_SDO_PORT))
#define DIO206_DIRREG (__dirreg__(SPI_SDO_PORT))
#endif
#if (defined(SPI_CS_PORT) && defined(SPI_CS_BIT))
#define DIO207 207
#define SPI_CS 207
#define DIO207_PORT (SPI_CS_PORT)
#define DIO207_BIT (SPI_CS_BIT)
#define SPI_CS_OUTREG (__outreg__(SPI_CS_PORT))
#define SPI_CS_INREG (__inreg__(SPI_CS_PORT))
#define SPI_CS_DIRREG (__dirreg__(SPI_CS_PORT))
#define DIO207_OUTREG (__outreg__(SPI_CS_PORT))
#define DIO207_INREG (__inreg__(SPI_CS_PORT))
#define DIO207_DIRREG (__dirreg__(SPI_CS_PORT))
#endif
#if (defined(I2C_CLK_PORT) && defined(I2C_CLK_BIT))
#define DIO208 208
#define I2C_CLK 208
#define DIO208_PORT (I2C_CLK_PORT)
#define DIO208_BIT (I2C_CLK_BIT)
#define I2C_CLK_OUTREG (__outreg__(I2C_CLK_PORT))
#define I2C_CLK_INREG (__inreg__(I2C_CLK_PORT))
#define I2C_CLK_DIRREG (__dirreg__(I2C_CLK_PORT))
#define DIO208_OUTREG (__outreg__(I2C_CLK_PORT))
#define DIO208_INREG (__inreg__(I2C_CLK_PORT))
#define DIO208_DIRREG (__dirreg__(I2C_CLK_PORT))
#endif
#if (defined(I2C_DATA_PORT) && defined(I2C_DATA_BIT))
#define DIO209 209
#define I2C_DATA 209
#define DIO209_PORT (I2C_DATA_PORT)
#define DIO209_BIT (I2C_DATA_BIT)
#define I2C_DATA_OUTREG (__outreg__(I2C_DATA_PORT))
#define I2C_DATA_INREG (__inreg__(I2C_DATA_PORT))
#define I2C_DATA_DIRREG (__dirreg__(I2C_DATA_PORT))
#define DIO209_OUTREG (__outreg__(I2C_DATA_PORT))
#define DIO209_INREG (__inreg__(I2C_DATA_PORT))
#define DIO209_DIRREG (__dirreg__(I2C_DATA_PORT))
#endif
#if (defined(TX2_PORT) && defined(TX2_BIT))
#define DIO210 210
#define TX2 210
#define DIO210_PORT (TX2_PORT)
#define DIO210_BIT (TX2_BIT)
#define TX2_OUTREG (__outreg__(TX2_PORT))
#define TX2_INREG (__inreg__(TX2_PORT))
#define TX2_DIRREG (__dirreg__(TX2_PORT))
#define DIO210_OUTREG (__outreg__(TX2_PORT))
#define DIO210_INREG (__inreg__(TX2_PORT))
#define DIO210_DIRREG (__dirreg__(TX2_PORT))
#endif
#if (defined(RX2_PORT) && defined(RX2_BIT))
#define DIO211 211
#define RX2 211
#define DIO211_PORT (RX2_PORT)
#define DIO211_BIT (RX2_BIT)
#define RX2_OUTREG (__outreg__(RX2_PORT))
#define RX2_INREG (__inreg__(RX2_PORT))
#define RX2_DIRREG (__dirreg__(RX2_PORT))
#define DIO211_OUTREG (__outreg__(RX2_PORT))
#define DIO211_INREG (__inreg__(RX2_PORT))
#define DIO211_DIRREG (__dirreg__(RX2_PORT))
#endif
#if(defined(SPI2_CLK_PORT) && defined(SPI2_CLK_BIT))
#define DIO212 212
#define SPI2_CLK 212
#define DIO212_PORT (SPI2_CLK_PORT)
#define DIO212_BIT (SPI2_CLK_BIT)
#define SPI2_CLK_OUTREG (__outreg__(SPI2_CLK_PORT))
#define SPI2_CLK_INREG (__inreg__(SPI2_CLK_PORT))
#define SPI2_CLK_DIRREG (__dirreg__(SPI2_CLK_PORT))
#define DIO212_OUTREG (__outreg__(SPI2_CLK_PORT))
#define DIO212_INREG (__inreg__(SPI2_CLK_PORT))
#define DIO212_DIRREG (__dirreg__(SPI2_CLK_PORT))
#endif
#if(defined(SPI2_SDI_PORT) && defined(SPI2_SDI_BIT))
#define DIO213 213
#define SPI2_SDI 213
#define DIO213_PORT (SPI2_SDI_PORT)
#define DIO213_BIT (SPI2_SDI_BIT)
#define SPI2_SDI_OUTREG (__outreg__(SPI2_SDI_PORT))
#define SPI2_SDI_INREG (__inreg__(SPI2_SDI_PORT))
#define SPI2_SDI_DIRREG (__dirreg__(SPI2_SDI_PORT))
#define DIO213_OUTREG (__outreg__(SPI2_SDI_PORT))
#define DIO213_INREG (__inreg__(SPI2_SDI_PORT))
#define DIO213_DIRREG (__dirreg__(SPI2_SDI_PORT))
#endif
#if(defined(SPI2_SDO_PORT) && defined(SPI2_SDO_BIT))
#define DIO214 214
#define SPI2_SDO 214
#define DIO214_PORT (SPI2_SDO_PORT)
#define DIO214_BIT (SPI2_SDO_BIT)
#define SPI2_SDO_OUTREG (__outreg__(SPI2_SDO_PORT))
#define SPI2_SDO_INREG (__inreg__(SPI2_SDO_PORT))
#define SPI2_SDO_DIRREG (__dirreg__(SPI2_SDO_PORT))
#define DIO214_OUTREG (__outreg__(SPI2_SDO_PORT))
#define DIO214_INREG (__inreg__(SPI2_SDO_PORT))
#define DIO214_DIRREG (__dirreg__(SPI2_SDO_PORT))
#endif
#if(defined(SPI2_CS_PORT) && defined(SPI2_CS_BIT))
#define DIO215 215
#define SPI2_CS 215
#define DIO215_PORT (SPI2_CS_PORT)
#define DIO215_BIT (SPI2_CS_BIT)
#define SPI2_CS_OUTREG (__outreg__(SPI2_CS_PORT))
#define SPI2_CS_INREG (__inreg__(SPI2_CS_PORT))
#define SPI2_CS_DIRREG (__dirreg__(SPI2_CS_PORT))
#define DIO215_OUTREG (__outreg__(SPI2_CS_PORT))
#define DIO215_INREG (__inreg__(SPI2_CS_PORT))
#define DIO215_DIRREG (__dirreg__(SPI2_CS_PORT))
#endif

// ISR on change inputs
#if (defined(LIMIT_X_ISR) && defined(LIMIT_X))
#define DIO100_ISR (LIMIT_X_ISR)
#define LIMIT_X_ISRREG (__pcmskreg__(LIMIT_X_ISR))
#if (LIMIT_X_ISR == 0)
#define LIMIT_X_ISR0 (1 << LIMIT_X_BIT)
#endif
#if (LIMIT_X_ISR == 1)
#define LIMIT_X_ISR1 (1 << LIMIT_X_BIT)
#endif
#if (LIMIT_X_ISR == 2)
#define LIMIT_X_ISR2 (1 << LIMIT_X_BIT)
#endif
#if (LIMIT_X_ISR == -1)
#undef LIMIT_X_ISRREG
#define LIMIT_X_ISRREG EICRA
#define LIMIT_X_ISRA 1
#define LIMIT_X_EIMSK 1
#endif
#if (LIMIT_X_ISR == -2)
#undef LIMIT_X_ISRREG
#define LIMIT_X_ISRREG EICRA
#define LIMIT_X_ISRA 4
#define LIMIT_X_EIMSK 2
#endif
#if (LIMIT_X_ISR == -3)
#undef LIMIT_X_ISRREG
#define LIMIT_X_ISRREG EICRA
#define LIMIT_X_ISRA 16
#define LIMIT_X_EIMSK 4
#endif
#if (LIMIT_X_ISR == -4)
#undef LIMIT_X_ISRREG
#define LIMIT_X_ISRREG EICRA
#define LIMIT_X_ISRA 64
#define LIMIT_X_EIMSK 8
#endif
#if (LIMIT_X_ISR == -5)
#undef LIMIT_X_ISRREG
#define LIMIT_X_ISRREG EICRB
#define LIMIT_X_ISRB 1
#define LIMIT_X_EIMSK 16
#endif
#if (LIMIT_X_ISR == -6)
#undef LIMIT_X_ISRREG
#define LIMIT_X_ISRREG EICRB
#define LIMIT_X_ISRB 4
#define LIMIT_X_EIMSK 32
#endif
#if (LIMIT_X_ISR == -7)
#undef LIMIT_X_ISRREG
#define LIMIT_X_ISRREG EICRB
#define LIMIT_X_ISRB 16
#define LIMIT_X_EIMSK 64
#endif
#if (LIMIT_X_ISR == -8)
#undef LIMIT_X_ISRREG
#define LIMIT_X_ISRREG EICRB
#define LIMIT_X_ISRB 64
#define LIMIT_X_EIMSK 128
#endif
#define DIO100_ISRREG LIMIT_X_ISRREG
#endif
#if (defined(LIMIT_Y_ISR) && defined(LIMIT_Y))
#define DIO101_ISR (LIMIT_Y_ISR)
#define LIMIT_Y_ISRREG (__pcmskreg__(LIMIT_Y_ISR))
#if (LIMIT_Y_ISR == 0)
#define LIMIT_Y_ISR0 (1 << LIMIT_Y_BIT)
#endif
#if (LIMIT_Y_ISR == 1)
#define LIMIT_Y_ISR1 (1 << LIMIT_Y_BIT)
#endif
#if (LIMIT_Y_ISR == 2)
#define LIMIT_Y_ISR2 (1 << LIMIT_Y_BIT)
#endif
#if (LIMIT_Y_ISR == -1)
#undef LIMIT_Y_ISRREG
#define LIMIT_Y_ISRREG EICRA
#define LIMIT_Y_ISRA 1
#define LIMIT_Y_EIMSK 1
#endif
#if (LIMIT_Y_ISR == -2)
#undef LIMIT_Y_ISRREG
#define LIMIT_Y_ISRREG EICRA
#define LIMIT_Y_ISRA 4
#define LIMIT_Y_EIMSK 2
#endif
#if (LIMIT_Y_ISR == -3)
#undef LIMIT_Y_ISRREG
#define LIMIT_Y_ISRREG EICRA
#define LIMIT_Y_ISRA 16
#define LIMIT_Y_EIMSK 4
#endif
#if (LIMIT_Y_ISR == -4)
#undef LIMIT_Y_ISRREG
#define LIMIT_Y_ISRREG EICRA
#define LIMIT_Y_ISRA 64
#define LIMIT_Y_EIMSK 8
#endif
#if (LIMIT_Y_ISR == -5)
#undef LIMIT_Y_ISRREG
#define LIMIT_Y_ISRREG EICRB
#define LIMIT_Y_ISRB 1
#define LIMIT_Y_EIMSK 16
#endif
#if (LIMIT_Y_ISR == -6)
#undef LIMIT_Y_ISRREG
#define LIMIT_Y_ISRREG EICRB
#define LIMIT_Y_ISRB 4
#define LIMIT_Y_EIMSK 32
#endif
#if (LIMIT_Y_ISR == -7)
#undef LIMIT_Y_ISRREG
#define LIMIT_Y_ISRREG EICRB
#define LIMIT_Y_ISRB 16
#define LIMIT_Y_EIMSK 64
#endif
#if (LIMIT_Y_ISR == -8)
#undef LIMIT_Y_ISRREG
#define LIMIT_Y_ISRREG EICRB
#define LIMIT_Y_ISRB 64
#define LIMIT_Y_EIMSK 128
#endif
#define DIO101_ISRREG LIMIT_Y_ISRREG
#endif
#if (defined(LIMIT_Z_ISR) && defined(LIMIT_Z))
#define DIO102_ISR (LIMIT_Z_ISR)
#define LIMIT_Z_ISRREG (__pcmskreg__(LIMIT_Z_ISR))
#if (LIMIT_Z_ISR == 0)
#define LIMIT_Z_ISR0 (1 << LIMIT_Z_BIT)
#endif
#if (LIMIT_Z_ISR == 1)
#define LIMIT_Z_ISR1 (1 << LIMIT_Z_BIT)
#endif
#if (LIMIT_Z_ISR == 2)
#define LIMIT_Z_ISR2 (1 << LIMIT_Z_BIT)
#endif
#if (LIMIT_Z_ISR == -1)
#undef LIMIT_Z_ISRREG
#define LIMIT_Z_ISRREG EICRA
#define LIMIT_Z_ISRA 1
#define LIMIT_Z_EIMSK 1
#endif
#if (LIMIT_Z_ISR == -2)
#undef LIMIT_Z_ISRREG
#define LIMIT_Z_ISRREG EICRA
#define LIMIT_Z_ISRA 4
#define LIMIT_Z_EIMSK 2
#endif
#if (LIMIT_Z_ISR == -3)
#undef LIMIT_Z_ISRREG
#define LIMIT_Z_ISRREG EICRA
#define LIMIT_Z_ISRA 16
#define LIMIT_Z_EIMSK 4
#endif
#if (LIMIT_Z_ISR == -4)
#undef LIMIT_Z_ISRREG
#define LIMIT_Z_ISRREG EICRA
#define LIMIT_Z_ISRA 64
#define LIMIT_Z_EIMSK 8
#endif
#if (LIMIT_Z_ISR == -5)
#undef LIMIT_Z_ISRREG
#define LIMIT_Z_ISRREG EICRB
#define LIMIT_Z_ISRB 1
#define LIMIT_Z_EIMSK 16
#endif
#if (LIMIT_Z_ISR == -6)
#undef LIMIT_Z_ISRREG
#define LIMIT_Z_ISRREG EICRB
#define LIMIT_Z_ISRB 4
#define LIMIT_Z_EIMSK 32
#endif
#if (LIMIT_Z_ISR == -7)
#undef LIMIT_Z_ISRREG
#define LIMIT_Z_ISRREG EICRB
#define LIMIT_Z_ISRB 16
#define LIMIT_Z_EIMSK 64
#endif
#if (LIMIT_Z_ISR == -8)
#undef LIMIT_Z_ISRREG
#define LIMIT_Z_ISRREG EICRB
#define LIMIT_Z_ISRB 64
#define LIMIT_Z_EIMSK 128
#endif
#define DIO102_ISRREG LIMIT_Z_ISRREG
#endif
#if (defined(LIMIT_X2_ISR) && defined(LIMIT_X2))
#define DIO103_ISR (LIMIT_X2_ISR)
#define LIMIT_X2_ISRREG (__pcmskreg__(LIMIT_X2_ISR))
#if (LIMIT_X2_ISR == 0)
#define LIMIT_X2_ISR0 (1 << LIMIT_X2_BIT)
#endif
#if (LIMIT_X2_ISR == 1)
#define LIMIT_X2_ISR1 (1 << LIMIT_X2_BIT)
#endif
#if (LIMIT_X2_ISR == 2)
#define LIMIT_X2_ISR2 (1 << LIMIT_X2_BIT)
#endif
#if (LIMIT_X2_ISR == -1)
#undef LIMIT_X2_ISRREG
#define LIMIT_X2_ISRREG EICRA
#define LIMIT_X2_ISRA 1
#define LIMIT_X2_EIMSK 1
#endif
#if (LIMIT_X2_ISR == -2)
#undef LIMIT_X2_ISRREG
#define LIMIT_X2_ISRREG EICRA
#define LIMIT_X2_ISRA 4
#define LIMIT_X2_EIMSK 2
#endif
#if (LIMIT_X2_ISR == -3)
#undef LIMIT_X2_ISRREG
#define LIMIT_X2_ISRREG EICRA
#define LIMIT_X2_ISRA 16
#define LIMIT_X2_EIMSK 4
#endif
#if (LIMIT_X2_ISR == -4)
#undef LIMIT_X2_ISRREG
#define LIMIT_X2_ISRREG EICRA
#define LIMIT_X2_ISRA 64
#define LIMIT_X2_EIMSK 8
#endif
#if (LIMIT_X2_ISR == -5)
#undef LIMIT_X2_ISRREG
#define LIMIT_X2_ISRREG EICRB
#define LIMIT_X2_ISRB 1
#define LIMIT_X2_EIMSK 16
#endif
#if (LIMIT_X2_ISR == -6)
#undef LIMIT_X2_ISRREG
#define LIMIT_X2_ISRREG EICRB
#define LIMIT_X2_ISRB 4
#define LIMIT_X2_EIMSK 32
#endif
#if (LIMIT_X2_ISR == -7)
#undef LIMIT_X2_ISRREG
#define LIMIT_X2_ISRREG EICRB
#define LIMIT_X2_ISRB 16
#define LIMIT_X2_EIMSK 64
#endif
#if (LIMIT_X2_ISR == -8)
#undef LIMIT_X2_ISRREG
#define LIMIT_X2_ISRREG EICRB
#define LIMIT_X2_ISRB 64
#define LIMIT_X2_EIMSK 128
#endif
#define DIO103_ISRREG LIMIT_X2_ISRREG
#endif
#if (defined(LIMIT_Y2_ISR) && defined(LIMIT_Y2))
#define DIO104_ISR (LIMIT_Y2_ISR)
#define LIMIT_Y2_ISRREG (__pcmskreg__(LIMIT_Y2_ISR))
#if (LIMIT_Y2_ISR == 0)
#define LIMIT_Y2_ISR0 (1 << LIMIT_Y2_BIT)
#endif
#if (LIMIT_Y2_ISR == 1)
#define LIMIT_Y2_ISR1 (1 << LIMIT_Y2_BIT)
#endif
#if (LIMIT_Y2_ISR == 2)
#define LIMIT_Y2_ISR2 (1 << LIMIT_Y2_BIT)
#endif
#if (LIMIT_Y2_ISR == -1)
#undef LIMIT_Y2_ISRREG
#define LIMIT_Y2_ISRREG EICRA
#define LIMIT_Y2_ISRA 1
#define LIMIT_Y2_EIMSK 1
#endif
#if (LIMIT_Y2_ISR == -2)
#undef LIMIT_Y2_ISRREG
#define LIMIT_Y2_ISRREG EICRA
#define LIMIT_Y2_ISRA 4
#define LIMIT_Y2_EIMSK 2
#endif
#if (LIMIT_Y2_ISR == -3)
#undef LIMIT_Y2_ISRREG
#define LIMIT_Y2_ISRREG EICRA
#define LIMIT_Y2_ISRA 16
#define LIMIT_Y2_EIMSK 4
#endif
#if (LIMIT_Y2_ISR == -4)
#undef LIMIT_Y2_ISRREG
#define LIMIT_Y2_ISRREG EICRA
#define LIMIT_Y2_ISRA 64
#define LIMIT_Y2_EIMSK 8
#endif
#if (LIMIT_Y2_ISR == -5)
#undef LIMIT_Y2_ISRREG
#define LIMIT_Y2_ISRREG EICRB
#define LIMIT_Y2_ISRB 1
#define LIMIT_Y2_EIMSK 16
#endif
#if (LIMIT_Y2_ISR == -6)
#undef LIMIT_Y2_ISRREG
#define LIMIT_Y2_ISRREG EICRB
#define LIMIT_Y2_ISRB 4
#define LIMIT_Y2_EIMSK 32
#endif
#if (LIMIT_Y2_ISR == -7)
#undef LIMIT_Y2_ISRREG
#define LIMIT_Y2_ISRREG EICRB
#define LIMIT_Y2_ISRB 16
#define LIMIT_Y2_EIMSK 64
#endif
#if (LIMIT_Y2_ISR == -8)
#undef LIMIT_Y2_ISRREG
#define LIMIT_Y2_ISRREG EICRB
#define LIMIT_Y2_ISRB 64
#define LIMIT_Y2_EIMSK 128
#endif
#define DIO104_ISRREG LIMIT_Y2_ISRREG
#endif
#if (defined(LIMIT_Z2_ISR) && defined(LIMIT_Z2))
#define DIO105_ISR (LIMIT_Z2_ISR)
#define LIMIT_Z2_ISRREG (__pcmskreg__(LIMIT_Z2_ISR))
#if (LIMIT_Z2_ISR == 0)
#define LIMIT_Z2_ISR0 (1 << LIMIT_Z2_BIT)
#endif
#if (LIMIT_Z2_ISR == 1)
#define LIMIT_Z2_ISR1 (1 << LIMIT_Z2_BIT)
#endif
#if (LIMIT_Z2_ISR == 2)
#define LIMIT_Z2_ISR2 (1 << LIMIT_Z2_BIT)
#endif
#if (LIMIT_Z2_ISR == -1)
#undef LIMIT_Z2_ISRREG
#define LIMIT_Z2_ISRREG EICRA
#define LIMIT_Z2_ISRA 1
#define LIMIT_Z2_EIMSK 1
#endif
#if (LIMIT_Z2_ISR == -2)
#undef LIMIT_Z2_ISRREG
#define LIMIT_Z2_ISRREG EICRA
#define LIMIT_Z2_ISRA 4
#define LIMIT_Z2_EIMSK 2
#endif
#if (LIMIT_Z2_ISR == -3)
#undef LIMIT_Z2_ISRREG
#define LIMIT_Z2_ISRREG EICRA
#define LIMIT_Z2_ISRA 16
#define LIMIT_Z2_EIMSK 4
#endif
#if (LIMIT_Z2_ISR == -4)
#undef LIMIT_Z2_ISRREG
#define LIMIT_Z2_ISRREG EICRA
#define LIMIT_Z2_ISRA 64
#define LIMIT_Z2_EIMSK 8
#endif
#if (LIMIT_Z2_ISR == -5)
#undef LIMIT_Z2_ISRREG
#define LIMIT_Z2_ISRREG EICRB
#define LIMIT_Z2_ISRB 1
#define LIMIT_Z2_EIMSK 16
#endif
#if (LIMIT_Z2_ISR == -6)
#undef LIMIT_Z2_ISRREG
#define LIMIT_Z2_ISRREG EICRB
#define LIMIT_Z2_ISRB 4
#define LIMIT_Z2_EIMSK 32
#endif
#if (LIMIT_Z2_ISR == -7)
#undef LIMIT_Z2_ISRREG
#define LIMIT_Z2_ISRREG EICRB
#define LIMIT_Z2_ISRB 16
#define LIMIT_Z2_EIMSK 64
#endif
#if (LIMIT_Z2_ISR == -8)
#undef LIMIT_Z2_ISRREG
#define LIMIT_Z2_ISRREG EICRB
#define LIMIT_Z2_ISRB 64
#define LIMIT_Z2_EIMSK 128
#endif
#define DIO105_ISRREG LIMIT_Z2_ISRREG
#endif
#if (defined(LIMIT_A_ISR) && defined(LIMIT_A))
#define DIO106_ISR (LIMIT_A_ISR)
#define LIMIT_A_ISRREG (__pcmskreg__(LIMIT_A_ISR))
#if (LIMIT_A_ISR == 0)
#define LIMIT_A_ISR0 (1 << LIMIT_A_BIT)
#endif
#if (LIMIT_A_ISR == 1)
#define LIMIT_A_ISR1 (1 << LIMIT_A_BIT)
#endif
#if (LIMIT_A_ISR == 2)
#define LIMIT_A_ISR2 (1 << LIMIT_A_BIT)
#endif
#if (LIMIT_A_ISR == -1)
#undef LIMIT_A_ISRREG
#define LIMIT_A_ISRREG EICRA
#define LIMIT_A_ISRA 1
#define LIMIT_A_EIMSK 1
#endif
#if (LIMIT_A_ISR == -2)
#undef LIMIT_A_ISRREG
#define LIMIT_A_ISRREG EICRA
#define LIMIT_A_ISRA 4
#define LIMIT_A_EIMSK 2
#endif
#if (LIMIT_A_ISR == -3)
#undef LIMIT_A_ISRREG
#define LIMIT_A_ISRREG EICRA
#define LIMIT_A_ISRA 16
#define LIMIT_A_EIMSK 4
#endif
#if (LIMIT_A_ISR == -4)
#undef LIMIT_A_ISRREG
#define LIMIT_A_ISRREG EICRA
#define LIMIT_A_ISRA 64
#define LIMIT_A_EIMSK 8
#endif
#if (LIMIT_A_ISR == -5)
#undef LIMIT_A_ISRREG
#define LIMIT_A_ISRREG EICRB
#define LIMIT_A_ISRB 1
#define LIMIT_A_EIMSK 16
#endif
#if (LIMIT_A_ISR == -6)
#undef LIMIT_A_ISRREG
#define LIMIT_A_ISRREG EICRB
#define LIMIT_A_ISRB 4
#define LIMIT_A_EIMSK 32
#endif
#if (LIMIT_A_ISR == -7)
#undef LIMIT_A_ISRREG
#define LIMIT_A_ISRREG EICRB
#define LIMIT_A_ISRB 16
#define LIMIT_A_EIMSK 64
#endif
#if (LIMIT_A_ISR == -8)
#undef LIMIT_A_ISRREG
#define LIMIT_A_ISRREG EICRB
#define LIMIT_A_ISRB 64
#define LIMIT_A_EIMSK 128
#endif
#define DIO106_ISRREG LIMIT_A_ISRREG
#endif
#if (defined(LIMIT_B_ISR) && defined(LIMIT_B))
#define DIO107_ISR (LIMIT_B_ISR)
#define LIMIT_B_ISRREG (__pcmskreg__(LIMIT_B_ISR))
#if (LIMIT_B_ISR == 0)
#define LIMIT_B_ISR0 (1 << LIMIT_B_BIT)
#endif
#if (LIMIT_B_ISR == 1)
#define LIMIT_B_ISR1 (1 << LIMIT_B_BIT)
#endif
#if (LIMIT_B_ISR == 2)
#define LIMIT_B_ISR2 (1 << LIMIT_B_BIT)
#endif
#if (LIMIT_B_ISR == -1)
#undef LIMIT_B_ISRREG
#define LIMIT_B_ISRREG EICRA
#define LIMIT_B_ISRA 1
#define LIMIT_B_EIMSK 1
#endif
#if (LIMIT_B_ISR == -2)
#undef LIMIT_B_ISRREG
#define LIMIT_B_ISRREG EICRA
#define LIMIT_B_ISRA 4
#define LIMIT_B_EIMSK 2
#endif
#if (LIMIT_B_ISR == -3)
#undef LIMIT_B_ISRREG
#define LIMIT_B_ISRREG EICRA
#define LIMIT_B_ISRA 16
#define LIMIT_B_EIMSK 4
#endif
#if (LIMIT_B_ISR == -4)
#undef LIMIT_B_ISRREG
#define LIMIT_B_ISRREG EICRA
#define LIMIT_B_ISRA 64
#define LIMIT_B_EIMSK 8
#endif
#if (LIMIT_B_ISR == -5)
#undef LIMIT_B_ISRREG
#define LIMIT_B_ISRREG EICRB
#define LIMIT_B_ISRB 1
#define LIMIT_B_EIMSK 16
#endif
#if (LIMIT_B_ISR == -6)
#undef LIMIT_B_ISRREG
#define LIMIT_B_ISRREG EICRB
#define LIMIT_B_ISRB 4
#define LIMIT_B_EIMSK 32
#endif
#if (LIMIT_B_ISR == -7)
#undef LIMIT_B_ISRREG
#define LIMIT_B_ISRREG EICRB
#define LIMIT_B_ISRB 16
#define LIMIT_B_EIMSK 64
#endif
#if (LIMIT_B_ISR == -8)
#undef LIMIT_B_ISRREG
#define LIMIT_B_ISRREG EICRB
#define LIMIT_B_ISRB 64
#define LIMIT_B_EIMSK 128
#endif
#define DIO107_ISRREG LIMIT_B_ISRREG
#endif
#if (defined(LIMIT_C_ISR) && defined(LIMIT_C))
#define DIO108_ISR (LIMIT_C_ISR)
#define LIMIT_C_ISRREG (__pcmskreg__(LIMIT_C_ISR))
#if (LIMIT_C_ISR == 0)
#define LIMIT_C_ISR0 (1 << LIMIT_C_BIT)
#endif
#if (LIMIT_C_ISR == 1)
#define LIMIT_C_ISR1 (1 << LIMIT_C_BIT)
#endif
#if (LIMIT_C_ISR == 2)
#define LIMIT_C_ISR2 (1 << LIMIT_C_BIT)
#endif
#if (LIMIT_C_ISR == -1)
#undef LIMIT_C_ISRREG
#define LIMIT_C_ISRREG EICRA
#define LIMIT_C_ISRA 1
#define LIMIT_C_EIMSK 1
#endif
#if (LIMIT_C_ISR == -2)
#undef LIMIT_C_ISRREG
#define LIMIT_C_ISRREG EICRA
#define LIMIT_C_ISRA 4
#define LIMIT_C_EIMSK 2
#endif
#if (LIMIT_C_ISR == -3)
#undef LIMIT_C_ISRREG
#define LIMIT_C_ISRREG EICRA
#define LIMIT_C_ISRA 16
#define LIMIT_C_EIMSK 4
#endif
#if (LIMIT_C_ISR == -4)
#undef LIMIT_C_ISRREG
#define LIMIT_C_ISRREG EICRA
#define LIMIT_C_ISRA 64
#define LIMIT_C_EIMSK 8
#endif
#if (LIMIT_C_ISR == -5)
#undef LIMIT_C_ISRREG
#define LIMIT_C_ISRREG EICRB
#define LIMIT_C_ISRB 1
#define LIMIT_C_EIMSK 16
#endif
#if (LIMIT_C_ISR == -6)
#undef LIMIT_C_ISRREG
#define LIMIT_C_ISRREG EICRB
#define LIMIT_C_ISRB 4
#define LIMIT_C_EIMSK 32
#endif
#if (LIMIT_C_ISR == -7)
#undef LIMIT_C_ISRREG
#define LIMIT_C_ISRREG EICRB
#define LIMIT_C_ISRB 16
#define LIMIT_C_EIMSK 64
#endif
#if (LIMIT_C_ISR == -8)
#undef LIMIT_C_ISRREG
#define LIMIT_C_ISRREG EICRB
#define LIMIT_C_ISRB 64
#define LIMIT_C_EIMSK 128
#endif
#define DIO108_ISRREG LIMIT_C_ISRREG
#endif
#if (defined(PROBE_ISR) && defined(PROBE))
#define DIO109_ISR (PROBE_ISR)
#define PROBE_ISRREG (__pcmskreg__(PROBE_ISR))
#if (PROBE_ISR == 0)
#define PROBE_ISR0 (1 << PROBE_BIT)
#endif
#if (PROBE_ISR == 1)
#define PROBE_ISR1 (1 << PROBE_BIT)
#endif
#if (PROBE_ISR == 2)
#define PROBE_ISR2 (1 << PROBE_BIT)
#endif
#if (PROBE_ISR == -1)
#undef PROBE_ISRREG
#define PROBE_ISRREG EICRA
#define PROBE_ISRA 1
#define PROBE_EIMSK 1
#endif
#if (PROBE_ISR == -2)
#undef PROBE_ISRREG
#define PROBE_ISRREG EICRA
#define PROBE_ISRA 4
#define PROBE_EIMSK 2
#endif
#if (PROBE_ISR == -3)
#undef PROBE_ISRREG
#define PROBE_ISRREG EICRA
#define PROBE_ISRA 16
#define PROBE_EIMSK 4
#endif
#if (PROBE_ISR == -4)
#undef PROBE_ISRREG
#define PROBE_ISRREG EICRA
#define PROBE_ISRA 64
#define PROBE_EIMSK 8
#endif
#if (PROBE_ISR == -5)
#undef PROBE_ISRREG
#define PROBE_ISRREG EICRB
#define PROBE_ISRB 1
#define PROBE_EIMSK 16
#endif
#if (PROBE_ISR == -6)
#undef PROBE_ISRREG
#define PROBE_ISRREG EICRB
#define PROBE_ISRB 4
#define PROBE_EIMSK 32
#endif
#if (PROBE_ISR == -7)
#undef PROBE_ISRREG
#define PROBE_ISRREG EICRB
#define PROBE_ISRB 16
#define PROBE_EIMSK 64
#endif
#if (PROBE_ISR == -8)
#undef PROBE_ISRREG
#define PROBE_ISRREG EICRB
#define PROBE_ISRB 64
#define PROBE_EIMSK 128
#endif
#define DIO109_ISRREG PROBE_ISRREG
#endif
#if (defined(ESTOP_ISR) && defined(ESTOP))
#define DIO110_ISR (ESTOP_ISR)
#define ESTOP_ISRREG (__pcmskreg__(ESTOP_ISR))
#if (ESTOP_ISR == 0)
#define ESTOP_ISR0 (1 << ESTOP_BIT)
#endif
#if (ESTOP_ISR == 1)
#define ESTOP_ISR1 (1 << ESTOP_BIT)
#endif
#if (ESTOP_ISR == 2)
#define ESTOP_ISR2 (1 << ESTOP_BIT)
#endif
#if (ESTOP_ISR == -1)
#undef ESTOP_ISRREG
#define ESTOP_ISRREG EICRA
#define ESTOP_ISRA 1
#define ESTOP_EIMSK 1
#endif
#if (ESTOP_ISR == -2)
#undef ESTOP_ISRREG
#define ESTOP_ISRREG EICRA
#define ESTOP_ISRA 4
#define ESTOP_EIMSK 2
#endif
#if (ESTOP_ISR == -3)
#undef ESTOP_ISRREG
#define ESTOP_ISRREG EICRA
#define ESTOP_ISRA 16
#define ESTOP_EIMSK 4
#endif
#if (ESTOP_ISR == -4)
#undef ESTOP_ISRREG
#define ESTOP_ISRREG EICRA
#define ESTOP_ISRA 64
#define ESTOP_EIMSK 8
#endif
#if (ESTOP_ISR == -5)
#undef ESTOP_ISRREG
#define ESTOP_ISRREG EICRB
#define ESTOP_ISRB 1
#define ESTOP_EIMSK 16
#endif
#if (ESTOP_ISR == -6)
#undef ESTOP_ISRREG
#define ESTOP_ISRREG EICRB
#define ESTOP_ISRB 4
#define ESTOP_EIMSK 32
#endif
#if (ESTOP_ISR == -7)
#undef ESTOP_ISRREG
#define ESTOP_ISRREG EICRB
#define ESTOP_ISRB 16
#define ESTOP_EIMSK 64
#endif
#if (ESTOP_ISR == -8)
#undef ESTOP_ISRREG
#define ESTOP_ISRREG EICRB
#define ESTOP_ISRB 64
#define ESTOP_EIMSK 128
#endif
#define DIO110_ISRREG ESTOP_ISRREG
#endif
#if (defined(SAFETY_DOOR_ISR) && defined(SAFETY_DOOR))
#define DIO111_ISR (SAFETY_DOOR_ISR)
#define SAFETY_DOOR_ISRREG (__pcmskreg__(SAFETY_DOOR_ISR))
#if (SAFETY_DOOR_ISR == 0)
#define SAFETY_DOOR_ISR0 (1 << SAFETY_DOOR_BIT)
#endif
#if (SAFETY_DOOR_ISR == 1)
#define SAFETY_DOOR_ISR1 (1 << SAFETY_DOOR_BIT)
#endif
#if (SAFETY_DOOR_ISR == 2)
#define SAFETY_DOOR_ISR2 (1 << SAFETY_DOOR_BIT)
#endif
#if (SAFETY_DOOR_ISR == -1)
#undef SAFETY_DOOR_ISRREG
#define SAFETY_DOOR_ISRREG EICRA
#define SAFETY_DOOR_ISRA 1
#define SAFETY_DOOR_EIMSK 1
#endif
#if (SAFETY_DOOR_ISR == -2)
#undef SAFETY_DOOR_ISRREG
#define SAFETY_DOOR_ISRREG EICRA
#define SAFETY_DOOR_ISRA 4
#define SAFETY_DOOR_EIMSK 2
#endif
#if (SAFETY_DOOR_ISR == -3)
#undef SAFETY_DOOR_ISRREG
#define SAFETY_DOOR_ISRREG EICRA
#define SAFETY_DOOR_ISRA 16
#define SAFETY_DOOR_EIMSK 4
#endif
#if (SAFETY_DOOR_ISR == -4)
#undef SAFETY_DOOR_ISRREG
#define SAFETY_DOOR_ISRREG EICRA
#define SAFETY_DOOR_ISRA 64
#define SAFETY_DOOR_EIMSK 8
#endif
#if (SAFETY_DOOR_ISR == -5)
#undef SAFETY_DOOR_ISRREG
#define SAFETY_DOOR_ISRREG EICRB
#define SAFETY_DOOR_ISRB 1
#define SAFETY_DOOR_EIMSK 16
#endif
#if (SAFETY_DOOR_ISR == -6)
#undef SAFETY_DOOR_ISRREG
#define SAFETY_DOOR_ISRREG EICRB
#define SAFETY_DOOR_ISRB 4
#define SAFETY_DOOR_EIMSK 32
#endif
#if (SAFETY_DOOR_ISR == -7)
#undef SAFETY_DOOR_ISRREG
#define SAFETY_DOOR_ISRREG EICRB
#define SAFETY_DOOR_ISRB 16
#define SAFETY_DOOR_EIMSK 64
#endif
#if (SAFETY_DOOR_ISR == -8)
#undef SAFETY_DOOR_ISRREG
#define SAFETY_DOOR_ISRREG EICRB
#define SAFETY_DOOR_ISRB 64
#define SAFETY_DOOR_EIMSK 128
#endif
#define DIO111_ISRREG SAFETY_DOOR_ISRREG
#endif
#if (defined(FHOLD_ISR) && defined(FHOLD))
#define DIO112_ISR (FHOLD_ISR)
#define FHOLD_ISRREG (__pcmskreg__(FHOLD_ISR))
#if (FHOLD_ISR == 0)
#define FHOLD_ISR0 (1 << FHOLD_BIT)
#endif
#if (FHOLD_ISR == 1)
#define FHOLD_ISR1 (1 << FHOLD_BIT)
#endif
#if (FHOLD_ISR == 2)
#define FHOLD_ISR2 (1 << FHOLD_BIT)
#endif
#if (FHOLD_ISR == -1)
#undef FHOLD_ISRREG
#define FHOLD_ISRREG EICRA
#define FHOLD_ISRA 1
#define FHOLD_EIMSK 1
#endif
#if (FHOLD_ISR == -2)
#undef FHOLD_ISRREG
#define FHOLD_ISRREG EICRA
#define FHOLD_ISRA 4
#define FHOLD_EIMSK 2
#endif
#if (FHOLD_ISR == -3)
#undef FHOLD_ISRREG
#define FHOLD_ISRREG EICRA
#define FHOLD_ISRA 16
#define FHOLD_EIMSK 4
#endif
#if (FHOLD_ISR == -4)
#undef FHOLD_ISRREG
#define FHOLD_ISRREG EICRA
#define FHOLD_ISRA 64
#define FHOLD_EIMSK 8
#endif
#if (FHOLD_ISR == -5)
#undef FHOLD_ISRREG
#define FHOLD_ISRREG EICRB
#define FHOLD_ISRB 1
#define FHOLD_EIMSK 16
#endif
#if (FHOLD_ISR == -6)
#undef FHOLD_ISRREG
#define FHOLD_ISRREG EICRB
#define FHOLD_ISRB 4
#define FHOLD_EIMSK 32
#endif
#if (FHOLD_ISR == -7)
#undef FHOLD_ISRREG
#define FHOLD_ISRREG EICRB
#define FHOLD_ISRB 16
#define FHOLD_EIMSK 64
#endif
#if (FHOLD_ISR == -8)
#undef FHOLD_ISRREG
#define FHOLD_ISRREG EICRB
#define FHOLD_ISRB 64
#define FHOLD_EIMSK 128
#endif
#define DIO112_ISRREG FHOLD_ISRREG
#endif
#if (defined(CS_RES_ISR) && defined(CS_RES))
#define DIO113_ISR (CS_RES_ISR)
#define CS_RES_ISRREG (__pcmskreg__(CS_RES_ISR))
#if (CS_RES_ISR == 0)
#define CS_RES_ISR0 (1 << CS_RES_BIT)
#endif
#if (CS_RES_ISR == 1)
#define CS_RES_ISR1 (1 << CS_RES_BIT)
#endif
#if (CS_RES_ISR == 2)
#define CS_RES_ISR2 (1 << CS_RES_BIT)
#endif
#if (CS_RES_ISR == -1)
#undef CS_RES_ISRREG
#define CS_RES_ISRREG EICRA
#define CS_RES_ISRA 1
#define CS_RES_EIMSK 1
#endif
#if (CS_RES_ISR == -2)
#undef CS_RES_ISRREG
#define CS_RES_ISRREG EICRA
#define CS_RES_ISRA 4
#define CS_RES_EIMSK 2
#endif
#if (CS_RES_ISR == -3)
#undef CS_RES_ISRREG
#define CS_RES_ISRREG EICRA
#define CS_RES_ISRA 16
#define CS_RES_EIMSK 4
#endif
#if (CS_RES_ISR == -4)
#undef CS_RES_ISRREG
#define CS_RES_ISRREG EICRA
#define CS_RES_ISRA 64
#define CS_RES_EIMSK 8
#endif
#if (CS_RES_ISR == -5)
#undef CS_RES_ISRREG
#define CS_RES_ISRREG EICRB
#define CS_RES_ISRB 1
#define CS_RES_EIMSK 16
#endif
#if (CS_RES_ISR == -6)
#undef CS_RES_ISRREG
#define CS_RES_ISRREG EICRB
#define CS_RES_ISRB 4
#define CS_RES_EIMSK 32
#endif
#if (CS_RES_ISR == -7)
#undef CS_RES_ISRREG
#define CS_RES_ISRREG EICRB
#define CS_RES_ISRB 16
#define CS_RES_EIMSK 64
#endif
#if (CS_RES_ISR == -8)
#undef CS_RES_ISRREG
#define CS_RES_ISRREG EICRB
#define CS_RES_ISRB 64
#define CS_RES_EIMSK 128
#endif
#define DIO113_ISRREG CS_RES_ISRREG
#endif
#if (defined(DIN0_ISR) && defined(DIN0))
#define DIO130_ISR (DIN0_ISR)
#define DIN0_ISRREG (__pcmskreg__(DIN0_ISR))
#if (DIN0_ISR == 0)
#define DIN0_ISR0 (1 << DIN0_BIT)
#endif
#if (DIN0_ISR == 1)
#define DIN0_ISR1 (1 << DIN0_BIT)
#endif
#if (DIN0_ISR == 2)
#define DIN0_ISR2 (1 << DIN0_BIT)
#endif
#if (DIN0_ISR == -1)
#undef DIN0_ISRREG
#define DIN0_ISRREG EICRA
#define DIN0_ISRA 1
#define DIN0_EIMSK 1
#endif
#if (DIN0_ISR == -2)
#undef DIN0_ISRREG
#define DIN0_ISRREG EICRA
#define DIN0_ISRA 4
#define DIN0_EIMSK 2
#endif
#if (DIN0_ISR == -3)
#undef DIN0_ISRREG
#define DIN0_ISRREG EICRA
#define DIN0_ISRA 16
#define DIN0_EIMSK 4
#endif
#if (DIN0_ISR == -4)
#undef DIN0_ISRREG
#define DIN0_ISRREG EICRA
#define DIN0_ISRA 64
#define DIN0_EIMSK 8
#endif
#if (DIN0_ISR == -5)
#undef DIN0_ISRREG
#define DIN0_ISRREG EICRB
#define DIN0_ISRB 1
#define DIN0_EIMSK 16
#endif
#if (DIN0_ISR == -6)
#undef DIN0_ISRREG
#define DIN0_ISRREG EICRB
#define DIN0_ISRB 4
#define DIN0_EIMSK 32
#endif
#if (DIN0_ISR == -7)
#undef DIN0_ISRREG
#define DIN0_ISRREG EICRB
#define DIN0_ISRB 16
#define DIN0_EIMSK 64
#endif
#if (DIN0_ISR == -8)
#undef DIN0_ISRREG
#define DIN0_ISRREG EICRB
#define DIN0_ISRB 64
#define DIN0_EIMSK 128
#endif
#define DIO130_ISRREG DIN0_ISRREG
#endif
#if (defined(DIN1_ISR) && defined(DIN1))
#define DIO131_ISR (DIN1_ISR)
#define DIN1_ISRREG (__pcmskreg__(DIN1_ISR))
#if (DIN1_ISR == 0)
#define DIN1_ISR0 (1 << DIN1_BIT)
#endif
#if (DIN1_ISR == 1)
#define DIN1_ISR1 (1 << DIN1_BIT)
#endif
#if (DIN1_ISR == 2)
#define DIN1_ISR2 (1 << DIN1_BIT)
#endif
#if (DIN1_ISR == -1)
#undef DIN1_ISRREG
#define DIN1_ISRREG EICRA
#define DIN1_ISRA 1
#define DIN1_EIMSK 1
#endif
#if (DIN1_ISR == -2)
#undef DIN1_ISRREG
#define DIN1_ISRREG EICRA
#define DIN1_ISRA 4
#define DIN1_EIMSK 2
#endif
#if (DIN1_ISR == -3)
#undef DIN1_ISRREG
#define DIN1_ISRREG EICRA
#define DIN1_ISRA 16
#define DIN1_EIMSK 4
#endif
#if (DIN1_ISR == -4)
#undef DIN1_ISRREG
#define DIN1_ISRREG EICRA
#define DIN1_ISRA 64
#define DIN1_EIMSK 8
#endif
#if (DIN1_ISR == -5)
#undef DIN1_ISRREG
#define DIN1_ISRREG EICRB
#define DIN1_ISRB 1
#define DIN1_EIMSK 16
#endif
#if (DIN1_ISR == -6)
#undef DIN1_ISRREG
#define DIN1_ISRREG EICRB
#define DIN1_ISRB 4
#define DIN1_EIMSK 32
#endif
#if (DIN1_ISR == -7)
#undef DIN1_ISRREG
#define DIN1_ISRREG EICRB
#define DIN1_ISRB 16
#define DIN1_EIMSK 64
#endif
#if (DIN1_ISR == -8)
#undef DIN1_ISRREG
#define DIN1_ISRREG EICRB
#define DIN1_ISRB 64
#define DIN1_EIMSK 128
#endif
#define DIO131_ISRREG DIN1_ISRREG
#endif
#if (defined(DIN2_ISR) && defined(DIN2))
#define DIO132_ISR (DIN2_ISR)
#define DIN2_ISRREG (__pcmskreg__(DIN2_ISR))
#if (DIN2_ISR == 0)
#define DIN2_ISR0 (1 << DIN2_BIT)
#endif
#if (DIN2_ISR == 1)
#define DIN2_ISR1 (1 << DIN2_BIT)
#endif
#if (DIN2_ISR == 2)
#define DIN2_ISR2 (1 << DIN2_BIT)
#endif
#if (DIN2_ISR == -1)
#undef DIN2_ISRREG
#define DIN2_ISRREG EICRA
#define DIN2_ISRA 1
#define DIN2_EIMSK 1
#endif
#if (DIN2_ISR == -2)
#undef DIN2_ISRREG
#define DIN2_ISRREG EICRA
#define DIN2_ISRA 4
#define DIN2_EIMSK 2
#endif
#if (DIN2_ISR == -3)
#undef DIN2_ISRREG
#define DIN2_ISRREG EICRA
#define DIN2_ISRA 16
#define DIN2_EIMSK 4
#endif
#if (DIN2_ISR == -4)
#undef DIN2_ISRREG
#define DIN2_ISRREG EICRA
#define DIN2_ISRA 64
#define DIN2_EIMSK 8
#endif
#if (DIN2_ISR == -5)
#undef DIN2_ISRREG
#define DIN2_ISRREG EICRB
#define DIN2_ISRB 1
#define DIN2_EIMSK 16
#endif
#if (DIN2_ISR == -6)
#undef DIN2_ISRREG
#define DIN2_ISRREG EICRB
#define DIN2_ISRB 4
#define DIN2_EIMSK 32
#endif
#if (DIN2_ISR == -7)
#undef DIN2_ISRREG
#define DIN2_ISRREG EICRB
#define DIN2_ISRB 16
#define DIN2_EIMSK 64
#endif
#if (DIN2_ISR == -8)
#undef DIN2_ISRREG
#define DIN2_ISRREG EICRB
#define DIN2_ISRB 64
#define DIN2_EIMSK 128
#endif
#define DIO132_ISRREG DIN2_ISRREG
#endif
#if (defined(DIN3_ISR) && defined(DIN3))
#define DIO133_ISR (DIN3_ISR)
#define DIN3_ISRREG (__pcmskreg__(DIN3_ISR))
#if (DIN3_ISR == 0)
#define DIN3_ISR0 (1 << DIN3_BIT)
#endif
#if (DIN3_ISR == 1)
#define DIN3_ISR1 (1 << DIN3_BIT)
#endif
#if (DIN3_ISR == 2)
#define DIN3_ISR2 (1 << DIN3_BIT)
#endif
#if (DIN3_ISR == -1)
#undef DIN3_ISRREG
#define DIN3_ISRREG EICRA
#define DIN3_ISRA 1
#define DIN3_EIMSK 1
#endif
#if (DIN3_ISR == -2)
#undef DIN3_ISRREG
#define DIN3_ISRREG EICRA
#define DIN3_ISRA 4
#define DIN3_EIMSK 2
#endif
#if (DIN3_ISR == -3)
#undef DIN3_ISRREG
#define DIN3_ISRREG EICRA
#define DIN3_ISRA 16
#define DIN3_EIMSK 4
#endif
#if (DIN3_ISR == -4)
#undef DIN3_ISRREG
#define DIN3_ISRREG EICRA
#define DIN3_ISRA 64
#define DIN3_EIMSK 8
#endif
#if (DIN3_ISR == -5)
#undef DIN3_ISRREG
#define DIN3_ISRREG EICRB
#define DIN3_ISRB 1
#define DIN3_EIMSK 16
#endif
#if (DIN3_ISR == -6)
#undef DIN3_ISRREG
#define DIN3_ISRREG EICRB
#define DIN3_ISRB 4
#define DIN3_EIMSK 32
#endif
#if (DIN3_ISR == -7)
#undef DIN3_ISRREG
#define DIN3_ISRREG EICRB
#define DIN3_ISRB 16
#define DIN3_EIMSK 64
#endif
#if (DIN3_ISR == -8)
#undef DIN3_ISRREG
#define DIN3_ISRREG EICRB
#define DIN3_ISRB 64
#define DIN3_EIMSK 128
#endif
#define DIO133_ISRREG DIN3_ISRREG
#endif
#if (defined(DIN4_ISR) && defined(DIN4))
#define DIO134_ISR (DIN4_ISR)
#define DIN4_ISRREG (__pcmskreg__(DIN4_ISR))
#if (DIN4_ISR == 0)
#define DIN4_ISR0 (1 << DIN4_BIT)
#endif
#if (DIN4_ISR == 1)
#define DIN4_ISR1 (1 << DIN4_BIT)
#endif
#if (DIN4_ISR == 2)
#define DIN4_ISR2 (1 << DIN4_BIT)
#endif
#if (DIN4_ISR == -1)
#undef DIN4_ISRREG
#define DIN4_ISRREG EICRA
#define DIN4_ISRA 1
#define DIN4_EIMSK 1
#endif
#if (DIN4_ISR == -2)
#undef DIN4_ISRREG
#define DIN4_ISRREG EICRA
#define DIN4_ISRA 4
#define DIN4_EIMSK 2
#endif
#if (DIN4_ISR == -3)
#undef DIN4_ISRREG
#define DIN4_ISRREG EICRA
#define DIN4_ISRA 16
#define DIN4_EIMSK 4
#endif
#if (DIN4_ISR == -4)
#undef DIN4_ISRREG
#define DIN4_ISRREG EICRA
#define DIN4_ISRA 64
#define DIN4_EIMSK 8
#endif
#if (DIN4_ISR == -5)
#undef DIN4_ISRREG
#define DIN4_ISRREG EICRB
#define DIN4_ISRB 1
#define DIN4_EIMSK 16
#endif
#if (DIN4_ISR == -6)
#undef DIN4_ISRREG
#define DIN4_ISRREG EICRB
#define DIN4_ISRB 4
#define DIN4_EIMSK 32
#endif
#if (DIN4_ISR == -7)
#undef DIN4_ISRREG
#define DIN4_ISRREG EICRB
#define DIN4_ISRB 16
#define DIN4_EIMSK 64
#endif
#if (DIN4_ISR == -8)
#undef DIN4_ISRREG
#define DIN4_ISRREG EICRB
#define DIN4_ISRB 64
#define DIN4_EIMSK 128
#endif
#define DIO134_ISRREG DIN4_ISRREG
#endif
#if (defined(DIN5_ISR) && defined(DIN5))
#define DIO135_ISR (DIN5_ISR)
#define DIN5_ISRREG (__pcmskreg__(DIN5_ISR))
#if (DIN5_ISR == 0)
#define DIN5_ISR0 (1 << DIN5_BIT)
#endif
#if (DIN5_ISR == 1)
#define DIN5_ISR1 (1 << DIN5_BIT)
#endif
#if (DIN5_ISR == 2)
#define DIN5_ISR2 (1 << DIN5_BIT)
#endif
#if (DIN5_ISR == -1)
#undef DIN5_ISRREG
#define DIN5_ISRREG EICRA
#define DIN5_ISRA 1
#define DIN5_EIMSK 1
#endif
#if (DIN5_ISR == -2)
#undef DIN5_ISRREG
#define DIN5_ISRREG EICRA
#define DIN5_ISRA 4
#define DIN5_EIMSK 2
#endif
#if (DIN5_ISR == -3)
#undef DIN5_ISRREG
#define DIN5_ISRREG EICRA
#define DIN5_ISRA 16
#define DIN5_EIMSK 4
#endif
#if (DIN5_ISR == -4)
#undef DIN5_ISRREG
#define DIN5_ISRREG EICRA
#define DIN5_ISRA 64
#define DIN5_EIMSK 8
#endif
#if (DIN5_ISR == -5)
#undef DIN5_ISRREG
#define DIN5_ISRREG EICRB
#define DIN5_ISRB 1
#define DIN5_EIMSK 16
#endif
#if (DIN5_ISR == -6)
#undef DIN5_ISRREG
#define DIN5_ISRREG EICRB
#define DIN5_ISRB 4
#define DIN5_EIMSK 32
#endif
#if (DIN5_ISR == -7)
#undef DIN5_ISRREG
#define DIN5_ISRREG EICRB
#define DIN5_ISRB 16
#define DIN5_EIMSK 64
#endif
#if (DIN5_ISR == -8)
#undef DIN5_ISRREG
#define DIN5_ISRREG EICRB
#define DIN5_ISRB 64
#define DIN5_EIMSK 128
#endif
#define DIO135_ISRREG DIN5_ISRREG
#endif
#if (defined(DIN6_ISR) && defined(DIN6))
#define DIO136_ISR (DIN6_ISR)
#define DIN6_ISRREG (__pcmskreg__(DIN6_ISR))
#if (DIN6_ISR == 0)
#define DIN6_ISR0 (1 << DIN6_BIT)
#endif
#if (DIN6_ISR == 1)
#define DIN6_ISR1 (1 << DIN6_BIT)
#endif
#if (DIN6_ISR == 2)
#define DIN6_ISR2 (1 << DIN6_BIT)
#endif
#if (DIN6_ISR == -1)
#undef DIN6_ISRREG
#define DIN6_ISRREG EICRA
#define DIN6_ISRA 1
#define DIN6_EIMSK 1
#endif
#if (DIN6_ISR == -2)
#undef DIN6_ISRREG
#define DIN6_ISRREG EICRA
#define DIN6_ISRA 4
#define DIN6_EIMSK 2
#endif
#if (DIN6_ISR == -3)
#undef DIN6_ISRREG
#define DIN6_ISRREG EICRA
#define DIN6_ISRA 16
#define DIN6_EIMSK 4
#endif
#if (DIN6_ISR == -4)
#undef DIN6_ISRREG
#define DIN6_ISRREG EICRA
#define DIN6_ISRA 64
#define DIN6_EIMSK 8
#endif
#if (DIN6_ISR == -5)
#undef DIN6_ISRREG
#define DIN6_ISRREG EICRB
#define DIN6_ISRB 1
#define DIN6_EIMSK 16
#endif
#if (DIN6_ISR == -6)
#undef DIN6_ISRREG
#define DIN6_ISRREG EICRB
#define DIN6_ISRB 4
#define DIN6_EIMSK 32
#endif
#if (DIN6_ISR == -7)
#undef DIN6_ISRREG
#define DIN6_ISRREG EICRB
#define DIN6_ISRB 16
#define DIN6_EIMSK 64
#endif
#if (DIN6_ISR == -8)
#undef DIN6_ISRREG
#define DIN6_ISRREG EICRB
#define DIN6_ISRB 64
#define DIN6_EIMSK 128
#endif
#define DIO136_ISRREG DIN6_ISRREG
#endif
#if (defined(DIN7_ISR) && defined(DIN7))
#define DIO137_ISR (DIN7_ISR)
#define DIN7_ISRREG (__pcmskreg__(DIN7_ISR))
#if (DIN7_ISR == 0)
#define DIN7_ISR0 (1 << DIN7_BIT)
#endif
#if (DIN7_ISR == 1)
#define DIN7_ISR1 (1 << DIN7_BIT)
#endif
#if (DIN7_ISR == 2)
#define DIN7_ISR2 (1 << DIN7_BIT)
#endif
#if (DIN7_ISR == -1)
#undef DIN7_ISRREG
#define DIN7_ISRREG EICRA
#define DIN7_ISRA 1
#define DIN7_EIMSK 1
#endif
#if (DIN7_ISR == -2)
#undef DIN7_ISRREG
#define DIN7_ISRREG EICRA
#define DIN7_ISRA 4
#define DIN7_EIMSK 2
#endif
#if (DIN7_ISR == -3)
#undef DIN7_ISRREG
#define DIN7_ISRREG EICRA
#define DIN7_ISRA 16
#define DIN7_EIMSK 4
#endif
#if (DIN7_ISR == -4)
#undef DIN7_ISRREG
#define DIN7_ISRREG EICRA
#define DIN7_ISRA 64
#define DIN7_EIMSK 8
#endif
#if (DIN7_ISR == -5)
#undef DIN7_ISRREG
#define DIN7_ISRREG EICRB
#define DIN7_ISRB 1
#define DIN7_EIMSK 16
#endif
#if (DIN7_ISR == -6)
#undef DIN7_ISRREG
#define DIN7_ISRREG EICRB
#define DIN7_ISRB 4
#define DIN7_EIMSK 32
#endif
#if (DIN7_ISR == -7)
#undef DIN7_ISRREG
#define DIN7_ISRREG EICRB
#define DIN7_ISRB 16
#define DIN7_EIMSK 64
#endif
#if (DIN7_ISR == -8)
#undef DIN7_ISRREG
#define DIN7_ISRREG EICRB
#define DIN7_ISRB 64
#define DIN7_EIMSK 128
#endif
#define DIO137_ISRREG DIN7_ISRREG
#endif

// ISR on change defaults
#ifndef LIMIT_X_ISR0
#define LIMIT_X_ISR0 0
#endif
#ifndef LIMIT_X_ISR1
#define LIMIT_X_ISR1 0
#endif
#ifndef LIMIT_X_ISR2
#define LIMIT_X_ISR2 0
#endif
#ifndef LIMIT_X_ISRA
#define LIMIT_X_ISRA 0
#endif
#ifndef LIMIT_X_ISRB
#define LIMIT_X_ISRB 0
#endif
#ifndef LIMIT_X_EIMSK
#define LIMIT_X_EIMSK 0
#endif
#define LIMIT_X_ISR_MASK (LIMIT_X_ISR0 | LIMIT_X_ISR1 | LIMIT_X_ISR2 | LIMIT_X_ISRA | LIMIT_X_ISRB)
#ifndef LIMIT_X_ISR_MASK
#define LIMIT_X_ISR_MASK 0
#endif
#define DIO100_ISR_MASK LIMIT_X_ISR_MASK
#define DIO100_ISRREG LIMIT_X_ISRREG
#ifndef LIMIT_Y_ISR0
#define LIMIT_Y_ISR0 0
#endif
#ifndef LIMIT_Y_ISR1
#define LIMIT_Y_ISR1 0
#endif
#ifndef LIMIT_Y_ISR2
#define LIMIT_Y_ISR2 0
#endif
#ifndef LIMIT_Y_ISRA
#define LIMIT_Y_ISRA 0
#endif
#ifndef LIMIT_Y_ISRB
#define LIMIT_Y_ISRB 0
#endif
#ifndef LIMIT_Y_EIMSK
#define LIMIT_Y_EIMSK 0
#endif
#define LIMIT_Y_ISR_MASK (LIMIT_Y_ISR0 | LIMIT_Y_ISR1 | LIMIT_Y_ISR2 | LIMIT_Y_ISRA | LIMIT_Y_ISRB)
#ifndef LIMIT_Y_ISR_MASK
#define LIMIT_Y_ISR_MASK 0
#endif
#define DIO101_ISR_MASK LIMIT_Y_ISR_MASK
#define DIO101_ISRREG LIMIT_Y_ISRREG
#ifndef LIMIT_Z_ISR0
#define LIMIT_Z_ISR0 0
#endif
#ifndef LIMIT_Z_ISR1
#define LIMIT_Z_ISR1 0
#endif
#ifndef LIMIT_Z_ISR2
#define LIMIT_Z_ISR2 0
#endif
#ifndef LIMIT_Z_ISRA
#define LIMIT_Z_ISRA 0
#endif
#ifndef LIMIT_Z_ISRB
#define LIMIT_Z_ISRB 0
#endif
#ifndef LIMIT_Z_EIMSK
#define LIMIT_Z_EIMSK 0
#endif
#define LIMIT_Z_ISR_MASK (LIMIT_Z_ISR0 | LIMIT_Z_ISR1 | LIMIT_Z_ISR2 | LIMIT_Z_ISRA | LIMIT_Z_ISRB)
#ifndef LIMIT_Z_ISR_MASK
#define LIMIT_Z_ISR_MASK 0
#endif
#define DIO102_ISR_MASK LIMIT_Z_ISR_MASK
#define DIO102_ISRREG LIMIT_Z_ISRREG
#ifndef LIMIT_X2_ISR0
#define LIMIT_X2_ISR0 0
#endif
#ifndef LIMIT_X2_ISR1
#define LIMIT_X2_ISR1 0
#endif
#ifndef LIMIT_X2_ISR2
#define LIMIT_X2_ISR2 0
#endif
#ifndef LIMIT_X2_ISRA
#define LIMIT_X2_ISRA 0
#endif
#ifndef LIMIT_X2_ISRB
#define LIMIT_X2_ISRB 0
#endif
#ifndef LIMIT_X2_EIMSK
#define LIMIT_X2_EIMSK 0
#endif
#define LIMIT_X2_ISR_MASK (LIMIT_X2_ISR0 | LIMIT_X2_ISR1 | LIMIT_X2_ISR2 | LIMIT_X2_ISRA | LIMIT_X2_ISRB)
#ifndef LIMIT_X2_ISR_MASK
#define LIMIT_X2_ISR_MASK 0
#endif
#define DIO103_ISR_MASK LIMIT_X2_ISR_MASK
#define DIO103_ISRREG LIMIT_X2_ISRREG
#ifndef LIMIT_Y2_ISR0
#define LIMIT_Y2_ISR0 0
#endif
#ifndef LIMIT_Y2_ISR1
#define LIMIT_Y2_ISR1 0
#endif
#ifndef LIMIT_Y2_ISR2
#define LIMIT_Y2_ISR2 0
#endif
#ifndef LIMIT_Y2_ISRA
#define LIMIT_Y2_ISRA 0
#endif
#ifndef LIMIT_Y2_ISRB
#define LIMIT_Y2_ISRB 0
#endif
#ifndef LIMIT_Y2_EIMSK
#define LIMIT_Y2_EIMSK 0
#endif
#define LIMIT_Y2_ISR_MASK (LIMIT_Y2_ISR0 | LIMIT_Y2_ISR1 | LIMIT_Y2_ISR2 | LIMIT_Y2_ISRA | LIMIT_Y2_ISRB)
#ifndef LIMIT_Y2_ISR_MASK
#define LIMIT_Y2_ISR_MASK 0
#endif
#define DIO104_ISR_MASK LIMIT_Y2_ISR_MASK
#define DIO104_ISRREG LIMIT_Y2_ISRREG
#ifndef LIMIT_Z2_ISR0
#define LIMIT_Z2_ISR0 0
#endif
#ifndef LIMIT_Z2_ISR1
#define LIMIT_Z2_ISR1 0
#endif
#ifndef LIMIT_Z2_ISR2
#define LIMIT_Z2_ISR2 0
#endif
#ifndef LIMIT_Z2_ISRA
#define LIMIT_Z2_ISRA 0
#endif
#ifndef LIMIT_Z2_ISRB
#define LIMIT_Z2_ISRB 0
#endif
#ifndef LIMIT_Z2_EIMSK
#define LIMIT_Z2_EIMSK 0
#endif
#define LIMIT_Z2_ISR_MASK (LIMIT_Z2_ISR0 | LIMIT_Z2_ISR1 | LIMIT_Z2_ISR2 | LIMIT_Z2_ISRA | LIMIT_Z2_ISRB)
#ifndef LIMIT_Z2_ISR_MASK
#define LIMIT_Z2_ISR_MASK 0
#endif
#define DIO105_ISR_MASK LIMIT_Z2_ISR_MASK
#define DIO105_ISRREG LIMIT_Z2_ISRREG
#ifndef LIMIT_A_ISR0
#define LIMIT_A_ISR0 0
#endif
#ifndef LIMIT_A_ISR1
#define LIMIT_A_ISR1 0
#endif
#ifndef LIMIT_A_ISR2
#define LIMIT_A_ISR2 0
#endif
#ifndef LIMIT_A_ISRA
#define LIMIT_A_ISRA 0
#endif
#ifndef LIMIT_A_ISRB
#define LIMIT_A_ISRB 0
#endif
#ifndef LIMIT_A_EIMSK
#define LIMIT_A_EIMSK 0
#endif
#define LIMIT_A_ISR_MASK (LIMIT_A_ISR0 | LIMIT_A_ISR1 | LIMIT_A_ISR2 | LIMIT_A_ISRA | LIMIT_A_ISRB)
#ifndef LIMIT_A_ISR_MASK
#define LIMIT_A_ISR_MASK 0
#endif
#define DIO106_ISR_MASK LIMIT_A_ISR_MASK
#define DIO106_ISRREG LIMIT_A_ISRREG
#ifndef LIMIT_B_ISR0
#define LIMIT_B_ISR0 0
#endif
#ifndef LIMIT_B_ISR1
#define LIMIT_B_ISR1 0
#endif
#ifndef LIMIT_B_ISR2
#define LIMIT_B_ISR2 0
#endif
#ifndef LIMIT_B_ISRA
#define LIMIT_B_ISRA 0
#endif
#ifndef LIMIT_B_ISRB
#define LIMIT_B_ISRB 0
#endif
#ifndef LIMIT_B_EIMSK
#define LIMIT_B_EIMSK 0
#endif
#define LIMIT_B_ISR_MASK (LIMIT_B_ISR0 | LIMIT_B_ISR1 | LIMIT_B_ISR2 | LIMIT_B_ISRA | LIMIT_B_ISRB)
#ifndef LIMIT_B_ISR_MASK
#define LIMIT_B_ISR_MASK 0
#endif
#define DIO107_ISR_MASK LIMIT_B_ISR_MASK
#define DIO107_ISRREG LIMIT_B_ISRREG
#ifndef LIMIT_C_ISR0
#define LIMIT_C_ISR0 0
#endif
#ifndef LIMIT_C_ISR1
#define LIMIT_C_ISR1 0
#endif
#ifndef LIMIT_C_ISR2
#define LIMIT_C_ISR2 0
#endif
#ifndef LIMIT_C_ISRA
#define LIMIT_C_ISRA 0
#endif
#ifndef LIMIT_C_ISRB
#define LIMIT_C_ISRB 0
#endif
#ifndef LIMIT_C_EIMSK
#define LIMIT_C_EIMSK 0
#endif
#define LIMIT_C_ISR_MASK (LIMIT_C_ISR0 | LIMIT_C_ISR1 | LIMIT_C_ISR2 | LIMIT_C_ISRA | LIMIT_C_ISRB)
#ifndef LIMIT_C_ISR_MASK
#define LIMIT_C_ISR_MASK 0
#endif
#define DIO108_ISR_MASK LIMIT_C_ISR_MASK
#define DIO108_ISRREG LIMIT_C_ISRREG
#ifndef PROBE_ISR0
#define PROBE_ISR0 0
#endif
#ifndef PROBE_ISR1
#define PROBE_ISR1 0
#endif
#ifndef PROBE_ISR2
#define PROBE_ISR2 0
#endif
#ifndef PROBE_ISRA
#define PROBE_ISRA 0
#endif
#ifndef PROBE_ISRB
#define PROBE_ISRB 0
#endif
#ifndef PROBE_EIMSK
#define PROBE_EIMSK 0
#endif
#define PROBE_ISR_MASK (PROBE_ISR0 | PROBE_ISR1 | PROBE_ISR2 | PROBE_ISRA | PROBE_ISRB)
#ifndef PROBE_ISR_MASK
#define PROBE_ISR_MASK 0
#endif
#define DIO109_ISR_MASK PROBE_ISR_MASK
#define DIO109_ISRREG PROBE_ISRREG
#ifndef ESTOP_ISR0
#define ESTOP_ISR0 0
#endif
#ifndef ESTOP_ISR1
#define ESTOP_ISR1 0
#endif
#ifndef ESTOP_ISR2
#define ESTOP_ISR2 0
#endif
#ifndef ESTOP_ISRA
#define ESTOP_ISRA 0
#endif
#ifndef ESTOP_ISRB
#define ESTOP_ISRB 0
#endif
#ifndef ESTOP_EIMSK
#define ESTOP_EIMSK 0
#endif
#define ESTOP_ISR_MASK (ESTOP_ISR0 | ESTOP_ISR1 | ESTOP_ISR2 | ESTOP_ISRA | ESTOP_ISRB)
#ifndef ESTOP_ISR_MASK
#define ESTOP_ISR_MASK 0
#endif
#define DIO110_ISR_MASK ESTOP_ISR_MASK
#define DIO110_ISRREG ESTOP_ISRREG
#ifndef SAFETY_DOOR_ISR0
#define SAFETY_DOOR_ISR0 0
#endif
#ifndef SAFETY_DOOR_ISR1
#define SAFETY_DOOR_ISR1 0
#endif
#ifndef SAFETY_DOOR_ISR2
#define SAFETY_DOOR_ISR2 0
#endif
#ifndef SAFETY_DOOR_ISRA
#define SAFETY_DOOR_ISRA 0
#endif
#ifndef SAFETY_DOOR_ISRB
#define SAFETY_DOOR_ISRB 0
#endif
#ifndef SAFETY_DOOR_EIMSK
#define SAFETY_DOOR_EIMSK 0
#endif
#define SAFETY_DOOR_ISR_MASK (SAFETY_DOOR_ISR0 | SAFETY_DOOR_ISR1 | SAFETY_DOOR_ISR2 | SAFETY_DOOR_ISRA | SAFETY_DOOR_ISRB)
#ifndef SAFETY_DOOR_ISR_MASK
#define SAFETY_DOOR_ISR_MASK 0
#endif
#define DIO111_ISR_MASK SAFETY_DOOR_ISR_MASK
#define DIO111_ISRREG SAFETY_DOOR_ISRREG
#ifndef FHOLD_ISR0
#define FHOLD_ISR0 0
#endif
#ifndef FHOLD_ISR1
#define FHOLD_ISR1 0
#endif
#ifndef FHOLD_ISR2
#define FHOLD_ISR2 0
#endif
#ifndef FHOLD_ISRA
#define FHOLD_ISRA 0
#endif
#ifndef FHOLD_ISRB
#define FHOLD_ISRB 0
#endif
#ifndef FHOLD_EIMSK
#define FHOLD_EIMSK 0
#endif
#define FHOLD_ISR_MASK (FHOLD_ISR0 | FHOLD_ISR1 | FHOLD_ISR2 | FHOLD_ISRA | FHOLD_ISRB)
#ifndef FHOLD_ISR_MASK
#define FHOLD_ISR_MASK 0
#endif
#define DIO112_ISR_MASK FHOLD_ISR_MASK
#define DIO112_ISRREG FHOLD_ISRREG
#ifndef CS_RES_ISR0
#define CS_RES_ISR0 0
#endif
#ifndef CS_RES_ISR1
#define CS_RES_ISR1 0
#endif
#ifndef CS_RES_ISR2
#define CS_RES_ISR2 0
#endif
#ifndef CS_RES_ISRA
#define CS_RES_ISRA 0
#endif
#ifndef CS_RES_ISRB
#define CS_RES_ISRB 0
#endif
#ifndef CS_RES_EIMSK
#define CS_RES_EIMSK 0
#endif
#define CS_RES_ISR_MASK (CS_RES_ISR0 | CS_RES_ISR1 | CS_RES_ISR2 | CS_RES_ISRA | CS_RES_ISRB)
#ifndef CS_RES_ISR_MASK
#define CS_RES_ISR_MASK 0
#endif
#define DIO113_ISR_MASK CS_RES_ISR_MASK
#define DIO113_ISRREG CS_RES_ISRREG
#ifndef DIN0_ISR0
#define DIN0_ISR0 0
#endif
#ifndef DIN0_ISR1
#define DIN0_ISR1 0
#endif
#ifndef DIN0_ISR2
#define DIN0_ISR2 0
#endif
#ifndef DIN0_ISRA
#define DIN0_ISRA 0
#endif
#ifndef DIN0_ISRB
#define DIN0_ISRB 0
#endif
#ifndef DIN0_EIMSK
#define DIN0_EIMSK 0
#endif
#define DIN0_ISR_MASK (DIN0_ISR0 | DIN0_ISR1 | DIN0_ISR2 | DIN0_ISRA | DIN0_ISRB)
#ifndef DIN0_ISR_MASK
#define DIN0_ISR_MASK 0
#endif
#define DIO130_ISR_MASK DIN0_ISR_MASK
#define DIO130_ISRREG DIN0_ISRREG
#ifndef DIN1_ISR0
#define DIN1_ISR0 0
#endif
#ifndef DIN1_ISR1
#define DIN1_ISR1 0
#endif
#ifndef DIN1_ISR2
#define DIN1_ISR2 0
#endif
#ifndef DIN1_ISRA
#define DIN1_ISRA 0
#endif
#ifndef DIN1_ISRB
#define DIN1_ISRB 0
#endif
#ifndef DIN1_EIMSK
#define DIN1_EIMSK 0
#endif
#define DIN1_ISR_MASK (DIN1_ISR0 | DIN1_ISR1 | DIN1_ISR2 | DIN1_ISRA | DIN1_ISRB)
#ifndef DIN1_ISR_MASK
#define DIN1_ISR_MASK 0
#endif
#define DIO131_ISR_MASK DIN1_ISR_MASK
#define DIO131_ISRREG DIN1_ISRREG
#ifndef DIN2_ISR0
#define DIN2_ISR0 0
#endif
#ifndef DIN2_ISR1
#define DIN2_ISR1 0
#endif
#ifndef DIN2_ISR2
#define DIN2_ISR2 0
#endif
#ifndef DIN2_ISRA
#define DIN2_ISRA 0
#endif
#ifndef DIN2_ISRB
#define DIN2_ISRB 0
#endif
#ifndef DIN2_EIMSK
#define DIN2_EIMSK 0
#endif
#define DIN2_ISR_MASK (DIN2_ISR0 | DIN2_ISR1 | DIN2_ISR2 | DIN2_ISRA | DIN2_ISRB)
#ifndef DIN2_ISR_MASK
#define DIN2_ISR_MASK 0
#endif
#define DIO132_ISR_MASK DIN2_ISR_MASK
#define DIO132_ISRREG DIN2_ISRREG
#ifndef DIN3_ISR0
#define DIN3_ISR0 0
#endif
#ifndef DIN3_ISR1
#define DIN3_ISR1 0
#endif
#ifndef DIN3_ISR2
#define DIN3_ISR2 0
#endif
#ifndef DIN3_ISRA
#define DIN3_ISRA 0
#endif
#ifndef DIN3_ISRB
#define DIN3_ISRB 0
#endif
#ifndef DIN3_EIMSK
#define DIN3_EIMSK 0
#endif
#define DIN3_ISR_MASK (DIN3_ISR0 | DIN3_ISR1 | DIN3_ISR2 | DIN3_ISRA | DIN3_ISRB)
#ifndef DIN3_ISR_MASK
#define DIN3_ISR_MASK 0
#endif
#define DIO133_ISR_MASK DIN3_ISR_MASK
#define DIO133_ISRREG DIN3_ISRREG
#ifndef DIN4_ISR0
#define DIN4_ISR0 0
#endif
#ifndef DIN4_ISR1
#define DIN4_ISR1 0
#endif
#ifndef DIN4_ISR2
#define DIN4_ISR2 0
#endif
#ifndef DIN4_ISRA
#define DIN4_ISRA 0
#endif
#ifndef DIN4_ISRB
#define DIN4_ISRB 0
#endif
#ifndef DIN4_EIMSK
#define DIN4_EIMSK 0
#endif
#define DIN4_ISR_MASK (DIN4_ISR0 | DIN4_ISR1 | DIN4_ISR2 | DIN4_ISRA | DIN4_ISRB)
#ifndef DIN4_ISR_MASK
#define DIN4_ISR_MASK 0
#endif
#define DIO134_ISR_MASK DIN4_ISR_MASK
#define DIO134_ISRREG DIN4_ISRREG
#ifndef DIN5_ISR0
#define DIN5_ISR0 0
#endif
#ifndef DIN5_ISR1
#define DIN5_ISR1 0
#endif
#ifndef DIN5_ISR2
#define DIN5_ISR2 0
#endif
#ifndef DIN5_ISRA
#define DIN5_ISRA 0
#endif
#ifndef DIN5_ISRB
#define DIN5_ISRB 0
#endif
#ifndef DIN5_EIMSK
#define DIN5_EIMSK 0
#endif
#define DIN5_ISR_MASK (DIN5_ISR0 | DIN5_ISR1 | DIN5_ISR2 | DIN5_ISRA | DIN5_ISRB)
#ifndef DIN5_ISR_MASK
#define DIN5_ISR_MASK 0
#endif
#define DIO135_ISR_MASK DIN5_ISR_MASK
#define DIO135_ISRREG DIN5_ISRREG
#ifndef DIN6_ISR0
#define DIN6_ISR0 0
#endif
#ifndef DIN6_ISR1
#define DIN6_ISR1 0
#endif
#ifndef DIN6_ISR2
#define DIN6_ISR2 0
#endif
#ifndef DIN6_ISRA
#define DIN6_ISRA 0
#endif
#ifndef DIN6_ISRB
#define DIN6_ISRB 0
#endif
#ifndef DIN6_EIMSK
#define DIN6_EIMSK 0
#endif
#define DIN6_ISR_MASK (DIN6_ISR0 | DIN6_ISR1 | DIN6_ISR2 | DIN6_ISRA | DIN6_ISRB)
#ifndef DIN6_ISR_MASK
#define DIN6_ISR_MASK 0
#endif
#define DIO136_ISR_MASK DIN6_ISR_MASK
#define DIO136_ISRREG DIN6_ISRREG
#ifndef DIN7_ISR0
#define DIN7_ISR0 0
#endif
#ifndef DIN7_ISR1
#define DIN7_ISR1 0
#endif
#ifndef DIN7_ISR2
#define DIN7_ISR2 0
#endif
#ifndef DIN7_ISRA
#define DIN7_ISRA 0
#endif
#ifndef DIN7_ISRB
#define DIN7_ISRB 0
#endif
#ifndef DIN7_EIMSK
#define DIN7_EIMSK 0
#endif
#define DIN7_ISR_MASK (DIN7_ISR0 | DIN7_ISR1 | DIN7_ISR2 | DIN7_ISRA | DIN7_ISRB)
#ifndef DIN7_ISR_MASK
#define DIN7_ISR_MASK 0
#endif
#define DIO137_ISR_MASK DIN7_ISR_MASK
#define DIO137_ISRREG DIN7_ISRREG

// PWM pins
#define PWMENMASKA 0x80
#define PWMENMASKB 0x20
#define PWMENMASKC 0x08
#define pwmenmask(x) PWMENMASK##x
#define __pwmenmask__(x) pwmenmask(x)

#if (defined(PWM0_CHANNEL) && defined(PWM0_TIMER) && defined(PWM0))
#define PWM0_OCRREG (__ocrreg__(PWM0_TIMER, PWM0_CHANNEL))
#define PWM0_TMRAREG (__tmrareg__(PWM0_TIMER))
#define PWM0_TMRBREG (__tmrbreg__(PWM0_TIMER))
#define PWM0_ENABLE_MASK __pwmenmask__(PWM0_CHANNEL)
#if (PWM0_TIMER == 2)
#define PWM0_PRESCALLER 0x04
#elif (PWM0_TIMER == 0)
#define PWM0_PRESCALLER 0x03
#else
#define PWM0_PRESCALLER 0x0B
#endif
#if (PWM0_TIMER == 0 || PWM0_TIMER == 2)
#define PWM0_MODE 0x03
#else
#define PWM0_MODE 0x01
#endif
#define DIO25_CHANNEL PWM0_CHANNEL
#define DIO25_TIMER PWM0_TIMER
#define DIO25_OCRREG PWM0_OCRREG
#define DIO25_TMRAREG PWM0_TMRAREG
#define DIO25_TMRBREG PWM0_TMRBREG
#define DIO25_ENABLE_MASK PWM0_ENABLE_MASK
#define DIO25_MODE PWM0_MODE
#define DIO25_PRESCALLER PWM0_PRESCALLER
#endif
#if (defined(PWM1_CHANNEL) && defined(PWM1_TIMER) && defined(PWM1))
#define PWM1_OCRREG (__ocrreg__(PWM1_TIMER, PWM1_CHANNEL))
#define PWM1_TMRAREG (__tmrareg__(PWM1_TIMER))
#define PWM1_TMRBREG (__tmrbreg__(PWM1_TIMER))
#define PWM1_ENABLE_MASK __pwmenmask__(PWM1_CHANNEL)
#if (PWM1_TIMER == 2)
#define PWM1_PRESCALLER 0x04
#elif (PWM1_TIMER == 0)
#define PWM1_PRESCALLER 0x03
#else
#define PWM1_PRESCALLER 0x0B
#endif
#if (PWM1_TIMER == 0 || PWM1_TIMER == 2)
#define PWM1_MODE 0x03
#else
#define PWM1_MODE 0x01
#endif
#define DIO26_CHANNEL PWM1_CHANNEL
#define DIO26_TIMER PWM1_TIMER
#define DIO26_OCRREG PWM1_OCRREG
#define DIO26_TMRAREG PWM1_TMRAREG
#define DIO26_TMRBREG PWM1_TMRBREG
#define DIO26_ENABLE_MASK PWM1_ENABLE_MASK
#define DIO26_MODE PWM1_MODE
#define DIO26_PRESCALLER PWM1_PRESCALLER
#endif
#if (defined(PWM2_CHANNEL) && defined(PWM2_TIMER) && defined(PWM2))
#define PWM2_OCRREG (__ocrreg__(PWM2_TIMER, PWM2_CHANNEL))
#define PWM2_TMRAREG (__tmrareg__(PWM2_TIMER))
#define PWM2_TMRBREG (__tmrbreg__(PWM2_TIMER))
#define PWM2_ENABLE_MASK __pwmenmask__(PWM2_CHANNEL)
#if (PWM2_TIMER == 2)
#define PWM2_PRESCALLER 0x04
#elif (PWM2_TIMER == 0)
#define PWM2_PRESCALLER 0x03
#else
#define PWM2_PRESCALLER 0x0B
#endif
#if (PWM2_TIMER == 0 || PWM2_TIMER == 2)
#define PWM2_MODE 0x03
#else
#define PWM2_MODE 0x01
#endif
#define DIO27_CHANNEL PWM2_CHANNEL
#define DIO27_TIMER PWM2_TIMER
#define DIO27_OCRREG PWM2_OCRREG
#define DIO27_TMRAREG PWM2_TMRAREG
#define DIO27_TMRBREG PWM2_TMRBREG
#define DIO27_ENABLE_MASK PWM2_ENABLE_MASK
#define DIO27_MODE PWM2_MODE
#define DIO27_PRESCALLER PWM2_PRESCALLER
#endif
#if (defined(PWM3_CHANNEL) && defined(PWM3_TIMER) && defined(PWM3))
#define PWM3_OCRREG (__ocrreg__(PWM3_TIMER, PWM3_CHANNEL))
#define PWM3_TMRAREG (__tmrareg__(PWM3_TIMER))
#define PWM3_TMRBREG (__tmrbreg__(PWM3_TIMER))
#define PWM3_ENABLE_MASK __pwmenmask__(PWM3_CHANNEL)
#if (PWM3_TIMER == 2)
#define PWM3_PRESCALLER 0x04
#elif (PWM3_TIMER == 0)
#define PWM3_PRESCALLER 0x03
#else
#define PWM3_PRESCALLER 0x0B
#endif
#if (PWM3_TIMER == 0 || PWM3_TIMER == 2)
#define PWM3_MODE 0x03
#else
#define PWM3_MODE 0x01
#endif
#define DIO28_CHANNEL PWM3_CHANNEL
#define DIO28_TIMER PWM3_TIMER
#define DIO28_OCRREG PWM3_OCRREG
#define DIO28_TMRAREG PWM3_TMRAREG
#define DIO28_TMRBREG PWM3_TMRBREG
#define DIO28_ENABLE_MASK PWM3_ENABLE_MASK
#define DIO28_MODE PWM3_MODE
#define DIO28_PRESCALLER PWM3_PRESCALLER
#endif
#if (defined(PWM4_CHANNEL) && defined(PWM4_TIMER) && defined(PWM4))
#define PWM4_OCRREG (__ocrreg__(PWM4_TIMER, PWM4_CHANNEL))
#define PWM4_TMRAREG (__tmrareg__(PWM4_TIMER))
#define PWM4_TMRBREG (__tmrbreg__(PWM4_TIMER))
#define PWM4_ENABLE_MASK __pwmenmask__(PWM4_CHANNEL)
#if (PWM4_TIMER == 2)
#define PWM4_PRESCALLER 0x04
#elif (PWM4_TIMER == 0)
#define PWM4_PRESCALLER 0x03
#else
#define PWM4_PRESCALLER 0x0B
#endif
#if (PWM4_TIMER == 0 || PWM4_TIMER == 2)
#define PWM4_MODE 0x03
#else
#define PWM4_MODE 0x01
#endif
#define DIO29_CHANNEL PWM4_CHANNEL
#define DIO29_TIMER PWM4_TIMER
#define DIO29_OCRREG PWM4_OCRREG
#define DIO29_TMRAREG PWM4_TMRAREG
#define DIO29_TMRBREG PWM4_TMRBREG
#define DIO29_ENABLE_MASK PWM4_ENABLE_MASK
#define DIO29_MODE PWM4_MODE
#define DIO29_PRESCALLER PWM4_PRESCALLER
#endif
#if (defined(PWM5_CHANNEL) && defined(PWM5_TIMER) && defined(PWM5))
#define PWM5_OCRREG (__ocrreg__(PWM5_TIMER, PWM5_CHANNEL))
#define PWM5_TMRAREG (__tmrareg__(PWM5_TIMER))
#define PWM5_TMRBREG (__tmrbreg__(PWM5_TIMER))
#define PWM5_ENABLE_MASK __pwmenmask__(PWM5_CHANNEL)
#if (PWM5_TIMER == 2)
#define PWM5_PRESCALLER 0x04
#elif (PWM5_TIMER == 0)
#define PWM5_PRESCALLER 0x03
#else
#define PWM5_PRESCALLER 0x0B
#endif
#if (PWM5_TIMER == 0 || PWM5_TIMER == 2)
#define PWM5_MODE 0x03
#else
#define PWM5_MODE 0x01
#endif
#define DIO30_CHANNEL PWM5_CHANNEL
#define DIO30_TIMER PWM5_TIMER
#define DIO30_OCRREG PWM5_OCRREG
#define DIO30_TMRAREG PWM5_TMRAREG
#define DIO30_TMRBREG PWM5_TMRBREG
#define DIO30_ENABLE_MASK PWM5_ENABLE_MASK
#define DIO30_MODE PWM5_MODE
#define DIO30_PRESCALLER PWM5_PRESCALLER
#endif
#if (defined(PWM6_CHANNEL) && defined(PWM6_TIMER) && defined(PWM6))
#define PWM6_OCRREG (__ocrreg__(PWM6_TIMER, PWM6_CHANNEL))
#define PWM6_TMRAREG (__tmrareg__(PWM6_TIMER))
#define PWM6_TMRBREG (__tmrbreg__(PWM6_TIMER))
#define PWM6_ENABLE_MASK __pwmenmask__(PWM6_CHANNEL)
#if (PWM6_TIMER == 2)
#define PWM6_PRESCALLER 0x04
#elif (PWM6_TIMER == 0)
#define PWM6_PRESCALLER 0x03
#else
#define PWM6_PRESCALLER 0x0B
#endif
#if (PWM6_TIMER == 0 || PWM6_TIMER == 2)
#define PWM6_MODE 0x03
#else
#define PWM6_MODE 0x01
#endif
#define DIO31_CHANNEL PWM6_CHANNEL
#define DIO31_TIMER PWM6_TIMER
#define DIO31_OCRREG PWM6_OCRREG
#define DIO31_TMRAREG PWM6_TMRAREG
#define DIO31_TMRBREG PWM6_TMRBREG
#define DIO31_ENABLE_MASK PWM6_ENABLE_MASK
#define DIO31_MODE PWM6_MODE
#define DIO31_PRESCALLER PWM6_PRESCALLER
#endif
#if (defined(PWM7_CHANNEL) && defined(PWM7_TIMER) && defined(PWM7))
#define PWM7_OCRREG (__ocrreg__(PWM7_TIMER, PWM7_CHANNEL))
#define PWM7_TMRAREG (__tmrareg__(PWM7_TIMER))
#define PWM7_TMRBREG (__tmrbreg__(PWM7_TIMER))
#define PWM7_ENABLE_MASK __pwmenmask__(PWM7_CHANNEL)
#if (PWM7_TIMER == 2)
#define PWM7_PRESCALLER 0x04
#elif (PWM7_TIMER == 0)
#define PWM7_PRESCALLER 0x03
#else
#define PWM7_PRESCALLER 0x0B
#endif
#if (PWM7_TIMER == 0 || PWM7_TIMER == 2)
#define PWM7_MODE 0x03
#else
#define PWM7_MODE 0x01
#endif
#define DIO32_CHANNEL PWM7_CHANNEL
#define DIO32_TIMER PWM7_TIMER
#define DIO32_OCRREG PWM7_OCRREG
#define DIO32_TMRAREG PWM7_TMRAREG
#define DIO32_TMRBREG PWM7_TMRBREG
#define DIO32_ENABLE_MASK PWM7_ENABLE_MASK
#define DIO32_MODE PWM7_MODE
#define DIO32_PRESCALLER PWM7_PRESCALLER
#endif
#if (defined(PWM8_CHANNEL) && defined(PWM8_TIMER) && defined(PWM8))
#define PWM8_OCRREG (__ocrreg__(PWM8_TIMER, PWM8_CHANNEL))
#define PWM8_TMRAREG (__tmrareg__(PWM8_TIMER))
#define PWM8_TMRBREG (__tmrbreg__(PWM8_TIMER))
#define PWM8_ENABLE_MASK __pwmenmask__(PWM8_CHANNEL)
#if (PWM8_TIMER == 2)
#define PWM8_PRESCALLER 0x04
#elif (PWM8_TIMER == 0)
#define PWM8_PRESCALLER 0x03
#else
#define PWM8_PRESCALLER 0x0B
#endif
#if (PWM8_TIMER == 0 || PWM8_TIMER == 2)
#define PWM8_MODE 0x03
#else
#define PWM8_MODE 0x01
#endif
#define DIO33_CHANNEL PWM8_CHANNEL
#define DIO33_TIMER PWM8_TIMER
#define DIO33_OCRREG PWM8_OCRREG
#define DIO33_TMRAREG PWM8_TMRAREG
#define DIO33_TMRBREG PWM8_TMRBREG
#define DIO33_ENABLE_MASK PWM8_ENABLE_MASK
#define DIO33_MODE PWM8_MODE
#define DIO33_PRESCALLER PWM8_PRESCALLER
#endif
#if (defined(PWM9_CHANNEL) && defined(PWM9_TIMER) && defined(PWM9))
#define PWM9_OCRREG (__ocrreg__(PWM9_TIMER, PWM9_CHANNEL))
#define PWM9_TMRAREG (__tmrareg__(PWM9_TIMER))
#define PWM9_TMRBREG (__tmrbreg__(PWM9_TIMER))
#define PWM9_ENABLE_MASK __pwmenmask__(PWM9_CHANNEL)
#if (PWM9_TIMER == 2)
#define PWM9_PRESCALLER 0x04
#elif (PWM9_TIMER == 0)
#define PWM9_PRESCALLER 0x03
#else
#define PWM9_PRESCALLER 0x0B
#endif
#if (PWM9_TIMER == 0 || PWM9_TIMER == 2)
#define PWM9_MODE 0x03
#else
#define PWM9_MODE 0x01
#endif
#define DIO34_CHANNEL PWM9_CHANNEL
#define DIO34_TIMER PWM9_TIMER
#define DIO34_OCRREG PWM9_OCRREG
#define DIO34_TMRAREG PWM9_TMRAREG
#define DIO34_TMRBREG PWM9_TMRBREG
#define DIO34_ENABLE_MASK PWM9_ENABLE_MASK
#define DIO34_MODE PWM9_MODE
#define DIO34_PRESCALLER PWM9_PRESCALLER
#endif
#if (defined(PWM10_CHANNEL) && defined(PWM10_TIMER) && defined(PWM10))
#define PWM10_OCRREG (__ocrreg__(PWM10_TIMER, PWM10_CHANNEL))
#define PWM10_TMRAREG (__tmrareg__(PWM10_TIMER))
#define PWM10_TMRBREG (__tmrbreg__(PWM10_TIMER))
#define PWM10_ENABLE_MASK __pwmenmask__(PWM10_CHANNEL)
#if (PWM10_TIMER == 2)
#define PWM10_PRESCALLER 0x04
#elif (PWM10_TIMER == 0)
#define PWM10_PRESCALLER 0x03
#else
#define PWM10_PRESCALLER 0x0B
#endif
#if (PWM10_TIMER == 0 || PWM10_TIMER == 2)
#define PWM10_MODE 0x03
#else
#define PWM10_MODE 0x01
#endif
#define DIO35_CHANNEL PWM10_CHANNEL
#define DIO35_TIMER PWM10_TIMER
#define DIO35_OCRREG PWM10_OCRREG
#define DIO35_TMRAREG PWM10_TMRAREG
#define DIO35_TMRBREG PWM10_TMRBREG
#define DIO35_ENABLE_MASK PWM10_ENABLE_MASK
#define DIO35_MODE PWM10_MODE
#define DIO35_PRESCALLER PWM10_PRESCALLER
#endif
#if (defined(PWM11_CHANNEL) && defined(PWM11_TIMER) && defined(PWM11))
#define PWM11_OCRREG (__ocrreg__(PWM11_TIMER, PWM11_CHANNEL))
#define PWM11_TMRAREG (__tmrareg__(PWM11_TIMER))
#define PWM11_TMRBREG (__tmrbreg__(PWM11_TIMER))
#define PWM11_ENABLE_MASK __pwmenmask__(PWM11_CHANNEL)
#if (PWM11_TIMER == 2)
#define PWM11_PRESCALLER 0x04
#elif (PWM11_TIMER == 0)
#define PWM11_PRESCALLER 0x03
#else
#define PWM11_PRESCALLER 0x0B
#endif
#if (PWM11_TIMER == 0 || PWM11_TIMER == 2)
#define PWM11_MODE 0x03
#else
#define PWM11_MODE 0x01
#endif
#define DIO36_CHANNEL PWM11_CHANNEL
#define DIO36_TIMER PWM11_TIMER
#define DIO36_OCRREG PWM11_OCRREG
#define DIO36_TMRAREG PWM11_TMRAREG
#define DIO36_TMRBREG PWM11_TMRBREG
#define DIO36_ENABLE_MASK PWM11_ENABLE_MASK
#define DIO36_MODE PWM11_MODE
#define DIO36_PRESCALLER PWM11_PRESCALLER
#endif
#if (defined(PWM12_CHANNEL) && defined(PWM12_TIMER) && defined(PWM12))
#define PWM12_OCRREG (__ocrreg__(PWM12_TIMER, PWM12_CHANNEL))
#define PWM12_TMRAREG (__tmrareg__(PWM12_TIMER))
#define PWM12_TMRBREG (__tmrbreg__(PWM12_TIMER))
#define PWM12_ENABLE_MASK __pwmenmask__(PWM12_CHANNEL)
#if (PWM12_TIMER == 2)
#define PWM12_PRESCALLER 0x04
#elif (PWM12_TIMER == 0)
#define PWM12_PRESCALLER 0x03
#else
#define PWM12_PRESCALLER 0x0B
#endif
#if (PWM12_TIMER == 0 || PWM12_TIMER == 2)
#define PWM12_MODE 0x03
#else
#define PWM12_MODE 0x01
#endif
#define DIO37_CHANNEL PWM12_CHANNEL
#define DIO37_TIMER PWM12_TIMER
#define DIO37_OCRREG PWM12_OCRREG
#define DIO37_TMRAREG PWM12_TMRAREG
#define DIO37_TMRBREG PWM12_TMRBREG
#define DIO37_ENABLE_MASK PWM12_ENABLE_MASK
#define DIO37_MODE PWM12_MODE
#define DIO37_PRESCALLER PWM12_PRESCALLER
#endif
#if (defined(PWM13_CHANNEL) && defined(PWM13_TIMER) && defined(PWM13))
#define PWM13_OCRREG (__ocrreg__(PWM13_TIMER, PWM13_CHANNEL))
#define PWM13_TMRAREG (__tmrareg__(PWM13_TIMER))
#define PWM13_TMRBREG (__tmrbreg__(PWM13_TIMER))
#define PWM13_ENABLE_MASK __pwmenmask__(PWM13_CHANNEL)
#if (PWM13_TIMER == 2)
#define PWM13_PRESCALLER 0x04
#elif (PWM13_TIMER == 0)
#define PWM13_PRESCALLER 0x03
#else
#define PWM13_PRESCALLER 0x0B
#endif
#if (PWM13_TIMER == 0 || PWM13_TIMER == 2)
#define PWM13_MODE 0x03
#else
#define PWM13_MODE 0x01
#endif
#define DIO38_CHANNEL PWM13_CHANNEL
#define DIO38_TIMER PWM13_TIMER
#define DIO38_OCRREG PWM13_OCRREG
#define DIO38_TMRAREG PWM13_TMRAREG
#define DIO38_TMRBREG PWM13_TMRBREG
#define DIO38_ENABLE_MASK PWM13_ENABLE_MASK
#define DIO38_MODE PWM13_MODE
#define DIO38_PRESCALLER PWM13_PRESCALLER
#endif
#if (defined(PWM14_CHANNEL) && defined(PWM14_TIMER) && defined(PWM14))
#define PWM14_OCRREG (__ocrreg__(PWM14_TIMER, PWM14_CHANNEL))
#define PWM14_TMRAREG (__tmrareg__(PWM14_TIMER))
#define PWM14_TMRBREG (__tmrbreg__(PWM14_TIMER))
#define PWM14_ENABLE_MASK __pwmenmask__(PWM14_CHANNEL)
#if (PWM14_TIMER == 2)
#define PWM14_PRESCALLER 0x04
#elif (PWM14_TIMER == 0)
#define PWM14_PRESCALLER 0x03
#else
#define PWM14_PRESCALLER 0x0B
#endif
#if (PWM14_TIMER == 0 || PWM14_TIMER == 2)
#define PWM14_MODE 0x03
#else
#define PWM14_MODE 0x01
#endif
#define DIO39_CHANNEL PWM14_CHANNEL
#define DIO39_TIMER PWM14_TIMER
#define DIO39_OCRREG PWM14_OCRREG
#define DIO39_TMRAREG PWM14_TMRAREG
#define DIO39_TMRBREG PWM14_TMRBREG
#define DIO39_ENABLE_MASK PWM14_ENABLE_MASK
#define DIO39_MODE PWM14_MODE
#define DIO39_PRESCALLER PWM14_PRESCALLER
#endif
#if (defined(PWM15_CHANNEL) && defined(PWM15_TIMER) && defined(PWM15))
#define PWM15_OCRREG (__ocrreg__(PWM15_TIMER, PWM15_CHANNEL))
#define PWM15_TMRAREG (__tmrareg__(PWM15_TIMER))
#define PWM15_TMRBREG (__tmrbreg__(PWM15_TIMER))
#define PWM15_ENABLE_MASK __pwmenmask__(PWM15_CHANNEL)
#if (PWM15_TIMER == 2)
#define PWM15_PRESCALLER 0x04
#elif (PWM15_TIMER == 0)
#define PWM15_PRESCALLER 0x03
#else
#define PWM15_PRESCALLER 0x0B
#endif
#if (PWM15_TIMER == 0 || PWM15_TIMER == 2)
#define PWM15_MODE 0x03
#else
#define PWM15_MODE 0x01
#endif
#define DIO40_CHANNEL PWM15_CHANNEL
#define DIO40_TIMER PWM15_TIMER
#define DIO40_OCRREG PWM15_OCRREG
#define DIO40_TMRAREG PWM15_TMRAREG
#define DIO40_TMRBREG PWM15_TMRBREG
#define DIO40_ENABLE_MASK PWM15_ENABLE_MASK
#define DIO40_MODE PWM15_MODE
#define DIO40_PRESCALLER PWM15_PRESCALLER
#endif

// Analog channel and prescaller
#ifdef ANALOG0
#define DIO114_CHANNEL ANALOG0_CHANNEL
#endif
#ifdef ANALOG1
#define DIO115_CHANNEL ANALOG1_CHANNEL
#endif
#ifdef ANALOG2
#define DIO116_CHANNEL ANALOG2_CHANNEL
#endif
#ifdef ANALOG3
#define DIO117_CHANNEL ANALOG3_CHANNEL
#endif
#ifdef ANALOG4
#define DIO118_CHANNEL ANALOG4_CHANNEL
#endif
#ifdef ANALOG5
#define DIO119_CHANNEL ANALOG5_CHANNEL
#endif
#ifdef ANALOG6
#define DIO120_CHANNEL ANALOG6_CHANNEL
#endif
#ifdef ANALOG7
#define DIO121_CHANNEL ANALOG7_CHANNEL
#endif
#ifdef ANALOG8
#define DIO122_CHANNEL ANALOG8_CHANNEL
#endif
#ifdef ANALOG9
#define DIO123_CHANNEL ANALOG9_CHANNEL
#endif
#ifdef ANALOG10
#define DIO124_CHANNEL ANALOG10_CHANNEL
#endif
#ifdef ANALOG11
#define DIO125_CHANNEL ANALOG11_CHANNEL
#endif
#ifdef ANALOG12
#define DIO126_CHANNEL ANALOG12_CHANNEL
#endif
#ifdef ANALOG13
#define DIO127_CHANNEL ANALOG13_CHANNEL
#endif
#ifdef ANALOG14
#define DIO128_CHANNEL ANALOG14_CHANNEL
#endif
#ifdef ANALOG15
#define DIO129_CHANNEL ANALOG15_CHANNEL
#endif

#if (defined(TX) && defined(RX))
#define MCU_HAS_UART
#endif

#if (defined(TX2) && defined(RX2))
#define MCU_HAS_UART2
#endif

#ifndef USART0_RX_vect
#define USART0_RX_vect USART_RX_vect
#endif
#ifndef USART0_UDRE_vect
#define USART0_UDRE_vect USART_UDRE_vect
#endif

// COM registers
#ifdef MCU_HAS_UART
#ifndef UART_PORT
#define COM_RX_vect USART0_RX_vect
#define COM_TX_vect USART0_UDRE_vect
#define UART_PORT 0
#else
#define COM_RX_vect __comrxvect__(UART_PORT)
#define COM_TX_vect __comtxvect__(UART_PORT)
#endif
#define COM_OUTREG __udrreg__(UART_PORT)
#define COM_INREG __udrreg__(UART_PORT)
#define UCSRB_REG __ucsrbreg__(UART_PORT)
#define UCSRA_REG __ucsrareg__(UART_PORT)
#define UDRIE_BIT __udriebit__(UART_PORT)
#define U2X_BIT __u2xbit__(UART_PORT)
#define UBRRH_REG __ubrrhreg__(UART_PORT)
#define UBRRL_REG __ubrrlreg__(UART_PORT)
#define RXEN_BIT __rxenbit__(UART_PORT)
#define TXEN_BIT __txenbit__(UART_PORT)
#define RXCIE_BIT __rxciebit__(UART_PORT)
#define UDRE_BIT __udrebit__(UART_PORT)
#define RXC_BIT __rxcbit__(UART_PORT)
#endif

#ifdef MCU_HAS_UART2
#ifndef BAUDRATE2
#define BAUDRATE2 BAUDRATE
#endif
#ifndef UART2_PORT
#define COM2_RX_vect USART_RX_vect
#define COM2_TX_vect USART_UDRE_vect
#define UART2_PORT 0
#else
#define COM2_RX_vect __comrxvect__(UART2_PORT)
#define COM2_TX_vect __comtxvect__(UART2_PORT)
#endif
#define COM2_OUTREG __udrreg__(UART2_PORT)
#define COM2_INREG __udrreg__(UART2_PORT)
#define UCSRB_REG_2 __ucsrbreg__(UART2_PORT)
#define UCSRA_REG_2 __ucsrareg__(UART2_PORT)
#define UDRIE_BIT_2 __udriebit__(UART2_PORT)
#define U2X_BIT_2 __u2xbit__(UART2_PORT)
#define UBRRH_REG_2 __ubrrhreg__(UART2_PORT)
#define UBRRL_REG_2 __ubrrlreg__(UART2_PORT)
#define RXEN_BIT_2 __rxenbit__(UART2_PORT)
#define TXEN_BIT_2 __txenbit__(UART2_PORT)
#define RXCIE_BIT_2 __rxciebit__(UART2_PORT)
#define UDRE_BIT_2 __udrebit__(UART2_PORT)
#define RXC_BIT_2 __rxcbit__(UART2_PORT)
#endif

// SPI
#if (defined(SPI_CLK) && defined(SPI_SDI) && defined(SPI_SDO))
#define MCU_HAS_SPI
#ifndef SPI_MODE
#define SPI_MODE 0
#endif
#ifndef SPI_FREQ
#define SPI_FREQ 1000000UL
#endif
// sets the prescaler that is closer to the desired frequency
#define SPI_DIV (F_CPU / SPI_FREQ)
#if (SPI_DIV < 2)
#define SPCR_VAL 0
#define SPSR_VAL 1
#elif (SPI_DIV < 4)
#define SPCR_VAL 0
#define SPSR_VAL 0
#elif (SPI_DIV < 8)
#define SPCR_VAL 1
#define SPSR_VAL 1
#elif (SPI_DIV < 16)
#define SPCR_VAL 1
#define SPSR_VAL 0
#elif (SPI_DIV < 32)
#define SPCR_VAL 2
#define SPSR_VAL 1
#elif (SPI_DIV < 64)
#define SPCR_VAL 2
#define SPSR_VAL 0
#else
#define SPCR_VAL 3
#define SPSR_VAL 0
#endif
#endif

#if (defined(SPI2_CLK) && defined(SPI2_SDI) && defined(SPI2_SDO))
#error "Atmega only has one SPI port available"
// #define MCU_HAS_SPI2
// #ifndef SPI2_MODE
// #define SPI2_MODE 0
// #endif
// #ifndef SPI2_FREQ
// #define SPI2_FREQ 1000000UL
// #endif
// // sets the prescaler that is closer to the desired frequency
// #define SPI2_DIV (F_CPU / SPI2_FREQ)
// #if (SPI2_DIV < 2)
// #define SPCR2_VAL 0
// #define SPSR2_VAL 1
// #elif (SPI2_DIV < 4)
// #define SPCR2_VAL 0
// #define SPSR2_VAL 0
// #elif (SPI2_DIV < 8)
// #define SPCR2_VAL 1
// #define SPSR2_VAL 1
// #elif (SPI2_DIV < 16)
// #define SPCR2_VAL 1
// #define SPSR2_VAL 0
// #elif (SPI2_DIV < 32)
// #define SPCR2_VAL 2
// #define SPSR2_VAL 1
// #elif (SPI2_DIV < 64)
// #define SPCR2_VAL 2
// #define SPSR2_VAL 0
// #else
// #define SPCR2_VAL 3
// #define SPSR2_VAL 0
// #endif
#endif

// I2C
#if (defined(I2C_CLK) && defined(I2C_DATA))
#define MCU_HAS_I2C
#define MCU_SUPPORTS_I2C_SLAVE
#ifndef I2C_ADDRESS
#define I2C_ADDRESS 0
#endif
#ifndef I2C_FREQ
#define I2C_FREQ 400000UL
#endif
// I2C freq
// #if (I2C_FREQ < 5000UL)
// #define I2C_PRESC 3
// #define I2C_DIV (F_CPU / (I2C_FREQ << 6))
// #elif (I2C_FREQ < 20000UL)
// #define I2C_PRESC 2
// #define I2C_DIV (F_CPU / (I2C_FREQ << 4))
// #elif (I2C_FREQ < 80000UL)
// #define I2C_PRESC 1
// #define I2C_DIV (F_CPU / (I2C_FREQ << 2))
// #else
// #define I2C_PRESC 0
// #define I2C_DIV (F_CPU / I2C_FREQ)
// #endif
#endif

// Timer registers
#ifndef ITP_TIMER
#define ITP_TIMER 1
#endif
#define ITP_COMPB_vect __timerbvect__(ITP_TIMER)
#define ITP_COMPA_vect __timeravect__(ITP_TIMER)
#define ITP_TCNT __tcntreg__(ITP_TIMER)
#define ITP_TCCRA __tmrareg__(ITP_TIMER)
#define ITP_TCCRB __tmrbreg__(ITP_TIMER)
#define ITP_OCRA __ocrreg__(ITP_TIMER, A)
#define ITP_OCRB __ocrreg__(ITP_TIMER, B)
#define ITP_TIFR __tifrreg__(ITP_TIMER)
#define ITP_TIMSK __timskreg__(ITP_TIMER)
#define ITP_OCIEB __ociebreg__(ITP_TIMER)
#define ITP_OCIEA __ocieareg__(ITP_TIMER)

#ifndef RTC_TIMER
// Setup the RTC Timer used by µCNC to provide an (mostly) accurate time base for all time dependent functions
#define RTC_TIMER 0
#endif
#define RTC_COMPB_vect __timerbvect__(RTC_TIMER)
#define RTC_COMPA_vect __timeravect__(RTC_TIMER)
#define RTC_TCNT __tcntreg__(RTC_TIMER)
#define RTC_TCCRA __tmrareg__(RTC_TIMER)
#define RTC_TCCRB __tmrbreg__(RTC_TIMER)
#define RTC_OCRA __ocrreg__(RTC_TIMER, A)
#define RTC_OCRB __ocrreg__(RTC_TIMER, B)
#define RTC_TIFR __tifrreg__(RTC_TIMER)
#define RTC_TIMSK __timskreg__(RTC_TIMER)
#define RTC_OCIEB __ociebreg__(RTC_TIMER)
#define RTC_OCIEA __ocieareg__(RTC_TIMER)

// Timer registers
#ifdef ONESHOT_TIMER
#define MCU_HAS_ONESHOT_TIMER
#define ONESHOT_COMPB_vect __timerbvect__(ONESHOT_TIMER)
#define ONESHOT_COMPA_vect __timeravect__(ONESHOT_TIMER)
#define ONESHOT_TCNT __tcntreg__(ONESHOT_TIMER)
#define ONESHOT_TCCRA __tmrareg__(ONESHOT_TIMER)
#define ONESHOT_TCCRB __tmrbreg__(ONESHOT_TIMER)
#define ONESHOT_OCRA __ocrreg__(ONESHOT_TIMER, A)
#define ONESHOT_OCRB __ocrreg__(ONESHOT_TIMER, B)
#define ONESHOT_TIFR __tifrreg__(ONESHOT_TIMER)
#define ONESHOT_TIMSK __timskreg__(ONESHOT_TIMER)
#define ONESHOT_OCIEB __ociebreg__(ONESHOT_TIMER)
#define ONESHOT_OCIEA __ocieareg__(ONESHOT_TIMER)
#endif

	// Pin interrupts input register

#define PCINT0_INREG __inreg__(PCINT0_PORT)
#define PCINT1_INREG __inreg__(PCINT1_PORT)
#define PCINT2_INREG __inreg__(PCINT2_PORT)

#define PCINTA_LIMITS_MASK (LIMIT_X_ISRA | LIMIT_Y_ISRA | LIMIT_Z_ISRA | LIMIT_X2_ISRA | LIMIT_Y2_ISRA | LIMIT_Z2_ISRA | LIMIT_A_ISRA | LIMIT_B_ISRA | LIMIT_C_ISRA)
#define PCINTA_CONTROLS_MASK (ESTOP_ISRA | SAFETY_DOOR_ISRA | FHOLD_ISRA | CS_RES_ISRA)
#define PCINTA_DIN_IO_MASK (DIN0_ISRA | DIN1_ISRA | DIN2_ISRA | DIN3_ISRA | DIN4_ISRA | DIN5_ISRA | DIN6_ISRA | DIN7_ISRA)
#define PCINTB_LIMITS_MASK (LIMIT_X_ISRB | LIMIT_Y_ISRB | LIMIT_Z_ISRB | LIMIT_X2_ISRB | LIMIT_Y2_ISRB | LIMIT_Z2_ISRB | LIMIT_A_ISRB | LIMIT_B_ISRB | LIMIT_C_ISRB)
#define PCINTB_CONTROLS_MASK (ESTOP_ISRB | SAFETY_DOOR_ISRB | FHOLD_ISRB | CS_RES_ISRB)
#define PCINTB_DIN_IO_MASK (DIN0_ISRB | DIN1_ISRB | DIN2_ISRB | DIN3_ISRB | DIN4_ISRB | DIN5_ISRB | DIN6_ISRB | DIN7_ISRB)
#define PCINT0_LIMITS_MASK (LIMIT_X_ISR0 | LIMIT_Y_ISR0 | LIMIT_Z_ISR0 | LIMIT_X2_ISR0 | LIMIT_Y2_ISR0 | LIMIT_Z2_ISR0 | LIMIT_A_ISR0 | LIMIT_B_ISR0 | LIMIT_C_ISR0)
#define PCINT0_CONTROLS_MASK (ESTOP_ISR0 | SAFETY_DOOR_ISR0 | FHOLD_ISR0 | CS_RES_ISR0)
#define PCINT0_DIN_IO_MASK (DIN0_ISR0 | DIN1_ISR0 | DIN2_ISR0 | DIN3_ISR0 | DIN4_ISR0 | DIN5_ISR0 | DIN6_ISR0 | DIN7_ISR0)
#define PCINT1_LIMITS_MASK (LIMIT_X_ISR1 | LIMIT_Y_ISR1 | LIMIT_Z_ISR1 | LIMIT_X2_ISR1 | LIMIT_Y2_ISR1 | LIMIT_Z2_ISR1 | LIMIT_A_ISR1 | LIMIT_B_ISR1 | LIMIT_C_ISR1)
#define PCINT1_CONTROLS_MASK (ESTOP_ISR1 | SAFETY_DOOR_ISR1 | FHOLD_ISR1 | CS_RES_ISR1)
#define PCINT1_DIN_IO_MASK (DIN0_ISR1 | DIN1_ISR1 | DIN2_ISR1 | DIN3_ISR1 | DIN4_ISR1 | DIN5_ISR1 | DIN6_ISR1 | DIN7_ISR1)
#define PCINT2_LIMITS_MASK (LIMIT_X_ISR2 | LIMIT_Y_ISR2 | LIMIT_Z_ISR2 | LIMIT_X2_ISR2 | LIMIT_Y2_ISR2 | LIMIT_Z2_ISR2 | LIMIT_A_ISR2 | LIMIT_B_ISR2 | LIMIT_C_ISR2)
#define PCINT2_CONTROLS_MASK (ESTOP_ISR2 | SAFETY_DOOR_ISR2 | FHOLD_ISR2 | CS_RES_ISR2)
#define PCINT2_DIN_IO_MASK (DIN0_ISR2 | DIN1_ISR2 | DIN2_ISR2 | DIN3_ISR2 | DIN4_ISR2 | DIN5_ISR2 | DIN6_ISR2 | DIN7_ISR2)
#define EIMSK_VAL (LIMIT_X_EIMSK | LIMIT_X2_EIMSK | LIMIT_Y_EIMSK | LIMIT_Y2_EIMSK | LIMIT_Z_EIMSK | LIMIT_Z2_EIMSK | LIMIT_A_EIMSK | LIMIT_B_EIMSK | LIMIT_C_EIMSK | ESTOP_EIMSK | SAFETY_DOOR_EIMSK | FHOLD_EIMSK | CS_RES_EIMSK | DIN0_EIMSK | DIN1_EIMSK | DIN2_EIMSK | DIN3_EIMSK | DIN4_EIMSK | DIN5_EIMSK | DIN6_EIMSK | DIN7_EIMSK)

#define PCINTA_MASK (PCINTA_LIMITS_MASK | PCINTA_CONTROLS_MASK | PROBE_ISRA | PCINTA_DIN_IO_MASK)
#define PCINTB_MASK (PCINTB_LIMITS_MASK | PCINTB_CONTROLS_MASK | PROBE_ISRB | PCINTB_DIN_IO_MASK)
#define PCINT0_MASK (PCINT0_LIMITS_MASK | PCINT0_CONTROLS_MASK | PROBE_ISR0 | PCINT0_DIN_IO_MASK)
#define PCINT1_MASK (PCINT1_LIMITS_MASK | PCINT1_CONTROLS_MASK | PROBE_ISR1 | PCINT1_DIN_IO_MASK)
#define PCINT2_MASK (PCINT2_LIMITS_MASK | PCINT2_CONTROLS_MASK | PROBE_ISR2 | PCINT2_DIN_IO_MASK)

// Indirect macro access
#ifndef __indirect__
#define __indirect__ex__(X, Y) DIO##X##_##Y
#define __indirect__(X, Y) __indirect__ex__(X, Y)
#endif

#ifndef BYTE_OPS
#define BYTE_OPS
#define SETBIT(x, y) ((x) |= (1U << (y)))		 /* Set bit y in byte x*/
#define CLEARBIT(x, y) ((x) &= ~(1U << (y))) /* Clear bit y in byte x*/
#define CHECKBIT(x, y) ((x) & (1U << (y)))	 /* Check bit y in byte x*/
#define TOGGLEBIT(x, y) ((x) ^= (1U << (y))) /* Toggle bit y in byte x*/

#define SETFLAG(x, y) ((x) |= (y))		/* Set byte y in byte x*/
#define CLEARFLAG(x, y) ((x) &= ~(y)) /* Clear byte y in byte x*/
#define CHECKFLAG(x, y) ((x) & (y))		/* Check byte y in byte x*/
#define TOGGLEFLAG(x, y) ((x) ^= (y)) /* Toggle byte y in byte x*/
#endif

#define mcu_config_output(x) SETBIT(__indirect__(x, DIRREG), __indirect__(x, BIT))
#define mcu_config_input(x) CLEARBIT(__indirect__(x, DIRREG), __indirect__(x, BIT))
#define mcu_config_analog(x) mcu_config_input(x)
#define mcu_get_input(diopin) CHECKBIT(__indirect__(diopin, INREG), __indirect__(diopin, BIT))
#define mcu_get_output(diopin) CHECKBIT(__indirect__(diopin, OUTREG), __indirect__(diopin, BIT))
#define mcu_set_output(diopin) SETBIT(__indirect__(diopin, OUTREG), __indirect__(diopin, BIT))
#define mcu_clear_output(diopin) CLEARBIT(__indirect__(diopin, OUTREG), __indirect__(diopin, BIT))
#define mcu_toggle_output(diopin) (__indirect__(diopin, INREG) = (1U << __indirect__(diopin, BIT)))

#define mcu_config_pullup(x) SETBIT(__indirect__(x, OUTREG), __indirect__(x, BIT))
#define mcu_config_input_isr(x) SETFLAG(__indirect__(x, ISRREG), __indirect__(x, ISR_MASK))

#define mcu_config_pwm(x, freq)                              \
	{                                                          \
		SETBIT(__indirect__(x, DIRREG), __indirect__(x, BIT));   \
		CLEARBIT(__indirect__(x, OUTREG), __indirect__(x, BIT)); \
		__indirect__(x, TMRAREG) |= __indirect__(x, MODE);       \
		uint16_t div = (F_CPU >> 8) / freq;                      \
		uint8_t pre = 1;                                         \
		if (div > 1)                                             \
		{                                                        \
			div = ((div + 1) >> 3);                                \
			pre++;                                                 \
		}                                                        \
		if (__indirect__(x, TIMER) == 2)                         \
		{                                                        \
			if (div > 1)                                           \
			{                                                      \
				div = ((div + 1) >> 2);                              \
				pre++;                                               \
			}                                                      \
			while (div > 1)                                        \
			{                                                      \
				div = ((div + 1) >> 1);                              \
				pre++;                                               \
			}                                                      \
		}                                                        \
		else                                                     \
		{                                                        \
			if (div > 1)                                           \
			{                                                      \
				div = ((div + 1) >> 3);                              \
				pre++;                                               \
			}                                                      \
			while (div > 1)                                        \
			{                                                      \
				div = ((div + 1) >> 2);                              \
				pre++;                                               \
			}                                                      \
		}                                                        \
		__indirect__(x, TMRBREG) = pre;                          \
		__indirect__(x, OCRREG) = 0;                             \
	}

#define mcu_set_pwm(diopin, pwmvalue)                                              \
	{                                                                                \
		__indirect__(diopin, OCRREG) = (uint16_t)pwmvalue;                             \
		if (pwmvalue != 0)                                                             \
		{                                                                              \
			SETFLAG(__indirect__(diopin, TMRAREG), __indirect__(diopin, ENABLE_MASK));   \
		}                                                                              \
		else                                                                           \
		{                                                                              \
			CLEARFLAG(__indirect__(diopin, TMRAREG), __indirect__(diopin, ENABLE_MASK)); \
		}                                                                              \
	}
#define mcu_get_pwm(diopin) (__indirect__(diopin, OCRREG))

#define _min(a, b) (((a) < (b)) ? (a) : (b))
#ifndef LOG2
#define LOG2 0.3010299956639811952f
#endif
#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#define ADC_PRESC (_min(7, (0xff & ((uint8_t)((float)(F_CPU / 100000) / LOG2)))))
#define mcu_get_analog(diopin)                      \
	({                                                \
		ADMUX = (0x00 | __indirect__(diopin, CHANNEL)); \
		ADCSRA = (0xC0 | ADC_PRESC);                    \
		while (ADCSRA & 0x40)                           \
			;                                             \
		(0x3FF & ((ADCH << 8) | ADCL));                 \
	})

#if defined(PROBE) && defined(PROBE_ISR)
#define mcu_enable_probe_isr() (SETFLAG(PROBE_ISRREG, PROBE_ISR_MASK))
#define mcu_disable_probe_isr() (CLEARFLAG(PROBE_ISRREG, PROBE_ISR_MASK))
#else
#define mcu_enable_probe_isr()
#define mcu_disable_probe_isr()
#endif

#define mcu_enable_global_isr sei
#define mcu_disable_global_isr cli
#define mcu_get_global_isr() (SREG & 0x80)

#define US_DELAY_TICK (F_CPU / 3000000UL)
#define US_DELAY_TICK2 (F_CPU / 4000000UL)

#define mcu_free_micros() ((1000UL * RTC_TCNT) / RTC_OCRA)

#ifdef MCU_HAS_ONESHOT_TIMER
#define mcu_start_timeout() \
	({ONESHOT_TCNT = 0;       \
	ONESHOT_TIFR = 0x7;     \
	ONESHOT_TIMSK |= (1 << ONESHOT_OCIEA); })
#endif

#ifdef __cplusplus
}
#endif

#endif
