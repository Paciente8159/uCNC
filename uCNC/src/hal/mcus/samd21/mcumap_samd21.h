/*
	Name: mcumap_stm32f10x.h
	Description: Contains all MCU and PIN definitions for STM32F10x to run µCNC.

	Copyright: Copyright (c) João Martins
	Author: João Martins
	Date: 04-02-2020

	µCNC is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version. Please see <http://www.gnu.org/licenses/>

	µCNC is distributed WITHOUT ANY WARRANTY;
	Also without the implied warranty of	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	See the	GNU General Public License for more details.
*/

#ifndef MCUMAP_SAMD21_H
#define MCUMAP_SAMD21_H

#ifdef __cplusplus
extern "C"
{
#endif

/*
	Generates all the interface definitions.
	This creates a middle HAL layer between the board IO pins and the AVR funtionalities
*/
/*
	MCU specific definitions and replacements
*/
#include "sam.h"
#include <stdbool.h>

// defines the frequency of the mcu
#ifndef F_CPU
#define F_CPU SystemCoreClock
#endif
// defines the maximum and minimum step rates
#ifndef F_STEP_MAX
#define F_STEP_MAX 100000
#endif
#ifndef F_STEP_MIN
#define F_STEP_MIN 4
#endif
// internal timers working frequency
#ifndef F_TIMERS
#define F_TIMERS 8000000UL
#endif

// needed by software delays
#ifndef MCU_CLOCKS_PER_CYCLE
#define MCU_CLOCKS_PER_CYCLE 1
#endif
#ifndef MCU_CYCLES_PER_LOOP
#define MCU_CYCLES_PER_LOOP 5
#endif
#ifndef MCU_CYCLES_PER_LOOP_OVERHEAD
#define MCU_CYCLES_PER_LOOP_OVERHEAD 13
#endif

// defines special mcu to access flash strings and arrays
#define __rom__
#define __romstr__
#define __romarr__ const uint8_t
#define rom_strptr *
#define rom_strcpy strcpy
#define rom_strncpy strncpy
#define rom_memcpy memcpy
#define rom_read_byte *

// Helper macros
#define __helper_ex__(left, mid, right) left##mid##right
#define __helper__(left, mid, right) __helper_ex__(left, mid, right)

// SAMD21 registers
#define PORTREG_A (PORT->Group[0])
#define PORTREG_B (PORT->Group[1])
#define _PORTREG(X) (PORTREG_##X)
#define PORTREG(X) (_PORTREG(X))

/**********************************************
 *	Autogenerated macros
 **********************************************/

/**********************************************
 *	IO Pins
 **********************************************/
// IO pins
#if (defined(STEP0_PORT) && defined(STEP0_BIT))
#define STEP0 1
#define STEP0_GPIO (PORTREG(STEP0_PORT))
#define DIO1 1
#define DIO1_PORT STEP0_PORT
#define DIO1_BIT STEP0_BIT
#define DIO1_GPIO STEP0_GPIO
#endif
#if (defined(STEP1_PORT) && defined(STEP1_BIT))
#define STEP1 2
#define STEP1_GPIO (PORTREG(STEP1_PORT))
#define DIO2 2
#define DIO2_PORT STEP1_PORT
#define DIO2_BIT STEP1_BIT
#define DIO2_GPIO STEP1_GPIO
#endif
#if (defined(STEP2_PORT) && defined(STEP2_BIT))
#define STEP2 3
#define STEP2_GPIO (PORTREG(STEP2_PORT))
#define DIO3 3
#define DIO3_PORT STEP2_PORT
#define DIO3_BIT STEP2_BIT
#define DIO3_GPIO STEP2_GPIO
#endif
#if (defined(STEP3_PORT) && defined(STEP3_BIT))
#define STEP3 4
#define STEP3_GPIO (PORTREG(STEP3_PORT))
#define DIO4 4
#define DIO4_PORT STEP3_PORT
#define DIO4_BIT STEP3_BIT
#define DIO4_GPIO STEP3_GPIO
#endif
#if (defined(STEP4_PORT) && defined(STEP4_BIT))
#define STEP4 5
#define STEP4_GPIO (PORTREG(STEP4_PORT))
#define DIO5 5
#define DIO5_PORT STEP4_PORT
#define DIO5_BIT STEP4_BIT
#define DIO5_GPIO STEP4_GPIO
#endif
#if (defined(STEP5_PORT) && defined(STEP5_BIT))
#define STEP5 6
#define STEP5_GPIO (PORTREG(STEP5_PORT))
#define DIO6 6
#define DIO6_PORT STEP5_PORT
#define DIO6_BIT STEP5_BIT
#define DIO6_GPIO STEP5_GPIO
#endif
#if (defined(STEP6_PORT) && defined(STEP6_BIT))
#define STEP6 7
#define STEP6_GPIO (PORTREG(STEP6_PORT))
#define DIO7 7
#define DIO7_PORT STEP6_PORT
#define DIO7_BIT STEP6_BIT
#define DIO7_GPIO STEP6_GPIO
#endif
#if (defined(STEP7_PORT) && defined(STEP7_BIT))
#define STEP7 8
#define STEP7_GPIO (PORTREG(STEP7_PORT))
#define DIO8 8
#define DIO8_PORT STEP7_PORT
#define DIO8_BIT STEP7_BIT
#define DIO8_GPIO STEP7_GPIO
#endif
#if (defined(DIR0_PORT) && defined(DIR0_BIT))
#define DIR0 9
#define DIR0_GPIO (PORTREG(DIR0_PORT))
#define DIO9 9
#define DIO9_PORT DIR0_PORT
#define DIO9_BIT DIR0_BIT
#define DIO9_GPIO DIR0_GPIO
#endif
#if (defined(DIR1_PORT) && defined(DIR1_BIT))
#define DIR1 10
#define DIR1_GPIO (PORTREG(DIR1_PORT))
#define DIO10 10
#define DIO10_PORT DIR1_PORT
#define DIO10_BIT DIR1_BIT
#define DIO10_GPIO DIR1_GPIO
#endif
#if (defined(DIR2_PORT) && defined(DIR2_BIT))
#define DIR2 11
#define DIR2_GPIO (PORTREG(DIR2_PORT))
#define DIO11 11
#define DIO11_PORT DIR2_PORT
#define DIO11_BIT DIR2_BIT
#define DIO11_GPIO DIR2_GPIO
#endif
#if (defined(DIR3_PORT) && defined(DIR3_BIT))
#define DIR3 12
#define DIR3_GPIO (PORTREG(DIR3_PORT))
#define DIO12 12
#define DIO12_PORT DIR3_PORT
#define DIO12_BIT DIR3_BIT
#define DIO12_GPIO DIR3_GPIO
#endif
#if (defined(DIR4_PORT) && defined(DIR4_BIT))
#define DIR4 13
#define DIR4_GPIO (PORTREG(DIR4_PORT))
#define DIO13 13
#define DIO13_PORT DIR4_PORT
#define DIO13_BIT DIR4_BIT
#define DIO13_GPIO DIR4_GPIO
#endif
#if (defined(DIR5_PORT) && defined(DIR5_BIT))
#define DIR5 14
#define DIR5_GPIO (PORTREG(DIR5_PORT))
#define DIO14 14
#define DIO14_PORT DIR5_PORT
#define DIO14_BIT DIR5_BIT
#define DIO14_GPIO DIR5_GPIO
#endif
#if (defined(DIR6_PORT) && defined(DIR6_BIT))
#define DIR6 15
#define DIR6_GPIO (PORTREG(DIR6_PORT))
#define DIO15 15
#define DIO15_PORT DIR6_PORT
#define DIO15_BIT DIR6_BIT
#define DIO15_GPIO DIR6_GPIO
#endif
#if (defined(DIR7_PORT) && defined(DIR7_BIT))
#define DIR7 16
#define DIR7_GPIO (PORTREG(DIR7_PORT))
#define DIO16 16
#define DIO16_PORT DIR7_PORT
#define DIO16_BIT DIR7_BIT
#define DIO16_GPIO DIR7_GPIO
#endif
#if (defined(STEP0_EN_PORT) && defined(STEP0_EN_BIT))
#define STEP0_EN 17
#define STEP0_EN_GPIO (PORTREG(STEP0_EN_PORT))
#define DIO17 17
#define DIO17_PORT STEP0_EN_PORT
#define DIO17_BIT STEP0_EN_BIT
#define DIO17_GPIO STEP0_EN_GPIO
#endif
#if (defined(STEP1_EN_PORT) && defined(STEP1_EN_BIT))
#define STEP1_EN 18
#define STEP1_EN_GPIO (PORTREG(STEP1_EN_PORT))
#define DIO18 18
#define DIO18_PORT STEP1_EN_PORT
#define DIO18_BIT STEP1_EN_BIT
#define DIO18_GPIO STEP1_EN_GPIO
#endif
#if (defined(STEP2_EN_PORT) && defined(STEP2_EN_BIT))
#define STEP2_EN 19
#define STEP2_EN_GPIO (PORTREG(STEP2_EN_PORT))
#define DIO19 19
#define DIO19_PORT STEP2_EN_PORT
#define DIO19_BIT STEP2_EN_BIT
#define DIO19_GPIO STEP2_EN_GPIO
#endif
#if (defined(STEP3_EN_PORT) && defined(STEP3_EN_BIT))
#define STEP3_EN 20
#define STEP3_EN_GPIO (PORTREG(STEP3_EN_PORT))
#define DIO20 20
#define DIO20_PORT STEP3_EN_PORT
#define DIO20_BIT STEP3_EN_BIT
#define DIO20_GPIO STEP3_EN_GPIO
#endif
#if (defined(STEP4_EN_PORT) && defined(STEP4_EN_BIT))
#define STEP4_EN 21
#define STEP4_EN_GPIO (PORTREG(STEP4_EN_PORT))
#define DIO21 21
#define DIO21_PORT STEP4_EN_PORT
#define DIO21_BIT STEP4_EN_BIT
#define DIO21_GPIO STEP4_EN_GPIO
#endif
#if (defined(STEP5_EN_PORT) && defined(STEP5_EN_BIT))
#define STEP5_EN 22
#define STEP5_EN_GPIO (PORTREG(STEP5_EN_PORT))
#define DIO22 22
#define DIO22_PORT STEP5_EN_PORT
#define DIO22_BIT STEP5_EN_BIT
#define DIO22_GPIO STEP5_EN_GPIO
#endif
#if (defined(STEP6_EN_PORT) && defined(STEP6_EN_BIT))
#define STEP6_EN 23
#define STEP6_EN_GPIO (PORTREG(STEP6_EN_PORT))
#define DIO23 23
#define DIO23_PORT STEP6_EN_PORT
#define DIO23_BIT STEP6_EN_BIT
#define DIO23_GPIO STEP6_EN_GPIO
#endif
#if (defined(STEP7_EN_PORT) && defined(STEP7_EN_BIT))
#define STEP7_EN 24
#define STEP7_EN_GPIO (PORTREG(STEP7_EN_PORT))
#define DIO24 24
#define DIO24_PORT STEP7_EN_PORT
#define DIO24_BIT STEP7_EN_BIT
#define DIO24_GPIO STEP7_EN_GPIO
#endif
#if (defined(PWM0_PORT) && defined(PWM0_BIT))
#define PWM0 25
#define PWM0_GPIO (PORTREG(PWM0_PORT))
#define DIO25 25
#define DIO25_PORT PWM0_PORT
#define DIO25_BIT PWM0_BIT
#define DIO25_GPIO PWM0_GPIO
#endif
#if (defined(PWM1_PORT) && defined(PWM1_BIT))
#define PWM1 26
#define PWM1_GPIO (PORTREG(PWM1_PORT))
#define DIO26 26
#define DIO26_PORT PWM1_PORT
#define DIO26_BIT PWM1_BIT
#define DIO26_GPIO PWM1_GPIO
#endif
#if (defined(PWM2_PORT) && defined(PWM2_BIT))
#define PWM2 27
#define PWM2_GPIO (PORTREG(PWM2_PORT))
#define DIO27 27
#define DIO27_PORT PWM2_PORT
#define DIO27_BIT PWM2_BIT
#define DIO27_GPIO PWM2_GPIO
#endif
#if (defined(PWM3_PORT) && defined(PWM3_BIT))
#define PWM3 28
#define PWM3_GPIO (PORTREG(PWM3_PORT))
#define DIO28 28
#define DIO28_PORT PWM3_PORT
#define DIO28_BIT PWM3_BIT
#define DIO28_GPIO PWM3_GPIO
#endif
#if (defined(PWM4_PORT) && defined(PWM4_BIT))
#define PWM4 29
#define PWM4_GPIO (PORTREG(PWM4_PORT))
#define DIO29 29
#define DIO29_PORT PWM4_PORT
#define DIO29_BIT PWM4_BIT
#define DIO29_GPIO PWM4_GPIO
#endif
#if (defined(PWM5_PORT) && defined(PWM5_BIT))
#define PWM5 30
#define PWM5_GPIO (PORTREG(PWM5_PORT))
#define DIO30 30
#define DIO30_PORT PWM5_PORT
#define DIO30_BIT PWM5_BIT
#define DIO30_GPIO PWM5_GPIO
#endif
#if (defined(PWM6_PORT) && defined(PWM6_BIT))
#define PWM6 31
#define PWM6_GPIO (PORTREG(PWM6_PORT))
#define DIO31 31
#define DIO31_PORT PWM6_PORT
#define DIO31_BIT PWM6_BIT
#define DIO31_GPIO PWM6_GPIO
#endif
#if (defined(PWM7_PORT) && defined(PWM7_BIT))
#define PWM7 32
#define PWM7_GPIO (PORTREG(PWM7_PORT))
#define DIO32 32
#define DIO32_PORT PWM7_PORT
#define DIO32_BIT PWM7_BIT
#define DIO32_GPIO PWM7_GPIO
#endif
#if (defined(PWM8_PORT) && defined(PWM8_BIT))
#define PWM8 33
#define PWM8_GPIO (PORTREG(PWM8_PORT))
#define DIO33 33
#define DIO33_PORT PWM8_PORT
#define DIO33_BIT PWM8_BIT
#define DIO33_GPIO PWM8_GPIO
#endif
#if (defined(PWM9_PORT) && defined(PWM9_BIT))
#define PWM9 34
#define PWM9_GPIO (PORTREG(PWM9_PORT))
#define DIO34 34
#define DIO34_PORT PWM9_PORT
#define DIO34_BIT PWM9_BIT
#define DIO34_GPIO PWM9_GPIO
#endif
#if (defined(PWM10_PORT) && defined(PWM10_BIT))
#define PWM10 35
#define PWM10_GPIO (PORTREG(PWM10_PORT))
#define DIO35 35
#define DIO35_PORT PWM10_PORT
#define DIO35_BIT PWM10_BIT
#define DIO35_GPIO PWM10_GPIO
#endif
#if (defined(PWM11_PORT) && defined(PWM11_BIT))
#define PWM11 36
#define PWM11_GPIO (PORTREG(PWM11_PORT))
#define DIO36 36
#define DIO36_PORT PWM11_PORT
#define DIO36_BIT PWM11_BIT
#define DIO36_GPIO PWM11_GPIO
#endif
#if (defined(PWM12_PORT) && defined(PWM12_BIT))
#define PWM12 37
#define PWM12_GPIO (PORTREG(PWM12_PORT))
#define DIO37 37
#define DIO37_PORT PWM12_PORT
#define DIO37_BIT PWM12_BIT
#define DIO37_GPIO PWM12_GPIO
#endif
#if (defined(PWM13_PORT) && defined(PWM13_BIT))
#define PWM13 38
#define PWM13_GPIO (PORTREG(PWM13_PORT))
#define DIO38 38
#define DIO38_PORT PWM13_PORT
#define DIO38_BIT PWM13_BIT
#define DIO38_GPIO PWM13_GPIO
#endif
#if (defined(PWM14_PORT) && defined(PWM14_BIT))
#define PWM14 39
#define PWM14_GPIO (PORTREG(PWM14_PORT))
#define DIO39 39
#define DIO39_PORT PWM14_PORT
#define DIO39_BIT PWM14_BIT
#define DIO39_GPIO PWM14_GPIO
#endif
#if (defined(PWM15_PORT) && defined(PWM15_BIT))
#define PWM15 40
#define PWM15_GPIO (PORTREG(PWM15_PORT))
#define DIO40 40
#define DIO40_PORT PWM15_PORT
#define DIO40_BIT PWM15_BIT
#define DIO40_GPIO PWM15_GPIO
#endif
#if (defined(SERVO0_PORT) && defined(SERVO0_BIT))
#define SERVO0 41
#define SERVO0_GPIO (PORTREG(SERVO0_PORT))
#define DIO41 41
#define DIO41_PORT SERVO0_PORT
#define DIO41_BIT SERVO0_BIT
#define DIO41_GPIO SERVO0_GPIO
#endif
#if (defined(SERVO1_PORT) && defined(SERVO1_BIT))
#define SERVO1 42
#define SERVO1_GPIO (PORTREG(SERVO1_PORT))
#define DIO42 42
#define DIO42_PORT SERVO1_PORT
#define DIO42_BIT SERVO1_BIT
#define DIO42_GPIO SERVO1_GPIO
#endif
#if (defined(SERVO2_PORT) && defined(SERVO2_BIT))
#define SERVO2 43
#define SERVO2_GPIO (PORTREG(SERVO2_PORT))
#define DIO43 43
#define DIO43_PORT SERVO2_PORT
#define DIO43_BIT SERVO2_BIT
#define DIO43_GPIO SERVO2_GPIO
#endif
#if (defined(SERVO3_PORT) && defined(SERVO3_BIT))
#define SERVO3 44
#define SERVO3_GPIO (PORTREG(SERVO3_PORT))
#define DIO44 44
#define DIO44_PORT SERVO3_PORT
#define DIO44_BIT SERVO3_BIT
#define DIO44_GPIO SERVO3_GPIO
#endif
#if (defined(SERVO4_PORT) && defined(SERVO4_BIT))
#define SERVO4 45
#define SERVO4_GPIO (PORTREG(SERVO4_PORT))
#define DIO45 45
#define DIO45_PORT SERVO4_PORT
#define DIO45_BIT SERVO4_BIT
#define DIO45_GPIO SERVO4_GPIO
#endif
#if (defined(SERVO5_PORT) && defined(SERVO5_BIT))
#define SERVO5 46
#define SERVO5_GPIO (PORTREG(SERVO5_PORT))
#define DIO46 46
#define DIO46_PORT SERVO5_PORT
#define DIO46_BIT SERVO5_BIT
#define DIO46_GPIO SERVO5_GPIO
#endif
#if (defined(DOUT0_PORT) && defined(DOUT0_BIT))
#define DOUT0 47
#define DOUT0_GPIO (PORTREG(DOUT0_PORT))
#define DIO47 47
#define DIO47_PORT DOUT0_PORT
#define DIO47_BIT DOUT0_BIT
#define DIO47_GPIO DOUT0_GPIO
#endif
#if (defined(DOUT1_PORT) && defined(DOUT1_BIT))
#define DOUT1 48
#define DOUT1_GPIO (PORTREG(DOUT1_PORT))
#define DIO48 48
#define DIO48_PORT DOUT1_PORT
#define DIO48_BIT DOUT1_BIT
#define DIO48_GPIO DOUT1_GPIO
#endif
#if (defined(DOUT2_PORT) && defined(DOUT2_BIT))
#define DOUT2 49
#define DOUT2_GPIO (PORTREG(DOUT2_PORT))
#define DIO49 49
#define DIO49_PORT DOUT2_PORT
#define DIO49_BIT DOUT2_BIT
#define DIO49_GPIO DOUT2_GPIO
#endif
#if (defined(DOUT3_PORT) && defined(DOUT3_BIT))
#define DOUT3 50
#define DOUT3_GPIO (PORTREG(DOUT3_PORT))
#define DIO50 50
#define DIO50_PORT DOUT3_PORT
#define DIO50_BIT DOUT3_BIT
#define DIO50_GPIO DOUT3_GPIO
#endif
#if (defined(DOUT4_PORT) && defined(DOUT4_BIT))
#define DOUT4 51
#define DOUT4_GPIO (PORTREG(DOUT4_PORT))
#define DIO51 51
#define DIO51_PORT DOUT4_PORT
#define DIO51_BIT DOUT4_BIT
#define DIO51_GPIO DOUT4_GPIO
#endif
#if (defined(DOUT5_PORT) && defined(DOUT5_BIT))
#define DOUT5 52
#define DOUT5_GPIO (PORTREG(DOUT5_PORT))
#define DIO52 52
#define DIO52_PORT DOUT5_PORT
#define DIO52_BIT DOUT5_BIT
#define DIO52_GPIO DOUT5_GPIO
#endif
#if (defined(DOUT6_PORT) && defined(DOUT6_BIT))
#define DOUT6 53
#define DOUT6_GPIO (PORTREG(DOUT6_PORT))
#define DIO53 53
#define DIO53_PORT DOUT6_PORT
#define DIO53_BIT DOUT6_BIT
#define DIO53_GPIO DOUT6_GPIO
#endif
#if (defined(DOUT7_PORT) && defined(DOUT7_BIT))
#define DOUT7 54
#define DOUT7_GPIO (PORTREG(DOUT7_PORT))
#define DIO54 54
#define DIO54_PORT DOUT7_PORT
#define DIO54_BIT DOUT7_BIT
#define DIO54_GPIO DOUT7_GPIO
#endif
#if (defined(DOUT8_PORT) && defined(DOUT8_BIT))
#define DOUT8 55
#define DOUT8_GPIO (PORTREG(DOUT8_PORT))
#define DIO55 55
#define DIO55_PORT DOUT8_PORT
#define DIO55_BIT DOUT8_BIT
#define DIO55_GPIO DOUT8_GPIO
#endif
#if (defined(DOUT9_PORT) && defined(DOUT9_BIT))
#define DOUT9 56
#define DOUT9_GPIO (PORTREG(DOUT9_PORT))
#define DIO56 56
#define DIO56_PORT DOUT9_PORT
#define DIO56_BIT DOUT9_BIT
#define DIO56_GPIO DOUT9_GPIO
#endif
#if (defined(DOUT10_PORT) && defined(DOUT10_BIT))
#define DOUT10 57
#define DOUT10_GPIO (PORTREG(DOUT10_PORT))
#define DIO57 57
#define DIO57_PORT DOUT10_PORT
#define DIO57_BIT DOUT10_BIT
#define DIO57_GPIO DOUT10_GPIO
#endif
#if (defined(DOUT11_PORT) && defined(DOUT11_BIT))
#define DOUT11 58
#define DOUT11_GPIO (PORTREG(DOUT11_PORT))
#define DIO58 58
#define DIO58_PORT DOUT11_PORT
#define DIO58_BIT DOUT11_BIT
#define DIO58_GPIO DOUT11_GPIO
#endif
#if (defined(DOUT12_PORT) && defined(DOUT12_BIT))
#define DOUT12 59
#define DOUT12_GPIO (PORTREG(DOUT12_PORT))
#define DIO59 59
#define DIO59_PORT DOUT12_PORT
#define DIO59_BIT DOUT12_BIT
#define DIO59_GPIO DOUT12_GPIO
#endif
#if (defined(DOUT13_PORT) && defined(DOUT13_BIT))
#define DOUT13 60
#define DOUT13_GPIO (PORTREG(DOUT13_PORT))
#define DIO60 60
#define DIO60_PORT DOUT13_PORT
#define DIO60_BIT DOUT13_BIT
#define DIO60_GPIO DOUT13_GPIO
#endif
#if (defined(DOUT14_PORT) && defined(DOUT14_BIT))
#define DOUT14 61
#define DOUT14_GPIO (PORTREG(DOUT14_PORT))
#define DIO61 61
#define DIO61_PORT DOUT14_PORT
#define DIO61_BIT DOUT14_BIT
#define DIO61_GPIO DOUT14_GPIO
#endif
#if (defined(DOUT15_PORT) && defined(DOUT15_BIT))
#define DOUT15 62
#define DOUT15_GPIO (PORTREG(DOUT15_PORT))
#define DIO62 62
#define DIO62_PORT DOUT15_PORT
#define DIO62_BIT DOUT15_BIT
#define DIO62_GPIO DOUT15_GPIO
#endif
#if (defined(DOUT16_PORT) && defined(DOUT16_BIT))
#define DOUT16 63
#define DOUT16_GPIO (PORTREG(DOUT16_PORT))
#define DIO63 63
#define DIO63_PORT DOUT16_PORT
#define DIO63_BIT DOUT16_BIT
#define DIO63_GPIO DOUT16_GPIO
#endif
#if (defined(DOUT17_PORT) && defined(DOUT17_BIT))
#define DOUT17 64
#define DOUT17_GPIO (PORTREG(DOUT17_PORT))
#define DIO64 64
#define DIO64_PORT DOUT17_PORT
#define DIO64_BIT DOUT17_BIT
#define DIO64_GPIO DOUT17_GPIO
#endif
#if (defined(DOUT18_PORT) && defined(DOUT18_BIT))
#define DOUT18 65
#define DOUT18_GPIO (PORTREG(DOUT18_PORT))
#define DIO65 65
#define DIO65_PORT DOUT18_PORT
#define DIO65_BIT DOUT18_BIT
#define DIO65_GPIO DOUT18_GPIO
#endif
#if (defined(DOUT19_PORT) && defined(DOUT19_BIT))
#define DOUT19 66
#define DOUT19_GPIO (PORTREG(DOUT19_PORT))
#define DIO66 66
#define DIO66_PORT DOUT19_PORT
#define DIO66_BIT DOUT19_BIT
#define DIO66_GPIO DOUT19_GPIO
#endif
#if (defined(DOUT20_PORT) && defined(DOUT20_BIT))
#define DOUT20 67
#define DOUT20_GPIO (PORTREG(DOUT20_PORT))
#define DIO67 67
#define DIO67_PORT DOUT20_PORT
#define DIO67_BIT DOUT20_BIT
#define DIO67_GPIO DOUT20_GPIO
#endif
#if (defined(DOUT21_PORT) && defined(DOUT21_BIT))
#define DOUT21 68
#define DOUT21_GPIO (PORTREG(DOUT21_PORT))
#define DIO68 68
#define DIO68_PORT DOUT21_PORT
#define DIO68_BIT DOUT21_BIT
#define DIO68_GPIO DOUT21_GPIO
#endif
#if (defined(DOUT22_PORT) && defined(DOUT22_BIT))
#define DOUT22 69
#define DOUT22_GPIO (PORTREG(DOUT22_PORT))
#define DIO69 69
#define DIO69_PORT DOUT22_PORT
#define DIO69_BIT DOUT22_BIT
#define DIO69_GPIO DOUT22_GPIO
#endif
#if (defined(DOUT23_PORT) && defined(DOUT23_BIT))
#define DOUT23 70
#define DOUT23_GPIO (PORTREG(DOUT23_PORT))
#define DIO70 70
#define DIO70_PORT DOUT23_PORT
#define DIO70_BIT DOUT23_BIT
#define DIO70_GPIO DOUT23_GPIO
#endif
#if (defined(DOUT24_PORT) && defined(DOUT24_BIT))
#define DOUT24 71
#define DOUT24_GPIO (PORTREG(DOUT24_PORT))
#define DIO71 71
#define DIO71_PORT DOUT24_PORT
#define DIO71_BIT DOUT24_BIT
#define DIO71_GPIO DOUT24_GPIO
#endif
#if (defined(DOUT25_PORT) && defined(DOUT25_BIT))
#define DOUT25 72
#define DOUT25_GPIO (PORTREG(DOUT25_PORT))
#define DIO72 72
#define DIO72_PORT DOUT25_PORT
#define DIO72_BIT DOUT25_BIT
#define DIO72_GPIO DOUT25_GPIO
#endif
#if (defined(DOUT26_PORT) && defined(DOUT26_BIT))
#define DOUT26 73
#define DOUT26_GPIO (PORTREG(DOUT26_PORT))
#define DIO73 73
#define DIO73_PORT DOUT26_PORT
#define DIO73_BIT DOUT26_BIT
#define DIO73_GPIO DOUT26_GPIO
#endif
#if (defined(DOUT27_PORT) && defined(DOUT27_BIT))
#define DOUT27 74
#define DOUT27_GPIO (PORTREG(DOUT27_PORT))
#define DIO74 74
#define DIO74_PORT DOUT27_PORT
#define DIO74_BIT DOUT27_BIT
#define DIO74_GPIO DOUT27_GPIO
#endif
#if (defined(DOUT28_PORT) && defined(DOUT28_BIT))
#define DOUT28 75
#define DOUT28_GPIO (PORTREG(DOUT28_PORT))
#define DIO75 75
#define DIO75_PORT DOUT28_PORT
#define DIO75_BIT DOUT28_BIT
#define DIO75_GPIO DOUT28_GPIO
#endif
#if (defined(DOUT29_PORT) && defined(DOUT29_BIT))
#define DOUT29 76
#define DOUT29_GPIO (PORTREG(DOUT29_PORT))
#define DIO76 76
#define DIO76_PORT DOUT29_PORT
#define DIO76_BIT DOUT29_BIT
#define DIO76_GPIO DOUT29_GPIO
#endif
#if (defined(DOUT30_PORT) && defined(DOUT30_BIT))
#define DOUT30 77
#define DOUT30_GPIO (PORTREG(DOUT30_PORT))
#define DIO77 77
#define DIO77_PORT DOUT30_PORT
#define DIO77_BIT DOUT30_BIT
#define DIO77_GPIO DOUT30_GPIO
#endif
#if (defined(DOUT31_PORT) && defined(DOUT31_BIT))
#define DOUT31 78
#define DOUT31_GPIO (PORTREG(DOUT31_PORT))
#define DIO78 78
#define DIO78_PORT DOUT31_PORT
#define DIO78_BIT DOUT31_BIT
#define DIO78_GPIO DOUT31_GPIO
#endif
#if (defined(DOUT32_PORT) && defined(DOUT32_BIT))
#define DOUT32 79
#define DOUT32_GPIO (PORTREG(DOUT32_PORT))
#define DIO79 79
#define DIO79_PORT DOUT32_PORT
#define DIO79_BIT DOUT32_BIT
#define DIO79_GPIO DOUT32_GPIO
#endif
#if (defined(DOUT33_PORT) && defined(DOUT33_BIT))
#define DOUT33 80
#define DOUT33_GPIO (PORTREG(DOUT33_PORT))
#define DIO80 80
#define DIO80_PORT DOUT33_PORT
#define DIO80_BIT DOUT33_BIT
#define DIO80_GPIO DOUT33_GPIO
#endif
#if (defined(DOUT34_PORT) && defined(DOUT34_BIT))
#define DOUT34 81
#define DOUT34_GPIO (PORTREG(DOUT34_PORT))
#define DIO81 81
#define DIO81_PORT DOUT34_PORT
#define DIO81_BIT DOUT34_BIT
#define DIO81_GPIO DOUT34_GPIO
#endif
#if (defined(DOUT35_PORT) && defined(DOUT35_BIT))
#define DOUT35 82
#define DOUT35_GPIO (PORTREG(DOUT35_PORT))
#define DIO82 82
#define DIO82_PORT DOUT35_PORT
#define DIO82_BIT DOUT35_BIT
#define DIO82_GPIO DOUT35_GPIO
#endif
#if (defined(DOUT36_PORT) && defined(DOUT36_BIT))
#define DOUT36 83
#define DOUT36_GPIO (PORTREG(DOUT36_PORT))
#define DIO83 83
#define DIO83_PORT DOUT36_PORT
#define DIO83_BIT DOUT36_BIT
#define DIO83_GPIO DOUT36_GPIO
#endif
#if (defined(DOUT37_PORT) && defined(DOUT37_BIT))
#define DOUT37 84
#define DOUT37_GPIO (PORTREG(DOUT37_PORT))
#define DIO84 84
#define DIO84_PORT DOUT37_PORT
#define DIO84_BIT DOUT37_BIT
#define DIO84_GPIO DOUT37_GPIO
#endif
#if (defined(DOUT38_PORT) && defined(DOUT38_BIT))
#define DOUT38 85
#define DOUT38_GPIO (PORTREG(DOUT38_PORT))
#define DIO85 85
#define DIO85_PORT DOUT38_PORT
#define DIO85_BIT DOUT38_BIT
#define DIO85_GPIO DOUT38_GPIO
#endif
#if (defined(DOUT39_PORT) && defined(DOUT39_BIT))
#define DOUT39 86
#define DOUT39_GPIO (PORTREG(DOUT39_PORT))
#define DIO86 86
#define DIO86_PORT DOUT39_PORT
#define DIO86_BIT DOUT39_BIT
#define DIO86_GPIO DOUT39_GPIO
#endif
#if (defined(DOUT40_PORT) && defined(DOUT40_BIT))
#define DOUT40 87
#define DOUT40_GPIO (PORTREG(DOUT40_PORT))
#define DIO87 87
#define DIO87_PORT DOUT40_PORT
#define DIO87_BIT DOUT40_BIT
#define DIO87_GPIO DOUT40_GPIO
#endif
#if (defined(DOUT41_PORT) && defined(DOUT41_BIT))
#define DOUT41 88
#define DOUT41_GPIO (PORTREG(DOUT41_PORT))
#define DIO88 88
#define DIO88_PORT DOUT41_PORT
#define DIO88_BIT DOUT41_BIT
#define DIO88_GPIO DOUT41_GPIO
#endif
#if (defined(DOUT42_PORT) && defined(DOUT42_BIT))
#define DOUT42 89
#define DOUT42_GPIO (PORTREG(DOUT42_PORT))
#define DIO89 89
#define DIO89_PORT DOUT42_PORT
#define DIO89_BIT DOUT42_BIT
#define DIO89_GPIO DOUT42_GPIO
#endif
#if (defined(DOUT43_PORT) && defined(DOUT43_BIT))
#define DOUT43 90
#define DOUT43_GPIO (PORTREG(DOUT43_PORT))
#define DIO90 90
#define DIO90_PORT DOUT43_PORT
#define DIO90_BIT DOUT43_BIT
#define DIO90_GPIO DOUT43_GPIO
#endif
#if (defined(DOUT44_PORT) && defined(DOUT44_BIT))
#define DOUT44 91
#define DOUT44_GPIO (PORTREG(DOUT44_PORT))
#define DIO91 91
#define DIO91_PORT DOUT44_PORT
#define DIO91_BIT DOUT44_BIT
#define DIO91_GPIO DOUT44_GPIO
#endif
#if (defined(DOUT45_PORT) && defined(DOUT45_BIT))
#define DOUT45 92
#define DOUT45_GPIO (PORTREG(DOUT45_PORT))
#define DIO92 92
#define DIO92_PORT DOUT45_PORT
#define DIO92_BIT DOUT45_BIT
#define DIO92_GPIO DOUT45_GPIO
#endif
#if (defined(DOUT46_PORT) && defined(DOUT46_BIT))
#define DOUT46 93
#define DOUT46_GPIO (PORTREG(DOUT46_PORT))
#define DIO93 93
#define DIO93_PORT DOUT46_PORT
#define DIO93_BIT DOUT46_BIT
#define DIO93_GPIO DOUT46_GPIO
#endif
#if (defined(DOUT47_PORT) && defined(DOUT47_BIT))
#define DOUT47 94
#define DOUT47_GPIO (PORTREG(DOUT47_PORT))
#define DIO94 94
#define DIO94_PORT DOUT47_PORT
#define DIO94_BIT DOUT47_BIT
#define DIO94_GPIO DOUT47_GPIO
#endif
#if (defined(DOUT48_PORT) && defined(DOUT48_BIT))
#define DOUT48 95
#define DOUT48_GPIO (PORTREG(DOUT48_PORT))
#define DIO95 95
#define DIO95_PORT DOUT48_PORT
#define DIO95_BIT DOUT48_BIT
#define DIO95_GPIO DOUT48_GPIO
#endif
#if (defined(DOUT49_PORT) && defined(DOUT49_BIT))
#define DOUT49 96
#define DOUT49_GPIO (PORTREG(DOUT49_PORT))
#define DIO96 96
#define DIO96_PORT DOUT49_PORT
#define DIO96_BIT DOUT49_BIT
#define DIO96_GPIO DOUT49_GPIO
#endif
#if (defined(LIMIT_X_PORT) && defined(LIMIT_X_BIT))
#define LIMIT_X 100
#define LIMIT_X_GPIO (PORTREG(LIMIT_X_PORT))
#define DIO100 100
#define DIO100_PORT LIMIT_X_PORT
#define DIO100_BIT LIMIT_X_BIT
#define DIO100_GPIO LIMIT_X_GPIO
#endif
#if (defined(LIMIT_Y_PORT) && defined(LIMIT_Y_BIT))
#define LIMIT_Y 101
#define LIMIT_Y_GPIO (PORTREG(LIMIT_Y_PORT))
#define DIO101 101
#define DIO101_PORT LIMIT_Y_PORT
#define DIO101_BIT LIMIT_Y_BIT
#define DIO101_GPIO LIMIT_Y_GPIO
#endif
#if (defined(LIMIT_Z_PORT) && defined(LIMIT_Z_BIT))
#define LIMIT_Z 102
#define LIMIT_Z_GPIO (PORTREG(LIMIT_Z_PORT))
#define DIO102 102
#define DIO102_PORT LIMIT_Z_PORT
#define DIO102_BIT LIMIT_Z_BIT
#define DIO102_GPIO LIMIT_Z_GPIO
#endif
#if (defined(LIMIT_X2_PORT) && defined(LIMIT_X2_BIT))
#define LIMIT_X2 103
#define LIMIT_X2_GPIO (PORTREG(LIMIT_X2_PORT))
#define DIO103 103
#define DIO103_PORT LIMIT_X2_PORT
#define DIO103_BIT LIMIT_X2_BIT
#define DIO103_GPIO LIMIT_X2_GPIO
#endif
#if (defined(LIMIT_Y2_PORT) && defined(LIMIT_Y2_BIT))
#define LIMIT_Y2 104
#define LIMIT_Y2_GPIO (PORTREG(LIMIT_Y2_PORT))
#define DIO104 104
#define DIO104_PORT LIMIT_Y2_PORT
#define DIO104_BIT LIMIT_Y2_BIT
#define DIO104_GPIO LIMIT_Y2_GPIO
#endif
#if (defined(LIMIT_Z2_PORT) && defined(LIMIT_Z2_BIT))
#define LIMIT_Z2 105
#define LIMIT_Z2_GPIO (PORTREG(LIMIT_Z2_PORT))
#define DIO105 105
#define DIO105_PORT LIMIT_Z2_PORT
#define DIO105_BIT LIMIT_Z2_BIT
#define DIO105_GPIO LIMIT_Z2_GPIO
#endif
#if (defined(LIMIT_A_PORT) && defined(LIMIT_A_BIT))
#define LIMIT_A 106
#define LIMIT_A_GPIO (PORTREG(LIMIT_A_PORT))
#define DIO106 106
#define DIO106_PORT LIMIT_A_PORT
#define DIO106_BIT LIMIT_A_BIT
#define DIO106_GPIO LIMIT_A_GPIO
#endif
#if (defined(LIMIT_B_PORT) && defined(LIMIT_B_BIT))
#define LIMIT_B 107
#define LIMIT_B_GPIO (PORTREG(LIMIT_B_PORT))
#define DIO107 107
#define DIO107_PORT LIMIT_B_PORT
#define DIO107_BIT LIMIT_B_BIT
#define DIO107_GPIO LIMIT_B_GPIO
#endif
#if (defined(LIMIT_C_PORT) && defined(LIMIT_C_BIT))
#define LIMIT_C 108
#define LIMIT_C_GPIO (PORTREG(LIMIT_C_PORT))
#define DIO108 108
#define DIO108_PORT LIMIT_C_PORT
#define DIO108_BIT LIMIT_C_BIT
#define DIO108_GPIO LIMIT_C_GPIO
#endif
#if (defined(PROBE_PORT) && defined(PROBE_BIT))
#define PROBE 109
#define PROBE_GPIO (PORTREG(PROBE_PORT))
#define DIO109 109
#define DIO109_PORT PROBE_PORT
#define DIO109_BIT PROBE_BIT
#define DIO109_GPIO PROBE_GPIO
#endif
#if (defined(ESTOP_PORT) && defined(ESTOP_BIT))
#define ESTOP 110
#define ESTOP_GPIO (PORTREG(ESTOP_PORT))
#define DIO110 110
#define DIO110_PORT ESTOP_PORT
#define DIO110_BIT ESTOP_BIT
#define DIO110_GPIO ESTOP_GPIO
#endif
#if (defined(SAFETY_DOOR_PORT) && defined(SAFETY_DOOR_BIT))
#define SAFETY_DOOR 111
#define SAFETY_DOOR_GPIO (PORTREG(SAFETY_DOOR_PORT))
#define DIO111 111
#define DIO111_PORT SAFETY_DOOR_PORT
#define DIO111_BIT SAFETY_DOOR_BIT
#define DIO111_GPIO SAFETY_DOOR_GPIO
#endif
#if (defined(FHOLD_PORT) && defined(FHOLD_BIT))
#define FHOLD 112
#define FHOLD_GPIO (PORTREG(FHOLD_PORT))
#define DIO112 112
#define DIO112_PORT FHOLD_PORT
#define DIO112_BIT FHOLD_BIT
#define DIO112_GPIO FHOLD_GPIO
#endif
#if (defined(CS_RES_PORT) && defined(CS_RES_BIT))
#define CS_RES 113
#define CS_RES_GPIO (PORTREG(CS_RES_PORT))
#define DIO113 113
#define DIO113_PORT CS_RES_PORT
#define DIO113_BIT CS_RES_BIT
#define DIO113_GPIO CS_RES_GPIO
#endif
#if (defined(ANALOG0_PORT) && defined(ANALOG0_BIT))
#define ANALOG0 114
#define ANALOG0_GPIO (PORTREG(ANALOG0_PORT))
#define DIO114 114
#define DIO114_PORT ANALOG0_PORT
#define DIO114_BIT ANALOG0_BIT
#define DIO114_GPIO ANALOG0_GPIO
#endif
#if (defined(ANALOG1_PORT) && defined(ANALOG1_BIT))
#define ANALOG1 115
#define ANALOG1_GPIO (PORTREG(ANALOG1_PORT))
#define DIO115 115
#define DIO115_PORT ANALOG1_PORT
#define DIO115_BIT ANALOG1_BIT
#define DIO115_GPIO ANALOG1_GPIO
#endif
#if (defined(ANALOG2_PORT) && defined(ANALOG2_BIT))
#define ANALOG2 116
#define ANALOG2_GPIO (PORTREG(ANALOG2_PORT))
#define DIO116 116
#define DIO116_PORT ANALOG2_PORT
#define DIO116_BIT ANALOG2_BIT
#define DIO116_GPIO ANALOG2_GPIO
#endif
#if (defined(ANALOG3_PORT) && defined(ANALOG3_BIT))
#define ANALOG3 117
#define ANALOG3_GPIO (PORTREG(ANALOG3_PORT))
#define DIO117 117
#define DIO117_PORT ANALOG3_PORT
#define DIO117_BIT ANALOG3_BIT
#define DIO117_GPIO ANALOG3_GPIO
#endif
#if (defined(ANALOG4_PORT) && defined(ANALOG4_BIT))
#define ANALOG4 118
#define ANALOG4_GPIO (PORTREG(ANALOG4_PORT))
#define DIO118 118
#define DIO118_PORT ANALOG4_PORT
#define DIO118_BIT ANALOG4_BIT
#define DIO118_GPIO ANALOG4_GPIO
#endif
#if (defined(ANALOG5_PORT) && defined(ANALOG5_BIT))
#define ANALOG5 119
#define ANALOG5_GPIO (PORTREG(ANALOG5_PORT))
#define DIO119 119
#define DIO119_PORT ANALOG5_PORT
#define DIO119_BIT ANALOG5_BIT
#define DIO119_GPIO ANALOG5_GPIO
#endif
#if (defined(ANALOG6_PORT) && defined(ANALOG6_BIT))
#define ANALOG6 120
#define ANALOG6_GPIO (PORTREG(ANALOG6_PORT))
#define DIO120 120
#define DIO120_PORT ANALOG6_PORT
#define DIO120_BIT ANALOG6_BIT
#define DIO120_GPIO ANALOG6_GPIO
#endif
#if (defined(ANALOG7_PORT) && defined(ANALOG7_BIT))
#define ANALOG7 121
#define ANALOG7_GPIO (PORTREG(ANALOG7_PORT))
#define DIO121 121
#define DIO121_PORT ANALOG7_PORT
#define DIO121_BIT ANALOG7_BIT
#define DIO121_GPIO ANALOG7_GPIO
#endif
#if (defined(ANALOG8_PORT) && defined(ANALOG8_BIT))
#define ANALOG8 122
#define ANALOG8_GPIO (PORTREG(ANALOG8_PORT))
#define DIO122 122
#define DIO122_PORT ANALOG8_PORT
#define DIO122_BIT ANALOG8_BIT
#define DIO122_GPIO ANALOG8_GPIO
#endif
#if (defined(ANALOG9_PORT) && defined(ANALOG9_BIT))
#define ANALOG9 123
#define ANALOG9_GPIO (PORTREG(ANALOG9_PORT))
#define DIO123 123
#define DIO123_PORT ANALOG9_PORT
#define DIO123_BIT ANALOG9_BIT
#define DIO123_GPIO ANALOG9_GPIO
#endif
#if (defined(ANALOG10_PORT) && defined(ANALOG10_BIT))
#define ANALOG10 124
#define ANALOG10_GPIO (PORTREG(ANALOG10_PORT))
#define DIO124 124
#define DIO124_PORT ANALOG10_PORT
#define DIO124_BIT ANALOG10_BIT
#define DIO124_GPIO ANALOG10_GPIO
#endif
#if (defined(ANALOG11_PORT) && defined(ANALOG11_BIT))
#define ANALOG11 125
#define ANALOG11_GPIO (PORTREG(ANALOG11_PORT))
#define DIO125 125
#define DIO125_PORT ANALOG11_PORT
#define DIO125_BIT ANALOG11_BIT
#define DIO125_GPIO ANALOG11_GPIO
#endif
#if (defined(ANALOG12_PORT) && defined(ANALOG12_BIT))
#define ANALOG12 126
#define ANALOG12_GPIO (PORTREG(ANALOG12_PORT))
#define DIO126 126
#define DIO126_PORT ANALOG12_PORT
#define DIO126_BIT ANALOG12_BIT
#define DIO126_GPIO ANALOG12_GPIO
#endif
#if (defined(ANALOG13_PORT) && defined(ANALOG13_BIT))
#define ANALOG13 127
#define ANALOG13_GPIO (PORTREG(ANALOG13_PORT))
#define DIO127 127
#define DIO127_PORT ANALOG13_PORT
#define DIO127_BIT ANALOG13_BIT
#define DIO127_GPIO ANALOG13_GPIO
#endif
#if (defined(ANALOG14_PORT) && defined(ANALOG14_BIT))
#define ANALOG14 128
#define ANALOG14_GPIO (PORTREG(ANALOG14_PORT))
#define DIO128 128
#define DIO128_PORT ANALOG14_PORT
#define DIO128_BIT ANALOG14_BIT
#define DIO128_GPIO ANALOG14_GPIO
#endif
#if (defined(ANALOG15_PORT) && defined(ANALOG15_BIT))
#define ANALOG15 129
#define ANALOG15_GPIO (PORTREG(ANALOG15_PORT))
#define DIO129 129
#define DIO129_PORT ANALOG15_PORT
#define DIO129_BIT ANALOG15_BIT
#define DIO129_GPIO ANALOG15_GPIO
#endif
#if (defined(DIN0_PORT) && defined(DIN0_BIT))
#define DIN0 130
#define DIN0_GPIO (PORTREG(DIN0_PORT))
#define DIO130 130
#define DIO130_PORT DIN0_PORT
#define DIO130_BIT DIN0_BIT
#define DIO130_GPIO DIN0_GPIO
#endif
#if (defined(DIN1_PORT) && defined(DIN1_BIT))
#define DIN1 131
#define DIN1_GPIO (PORTREG(DIN1_PORT))
#define DIO131 131
#define DIO131_PORT DIN1_PORT
#define DIO131_BIT DIN1_BIT
#define DIO131_GPIO DIN1_GPIO
#endif
#if (defined(DIN2_PORT) && defined(DIN2_BIT))
#define DIN2 132
#define DIN2_GPIO (PORTREG(DIN2_PORT))
#define DIO132 132
#define DIO132_PORT DIN2_PORT
#define DIO132_BIT DIN2_BIT
#define DIO132_GPIO DIN2_GPIO
#endif
#if (defined(DIN3_PORT) && defined(DIN3_BIT))
#define DIN3 133
#define DIN3_GPIO (PORTREG(DIN3_PORT))
#define DIO133 133
#define DIO133_PORT DIN3_PORT
#define DIO133_BIT DIN3_BIT
#define DIO133_GPIO DIN3_GPIO
#endif
#if (defined(DIN4_PORT) && defined(DIN4_BIT))
#define DIN4 134
#define DIN4_GPIO (PORTREG(DIN4_PORT))
#define DIO134 134
#define DIO134_PORT DIN4_PORT
#define DIO134_BIT DIN4_BIT
#define DIO134_GPIO DIN4_GPIO
#endif
#if (defined(DIN5_PORT) && defined(DIN5_BIT))
#define DIN5 135
#define DIN5_GPIO (PORTREG(DIN5_PORT))
#define DIO135 135
#define DIO135_PORT DIN5_PORT
#define DIO135_BIT DIN5_BIT
#define DIO135_GPIO DIN5_GPIO
#endif
#if (defined(DIN6_PORT) && defined(DIN6_BIT))
#define DIN6 136
#define DIN6_GPIO (PORTREG(DIN6_PORT))
#define DIO136 136
#define DIO136_PORT DIN6_PORT
#define DIO136_BIT DIN6_BIT
#define DIO136_GPIO DIN6_GPIO
#endif
#if (defined(DIN7_PORT) && defined(DIN7_BIT))
#define DIN7 137
#define DIN7_GPIO (PORTREG(DIN7_PORT))
#define DIO137 137
#define DIO137_PORT DIN7_PORT
#define DIO137_BIT DIN7_BIT
#define DIO137_GPIO DIN7_GPIO
#endif
#if (defined(DIN8_PORT) && defined(DIN8_BIT))
#define DIN8 138
#define DIN8_GPIO (PORTREG(DIN8_PORT))
#define DIO138 138
#define DIO138_PORT DIN8_PORT
#define DIO138_BIT DIN8_BIT
#define DIO138_GPIO DIN8_GPIO
#endif
#if (defined(DIN9_PORT) && defined(DIN9_BIT))
#define DIN9 139
#define DIN9_GPIO (PORTREG(DIN9_PORT))
#define DIO139 139
#define DIO139_PORT DIN9_PORT
#define DIO139_BIT DIN9_BIT
#define DIO139_GPIO DIN9_GPIO
#endif
#if (defined(DIN10_PORT) && defined(DIN10_BIT))
#define DIN10 140
#define DIN10_GPIO (PORTREG(DIN10_PORT))
#define DIO140 140
#define DIO140_PORT DIN10_PORT
#define DIO140_BIT DIN10_BIT
#define DIO140_GPIO DIN10_GPIO
#endif
#if (defined(DIN11_PORT) && defined(DIN11_BIT))
#define DIN11 141
#define DIN11_GPIO (PORTREG(DIN11_PORT))
#define DIO141 141
#define DIO141_PORT DIN11_PORT
#define DIO141_BIT DIN11_BIT
#define DIO141_GPIO DIN11_GPIO
#endif
#if (defined(DIN12_PORT) && defined(DIN12_BIT))
#define DIN12 142
#define DIN12_GPIO (PORTREG(DIN12_PORT))
#define DIO142 142
#define DIO142_PORT DIN12_PORT
#define DIO142_BIT DIN12_BIT
#define DIO142_GPIO DIN12_GPIO
#endif
#if (defined(DIN13_PORT) && defined(DIN13_BIT))
#define DIN13 143
#define DIN13_GPIO (PORTREG(DIN13_PORT))
#define DIO143 143
#define DIO143_PORT DIN13_PORT
#define DIO143_BIT DIN13_BIT
#define DIO143_GPIO DIN13_GPIO
#endif
#if (defined(DIN14_PORT) && defined(DIN14_BIT))
#define DIN14 144
#define DIN14_GPIO (PORTREG(DIN14_PORT))
#define DIO144 144
#define DIO144_PORT DIN14_PORT
#define DIO144_BIT DIN14_BIT
#define DIO144_GPIO DIN14_GPIO
#endif
#if (defined(DIN15_PORT) && defined(DIN15_BIT))
#define DIN15 145
#define DIN15_GPIO (PORTREG(DIN15_PORT))
#define DIO145 145
#define DIO145_PORT DIN15_PORT
#define DIO145_BIT DIN15_BIT
#define DIO145_GPIO DIN15_GPIO
#endif
#if (defined(DIN16_PORT) && defined(DIN16_BIT))
#define DIN16 146
#define DIN16_GPIO (PORTREG(DIN16_PORT))
#define DIO146 146
#define DIO146_PORT DIN16_PORT
#define DIO146_BIT DIN16_BIT
#define DIO146_GPIO DIN16_GPIO
#endif
#if (defined(DIN17_PORT) && defined(DIN17_BIT))
#define DIN17 147
#define DIN17_GPIO (PORTREG(DIN17_PORT))
#define DIO147 147
#define DIO147_PORT DIN17_PORT
#define DIO147_BIT DIN17_BIT
#define DIO147_GPIO DIN17_GPIO
#endif
#if (defined(DIN18_PORT) && defined(DIN18_BIT))
#define DIN18 148
#define DIN18_GPIO (PORTREG(DIN18_PORT))
#define DIO148 148
#define DIO148_PORT DIN18_PORT
#define DIO148_BIT DIN18_BIT
#define DIO148_GPIO DIN18_GPIO
#endif
#if (defined(DIN19_PORT) && defined(DIN19_BIT))
#define DIN19 149
#define DIN19_GPIO (PORTREG(DIN19_PORT))
#define DIO149 149
#define DIO149_PORT DIN19_PORT
#define DIO149_BIT DIN19_BIT
#define DIO149_GPIO DIN19_GPIO
#endif
#if (defined(DIN20_PORT) && defined(DIN20_BIT))
#define DIN20 150
#define DIN20_GPIO (PORTREG(DIN20_PORT))
#define DIO150 150
#define DIO150_PORT DIN20_PORT
#define DIO150_BIT DIN20_BIT
#define DIO150_GPIO DIN20_GPIO
#endif
#if (defined(DIN21_PORT) && defined(DIN21_BIT))
#define DIN21 151
#define DIN21_GPIO (PORTREG(DIN21_PORT))
#define DIO151 151
#define DIO151_PORT DIN21_PORT
#define DIO151_BIT DIN21_BIT
#define DIO151_GPIO DIN21_GPIO
#endif
#if (defined(DIN22_PORT) && defined(DIN22_BIT))
#define DIN22 152
#define DIN22_GPIO (PORTREG(DIN22_PORT))
#define DIO152 152
#define DIO152_PORT DIN22_PORT
#define DIO152_BIT DIN22_BIT
#define DIO152_GPIO DIN22_GPIO
#endif
#if (defined(DIN23_PORT) && defined(DIN23_BIT))
#define DIN23 153
#define DIN23_GPIO (PORTREG(DIN23_PORT))
#define DIO153 153
#define DIO153_PORT DIN23_PORT
#define DIO153_BIT DIN23_BIT
#define DIO153_GPIO DIN23_GPIO
#endif
#if (defined(DIN24_PORT) && defined(DIN24_BIT))
#define DIN24 154
#define DIN24_GPIO (PORTREG(DIN24_PORT))
#define DIO154 154
#define DIO154_PORT DIN24_PORT
#define DIO154_BIT DIN24_BIT
#define DIO154_GPIO DIN24_GPIO
#endif
#if (defined(DIN25_PORT) && defined(DIN25_BIT))
#define DIN25 155
#define DIN25_GPIO (PORTREG(DIN25_PORT))
#define DIO155 155
#define DIO155_PORT DIN25_PORT
#define DIO155_BIT DIN25_BIT
#define DIO155_GPIO DIN25_GPIO
#endif
#if (defined(DIN26_PORT) && defined(DIN26_BIT))
#define DIN26 156
#define DIN26_GPIO (PORTREG(DIN26_PORT))
#define DIO156 156
#define DIO156_PORT DIN26_PORT
#define DIO156_BIT DIN26_BIT
#define DIO156_GPIO DIN26_GPIO
#endif
#if (defined(DIN27_PORT) && defined(DIN27_BIT))
#define DIN27 157
#define DIN27_GPIO (PORTREG(DIN27_PORT))
#define DIO157 157
#define DIO157_PORT DIN27_PORT
#define DIO157_BIT DIN27_BIT
#define DIO157_GPIO DIN27_GPIO
#endif
#if (defined(DIN28_PORT) && defined(DIN28_BIT))
#define DIN28 158
#define DIN28_GPIO (PORTREG(DIN28_PORT))
#define DIO158 158
#define DIO158_PORT DIN28_PORT
#define DIO158_BIT DIN28_BIT
#define DIO158_GPIO DIN28_GPIO
#endif
#if (defined(DIN29_PORT) && defined(DIN29_BIT))
#define DIN29 159
#define DIN29_GPIO (PORTREG(DIN29_PORT))
#define DIO159 159
#define DIO159_PORT DIN29_PORT
#define DIO159_BIT DIN29_BIT
#define DIO159_GPIO DIN29_GPIO
#endif
#if (defined(DIN30_PORT) && defined(DIN30_BIT))
#define DIN30 160
#define DIN30_GPIO (PORTREG(DIN30_PORT))
#define DIO160 160
#define DIO160_PORT DIN30_PORT
#define DIO160_BIT DIN30_BIT
#define DIO160_GPIO DIN30_GPIO
#endif
#if (defined(DIN31_PORT) && defined(DIN31_BIT))
#define DIN31 161
#define DIN31_GPIO (PORTREG(DIN31_PORT))
#define DIO161 161
#define DIO161_PORT DIN31_PORT
#define DIO161_BIT DIN31_BIT
#define DIO161_GPIO DIN31_GPIO
#endif
#if (defined(DIN32_PORT) && defined(DIN32_BIT))
#define DIN32 162
#define DIN32_GPIO (PORTREG(DIN32_PORT))
#define DIO162 162
#define DIO162_PORT DIN32_PORT
#define DIO162_BIT DIN32_BIT
#define DIO162_GPIO DIN32_GPIO
#endif
#if (defined(DIN33_PORT) && defined(DIN33_BIT))
#define DIN33 163
#define DIN33_GPIO (PORTREG(DIN33_PORT))
#define DIO163 163
#define DIO163_PORT DIN33_PORT
#define DIO163_BIT DIN33_BIT
#define DIO163_GPIO DIN33_GPIO
#endif
#if (defined(DIN34_PORT) && defined(DIN34_BIT))
#define DIN34 164
#define DIN34_GPIO (PORTREG(DIN34_PORT))
#define DIO164 164
#define DIO164_PORT DIN34_PORT
#define DIO164_BIT DIN34_BIT
#define DIO164_GPIO DIN34_GPIO
#endif
#if (defined(DIN35_PORT) && defined(DIN35_BIT))
#define DIN35 165
#define DIN35_GPIO (PORTREG(DIN35_PORT))
#define DIO165 165
#define DIO165_PORT DIN35_PORT
#define DIO165_BIT DIN35_BIT
#define DIO165_GPIO DIN35_GPIO
#endif
#if (defined(DIN36_PORT) && defined(DIN36_BIT))
#define DIN36 166
#define DIN36_GPIO (PORTREG(DIN36_PORT))
#define DIO166 166
#define DIO166_PORT DIN36_PORT
#define DIO166_BIT DIN36_BIT
#define DIO166_GPIO DIN36_GPIO
#endif
#if (defined(DIN37_PORT) && defined(DIN37_BIT))
#define DIN37 167
#define DIN37_GPIO (PORTREG(DIN37_PORT))
#define DIO167 167
#define DIO167_PORT DIN37_PORT
#define DIO167_BIT DIN37_BIT
#define DIO167_GPIO DIN37_GPIO
#endif
#if (defined(DIN38_PORT) && defined(DIN38_BIT))
#define DIN38 168
#define DIN38_GPIO (PORTREG(DIN38_PORT))
#define DIO168 168
#define DIO168_PORT DIN38_PORT
#define DIO168_BIT DIN38_BIT
#define DIO168_GPIO DIN38_GPIO
#endif
#if (defined(DIN39_PORT) && defined(DIN39_BIT))
#define DIN39 169
#define DIN39_GPIO (PORTREG(DIN39_PORT))
#define DIO169 169
#define DIO169_PORT DIN39_PORT
#define DIO169_BIT DIN39_BIT
#define DIO169_GPIO DIN39_GPIO
#endif
#if (defined(DIN40_PORT) && defined(DIN40_BIT))
#define DIN40 170
#define DIN40_GPIO (PORTREG(DIN40_PORT))
#define DIO170 170
#define DIO170_PORT DIN40_PORT
#define DIO170_BIT DIN40_BIT
#define DIO170_GPIO DIN40_GPIO
#endif
#if (defined(DIN41_PORT) && defined(DIN41_BIT))
#define DIN41 171
#define DIN41_GPIO (PORTREG(DIN41_PORT))
#define DIO171 171
#define DIO171_PORT DIN41_PORT
#define DIO171_BIT DIN41_BIT
#define DIO171_GPIO DIN41_GPIO
#endif
#if (defined(DIN42_PORT) && defined(DIN42_BIT))
#define DIN42 172
#define DIN42_GPIO (PORTREG(DIN42_PORT))
#define DIO172 172
#define DIO172_PORT DIN42_PORT
#define DIO172_BIT DIN42_BIT
#define DIO172_GPIO DIN42_GPIO
#endif
#if (defined(DIN43_PORT) && defined(DIN43_BIT))
#define DIN43 173
#define DIN43_GPIO (PORTREG(DIN43_PORT))
#define DIO173 173
#define DIO173_PORT DIN43_PORT
#define DIO173_BIT DIN43_BIT
#define DIO173_GPIO DIN43_GPIO
#endif
#if (defined(DIN44_PORT) && defined(DIN44_BIT))
#define DIN44 174
#define DIN44_GPIO (PORTREG(DIN44_PORT))
#define DIO174 174
#define DIO174_PORT DIN44_PORT
#define DIO174_BIT DIN44_BIT
#define DIO174_GPIO DIN44_GPIO
#endif
#if (defined(DIN45_PORT) && defined(DIN45_BIT))
#define DIN45 175
#define DIN45_GPIO (PORTREG(DIN45_PORT))
#define DIO175 175
#define DIO175_PORT DIN45_PORT
#define DIO175_BIT DIN45_BIT
#define DIO175_GPIO DIN45_GPIO
#endif
#if (defined(DIN46_PORT) && defined(DIN46_BIT))
#define DIN46 176
#define DIN46_GPIO (PORTREG(DIN46_PORT))
#define DIO176 176
#define DIO176_PORT DIN46_PORT
#define DIO176_BIT DIN46_BIT
#define DIO176_GPIO DIN46_GPIO
#endif
#if (defined(DIN47_PORT) && defined(DIN47_BIT))
#define DIN47 177
#define DIN47_GPIO (PORTREG(DIN47_PORT))
#define DIO177 177
#define DIO177_PORT DIN47_PORT
#define DIO177_BIT DIN47_BIT
#define DIO177_GPIO DIN47_GPIO
#endif
#if (defined(DIN48_PORT) && defined(DIN48_BIT))
#define DIN48 178
#define DIN48_GPIO (PORTREG(DIN48_PORT))
#define DIO178 178
#define DIO178_PORT DIN48_PORT
#define DIO178_BIT DIN48_BIT
#define DIO178_GPIO DIN48_GPIO
#endif
#if (defined(DIN49_PORT) && defined(DIN49_BIT))
#define DIN49 179
#define DIN49_GPIO (PORTREG(DIN49_PORT))
#define DIO179 179
#define DIO179_PORT DIN49_PORT
#define DIO179_BIT DIN49_BIT
#define DIO179_GPIO DIN49_GPIO
#endif
#if (defined(TX_PORT) && defined(TX_BIT))
#define TX 200
#define TX_GPIO (PORTREG(TX_PORT))
#define DIO200 200
#define DIO200_PORT TX_PORT
#define DIO200_BIT TX_BIT
#define DIO200_GPIO TX_GPIO
#endif
#if (defined(RX_PORT) && defined(RX_BIT))
#define RX 201
#define RX_GPIO (PORTREG(RX_PORT))
#define DIO201 201
#define DIO201_PORT RX_PORT
#define DIO201_BIT RX_BIT
#define DIO201_GPIO RX_GPIO
#endif
#if (defined(USB_DM_PORT) && defined(USB_DM_BIT))
#define USB_DM 202
#define USB_DM_GPIO (PORTREG(USB_DM_PORT))
#define DIO202 202
#define DIO202_PORT USB_DM_PORT
#define DIO202_BIT USB_DM_BIT
#define DIO202_GPIO USB_DM_GPIO
#endif
#if (defined(USB_DP_PORT) && defined(USB_DP_BIT))
#define USB_DP 203
#define USB_DP_GPIO (PORTREG(USB_DP_PORT))
#define DIO203 203
#define DIO203_PORT USB_DP_PORT
#define DIO203_BIT USB_DP_BIT
#define DIO203_GPIO USB_DP_GPIO
#endif
#if (defined(SPI_CLK_PORT) && defined(SPI_CLK_BIT))
#define SPI_CLK 204
#define SPI_CLK_GPIO (PORTREG(SPI_CLK_PORT))
#define DIO204 204
#define DIO204_PORT SPI_CLK_PORT
#define DIO204_BIT SPI_CLK_BIT
#define DIO204_GPIO SPI_CLK_GPIO
#endif
#if (defined(SPI_SDI_PORT) && defined(SPI_SDI_BIT))
#define SPI_SDI 205
#define SPI_SDI_GPIO (PORTREG(SPI_SDI_PORT))
#define DIO205 205
#define DIO205_PORT SPI_SDI_PORT
#define DIO205_BIT SPI_SDI_BIT
#define DIO205_GPIO SPI_SDI_GPIO
#endif
#if (defined(SPI_SDO_PORT) && defined(SPI_SDO_BIT))
#define SPI_SDO 206
#define SPI_SDO_GPIO (PORTREG(SPI_SDO_PORT))
#define DIO206 206
#define DIO206_PORT SPI_SDO_PORT
#define DIO206_BIT SPI_SDO_BIT
#define DIO206_GPIO SPI_SDO_GPIO
#endif
#if (defined(SPI_CS_PORT) && defined(SPI_CS_BIT))
#define SPI_CS 207
#define SPI_CS_GPIO (PORTREG(SPI_CS_PORT))
#define DIO207 207
#define DIO207_PORT SPI_CS_PORT
#define DIO207_BIT SPI_CS_BIT
#define DIO207_GPIO SPI_CS_GPIO
#endif
#if (defined(I2C_CLK_PORT) && defined(I2C_CLK_BIT))
#define I2C_CLK 208
#define I2C_CLK_GPIO (PORTREG(I2C_CLK_PORT))
#define DIO208 208
#define DIO208_PORT I2C_CLK_PORT
#define DIO208_BIT I2C_CLK_BIT
#define DIO208_GPIO I2C_CLK_GPIO
#endif
#if (defined(I2C_DATA_PORT) && defined(I2C_DATA_BIT))
#define I2C_DATA 209
#define I2C_DATA_GPIO (PORTREG(I2C_DATA_PORT))
#define DIO209 209
#define DIO209_PORT I2C_DATA_PORT
#define DIO209_BIT I2C_DATA_BIT
#define DIO209_GPIO I2C_DATA_GPIO
#endif
#if (defined(TX2_PORT) && defined(TX2_BIT))
#define TX2 210
#define TX2_GPIO (PORTREG(TX2_PORT))
#define DIO210 210
#define DIO210_PORT TX2_PORT
#define DIO210_BIT TX2_BIT
#define DIO210_GPIO TX2_GPIO
#endif
#if (defined(RX2_PORT) && defined(RX2_BIT))
#define RX2 211
#define RX2_GPIO (PORTREG(RX2_PORT))
#define DIO211 211
#define DIO211_PORT RX2_PORT
#define DIO211_BIT RX2_BIT
#define DIO211_GPIO RX2_GPIO
#endif
#if (defined(SPI2_CLK_PORT) && defined(SPI2_CLK_BIT))
#define SPI2_CLK 212
#define SPI2_CLK_GPIO (PORTREG(SPI2_CLK_PORT))
#define DIO212 212
#define DIO212_PORT SPI2_CLK_PORT
#define DIO212_BIT SPI2_CLK_BIT
#define DIO212_GPIO SPI2_CLK_GPIO
#endif
#if (defined(SPI2_SDI_PORT) && defined(SPI2_SDI_BIT))
#define SPI2_SDI 213
#define SPI2_SDI_GPIO (PORTREG(SPI2_SDI_PORT))
#define DIO213 213
#define DIO213_PORT SPI2_SDI_PORT
#define DIO213_BIT SPI2_SDI_BIT
#define DIO213_GPIO SPI2_SDI_GPIO
#endif
#if (defined(SPI2_SDO_PORT) && defined(SPI2_SDO_BIT))
#define SPI2_SDO 214
#define SPI2_SDO_GPIO (PORTREG(SPI2_SDO_PORT))
#define DIO214 214
#define DIO214_PORT SPI2_SDO_PORT
#define DIO214_BIT SPI2_SDO_BIT
#define DIO214_GPIO SPI2_SDO_GPIO
#endif
#if (defined(SPI2_CS_PORT) && defined(SPI2_CS_BIT))
#define SPI2_CS 215
#define SPI2_CS_GPIO (PORTREG(SPI2_CS_PORT))
#define DIO215 215
#define DIO215_PORT SPI2_CS_PORT
#define DIO215_BIT SPI2_CS_BIT
#define DIO215_GPIO SPI2_CS_GPIO
#endif

#if (defined(TX) && defined(RX))
#define MCU_HAS_UART
#endif
#if (defined(TX2) && defined(RX2))
#define MCU_HAS_UART2
#endif
#if (defined(USB_DP) && defined(USB_DM))
#define MCU_HAS_USB
	extern uint32_t tud_cdc_n_write_available(uint8_t itf);
	extern uint32_t tud_cdc_n_available(uint8_t itf);
	extern bool tud_cdc_n_connected(uint8_t itf);
#define usb_tx_available() (tud_cdc_n_write_available(0) || !tud_cdc_n_connected(0))
#define usb_rx_available() tud_cdc_n_available(0)
#endif

#define __pinmuxevenodd0 PMUXE
#define __pinmuxevenodd2 PMUXE
#define __pinmuxevenodd4 PMUXE
#define __pinmuxevenodd6 PMUXE
#define __pinmuxevenodd8 PMUXE
#define __pinmuxevenodd10 PMUXE
#define __pinmuxevenodd12 PMUXE
#define __pinmuxevenodd14 PMUXE
#define __pinmuxevenodd16 PMUXE
#define __pinmuxevenodd18 PMUXE
#define __pinmuxevenodd20 PMUXE
#define __pinmuxevenodd22 PMUXE
#define __pinmuxevenodd24 PMUXE
#define __pinmuxevenodd26 PMUXE
#define __pinmuxevenodd28 PMUXE
#define __pinmuxevenodd30 PMUXE
#define __pinmuxevenodd1 PMUXO
#define __pinmuxevenodd3 PMUXO
#define __pinmuxevenodd5 PMUXO
#define __pinmuxevenodd7 PMUXO
#define __pinmuxevenodd9 PMUXO
#define __pinmuxevenodd11 PMUXO
#define __pinmuxevenodd13 PMUXO
#define __pinmuxevenodd15 PMUXO
#define __pinmuxevenodd17 PMUXO
#define __pinmuxevenodd19 PMUXO
#define __pinmuxevenodd21 PMUXO
#define __pinmuxevenodd23 PMUXO
#define __pinmuxevenodd25 PMUXO
#define __pinmuxevenodd27 PMUXO
#define __pinmuxevenodd29 PMUXO
#define __pinmuxevenodd31 PMUXO
#define pinmuxevenodd(X) __pinmuxevenodd##X
#define __pinmux__(X, Y, Z) (X.PMUX[Y >> 1].bit.Z)
#define pinmux(X, Y) (__pinmux__(PORTREG(X), (Y), pinmuxevenodd(Y)))

#define pinmuxval_A (0x0U)
#define pinmuxval_B (0x1U)
#define pinmuxval_C (0x2U)
#define pinmuxval_D (0x3U)
#define pinmuxval_E (0x4U)
#define pinmuxval_F (0x5U)
#define pinmuxval_G (0x6U)
#define pinmuxval_H (0x7U)
#define _pinmuxval(X) (pinmuxval_##X)
#define pinmuxval(X) (_pinmuxval(X))

	// #define sercompad_RX_0 (0x0U)
	// #define sercompad_RX_1 (0x1U)
	// #define sercompad_RX_2 (0x2U)
	// #define sercompad_RX_3 (0x3U)
	// #define sercompad_TX_0 (0x2U)
	// #define sercompad_TX_2 (0x1U)
	// #define _sercompad(X, Y) (sercompad##X##_##Y)
	// #define sercompad(X, Y) (_sercompad(X, Y))

#define SERCOMPADRX_0_A8 0
#define SERCOMPADRX_0_A9 1
#define SERCOMPADRX_0_A10 2
#define SERCOMPADRX_0_A11 3
#define SERCOMPADRX_1_A16 0
#define SERCOMPADRX_1_A17 1
#define SERCOMPADRX_1_A18 2
#define SERCOMPADRX_1_A19 3
#define SERCOMPADRX_2_A12 0
#define SERCOMPADRX_2_A13 1
#define SERCOMPADRX_2_A14 2
#define SERCOMPADRX_2_A15 3
#define SERCOMPADRX_3_A22 0
#define SERCOMPADRX_3_A23 1
#define SERCOMPADRX_3_A24 2
#define SERCOMPADRX_3_A25 3
#define SERCOMPADRX_5_A20 2
#define SERCOMPADRX_5_A21 3

#define SERCOMPADTX_0_A8 0
#define SERCOMPADTX_0_A10 2
#define SERCOMPADTX_1_A16 0
#define SERCOMPADTX_1_A18 2
#define SERCOMPADTX_2_A12 0
#define SERCOMPADTX_2_A14 2
#define SERCOMPADTX_3_A22 0
#define SERCOMPADTX_3_A24 2
#define SERCOMPADTX_5_A20 2

// SERCOMPAD_ALT
#define SERCOMPADRX_0_A4 0x0U
#define SERCOMPADRX_0_A5 0x1U
#define SERCOMPADRX_0_A6 0x2U
#define SERCOMPADRX_0_A7 0x3U
#define SERCOMPADRX_1_A0 0x0U
#define SERCOMPADRX_1_A1 0x1U
#define SERCOMPADRX_1_B30 0x2U
#define SERCOMPADRX_1_A31 0x3U
#define SERCOMPADRX_2_A8 0x0U
#define SERCOMPADRX_2_A9 0x1U
#define SERCOMPADRX_2_A10 0x2U
#define SERCOMPADRX_2_A11 0x3U
#define SERCOMPADRX_3_A16 0x0U
#define SERCOMPADRX_3_A17 0x1U
#define SERCOMPADRX_3_A18 0x2U
#define SERCOMPADRX_3_A19 0x3U
#define SERCOMPADRX_3_A20 0x2U
#define SERCOMPADRX_3_A21 0x3U
#define SERCOMPADRX_4_B8 0x0U
#define SERCOMPADRX_4_B9 0x1U
#define SERCOMPADRX_4_A10 0x2U
#define SERCOMPADRX_4_A11 0x3U
#define SERCOMPADRX_4_A12 0x0U
#define SERCOMPADRX_4_A13 0x1U
#define SERCOMPADRX_4_A14 0x2U
#define SERCOMPADRX_4_A15 0x3U
#define SERCOMPADRX_5_A22 0x0U
#define SERCOMPADRX_5_A23 0x1U
#define SERCOMPADRX_5_A24 0x2U
#define SERCOMPADRX_5_A25 0x3U
#define SERCOMPADRX_5_B2 0x0U
#define SERCOMPADRX_5_B3 0x1U
#define SERCOMPADRX_5_B22 0x2U
#define SERCOMPADRX_5_B23 0x3U

#define SERCOMPADTX_0_A4 0x2U
#define SERCOMPADTX_0_A6 0x1U
#define SERCOMPADTX_1_A0 0x2U
#define SERCOMPADTX_1_B30 0x1U
#define SERCOMPADTX_2_A8 0x2U
#define SERCOMPADTX_2_A10 0x1U
#define SERCOMPADTX_3_A16 0x2U
#define SERCOMPADTX_3_A18 0x1U
#define SERCOMPADTX_3_A20 0x1U
#define SERCOMPADTX_4_B8 0x2U
#define SERCOMPADTX_4_A10 0x1U
#define SERCOMPADTX_4_A12 0x2U
#define SERCOMPADTX_4_A14 0x1U
#define SERCOMPADTX_5_A22 0x2U
#define SERCOMPADTX_5_A24 0x1U
#define SERCOMPADTX_5_B2 0x2U
#define SERCOMPADTX_5_B22 0x1U

#define _sercompad(W, X, Y, Z) (SERCOMPAD##W##X##_##Y##Z)
#define sercompad(W, X, Y, Z) (_sercompad(W, X, Y, Z))

#define SERCOMMUX_0_A8 0x2U
#define SERCOMMUX_0_A9 0x2U
#define SERCOMMUX_0_A10 0x2U
#define SERCOMMUX_0_A11 0x2U
#define SERCOMMUX_1_A16 0x2U
#define SERCOMMUX_1_A17 0x2U
#define SERCOMMUX_1_A18 0x2U
#define SERCOMMUX_1_A19 0x2U
#define SERCOMMUX_2_A12 0x2U
#define SERCOMMUX_2_A13 0x2U
#define SERCOMMUX_2_A14 0x2U
#define SERCOMMUX_2_A15 0x2U
#define SERCOMMUX_3_A22 0x2U
#define SERCOMMUX_3_A23 0x2U
#define SERCOMMUX_3_A24 0x2U
#define SERCOMMUX_3_A25 0x2U
#define SERCOMMUX_5_A20 0x2U
#define SERCOMMUX_5_A21 0x2U
// SERCOMMUX_ALT
#define SERCOMMUX_0_A4 0x3U
#define SERCOMMUX_0_A5 0x3U
#define SERCOMMUX_0_A6 0x3U
#define SERCOMMUX_0_A7 0x3U
#define SERCOMMUX_1_A0 0x3U
#define SERCOMMUX_1_A1 0x3U
#define SERCOMMUX_1_B30 0x3U
#define SERCOMMUX_1_A31 0x3U
#define SERCOMMUX_2_A8 0x3U
#define SERCOMMUX_2_A9 0x3U
#define SERCOMMUX_2_A10 0x3U
#define SERCOMMUX_2_A11 0x3U
#define SERCOMMUX_3_A16 0x3U
#define SERCOMMUX_3_A17 0x3U
#define SERCOMMUX_3_A18 0x3U
#define SERCOMMUX_3_A19 0x3U
#define SERCOMMUX_3_A20 0x3U
#define SERCOMMUX_3_A21 0x3U
#define SERCOMMUX_4_B8 0x3U
#define SERCOMMUX_4_B9 0x3U
#define SERCOMMUX_4_A10 0x3U
#define SERCOMMUX_4_A11 0x3U
#define SERCOMMUX_4_A12 0x3U
#define SERCOMMUX_4_A13 0x3U
#define SERCOMMUX_4_A14 0x3U
#define SERCOMMUX_4_A15 0x3U
#define SERCOMMUX_5_A22 0x3U
#define SERCOMMUX_5_A23 0x3U
#define SERCOMMUX_5_A24 0x3U
#define SERCOMMUX_5_A25 0x3U
#define SERCOMMUX_5_B2 0x3U
#define SERCOMMUX_5_B3 0x3U
#define SERCOMMUX_5_B22 0x3U
#define SERCOMMUX_5_B23 0x3U
#define _sercommux_pin(X, Y, Z) (SERCOMMUX_##X##_##Y##Z)
#define sercommux_pin(X, Y, Z) (_sercommux_pin(X, Y, Z))

#ifdef MCU_HAS_USB
#define USB_DM_PMUX (pinmux(USB_DM_PORT, USB_DM_BIT))
#define USB_DM_PMUXVAL (pinmuxval(USB_DM_MUX))
#define DIO202_PMUX USB_DM_PMUX
#define DIO202_PMUXVAL USB_DM_PMUXVAL
#define USB_DP_PMUX (pinmux(USB_DP_PORT, USB_DP_BIT))
#define USB_DP_PMUXVAL (pinmuxval(USB_DP_MUX))
#define DIO203_PMUX USB_DP_PMUX
#define DIO203_PMUXVAL USB_DP_PMUXVAL
#ifdef USBCON
#undef USBCON
#endif
#endif

#ifdef MCU_HAS_UART
// Arduino already uses SERCOM0 and SERCOM 1
#ifndef BAUDRATE2
#define BAUDRATE2 BAUDRATE
#endif
#ifndef UART_PORT
#define UART_PORT 2
#endif
#define TX_PMUX (pinmux(TX_PORT, TX_BIT))
#define TX_PMUXVAL (sercommux_pin(UART_PORT, TX_PORT, TX_BIT))
#define DIO200_PMUX TX_PMUX
#define DIO200_PMUXVAL TX_PMUXVAL
#define RX_PMUX (pinmux(RX_PORT, RX_BIT))
#define RX_PMUXVAL (sercommux_pin(UART_PORT, RX_PORT, RX_BIT))
#define DIO201_PMUX RX_PMUX
#define DIO201_PMUXVAL RX_PMUXVAL
#define COM_UART __helper__(SERCOM, UART_PORT, )
#define PM_APBCMASK_COM __helper__(PM_APBCMASK_SERCOM, UART_PORT, )
#define GCLK_CLKCTRL_ID_COM __helper__(GCLK_CLKCTRL_ID_SERCOM, UART_PORT, _CORE)
#define COM_IRQ __helper__(SERCOM, UART_PORT, _IRQn)
#define mcu_com_isr __helper__(SERCOM, UART_PORT, _Handler)
#define COM_OUTREG (COM_UART->USART.DATA.reg)
#define COM_INREG (COM_UART->USART.DATA.reg)
#define COM_TX_PAD sercompad(TX_, UART_PORT, TX_PORT, TX_BIT)
#define COM_RX_PAD sercompad(RX_, UART_PORT, RX_PORT, RX_BIT)
#endif

#ifdef MCU_HAS_UART2
#ifndef BAUDRATE2
#define BAUDRATE2 BAUDRATE
#endif
// Arduino already uses SERCOM0 and SERCOM 1
#ifndef UART2_PORT
#define UART2_PORT 2
#endif
#define TX2_PMUX (pinmux(TX2_PORT, TX2_BIT))
#define TX2_PMUXVAL (sercommux_pin(UART2_PORT, TX2_PORT, TX2_BIT))
#define DIO210_PMUX TX2_PMUX
#define DIO210_PMUXVAL TX2_PMUXVAL
#define RX2_PMUX (pinmux(RX2_PORT, RX2_BIT))
#define RX2_PMUXVAL (sercommux_pin(UART2_PORT, RX2_PORT, RX2_BIT))
#define DIO211_PMUX RX2_PMUX
#define DIO211_PMUXVAL RX2_PMUXVAL
#define COM2_UART __helper__(SERCOM, UART2_PORT, )
#define PM_APBCMASK_COM2 __helper__(PM_APBCMASK_SERCOM, UART2_PORT, )
#define GCLK_CLKCTRL_ID_COM2 __helper__(GCLK_CLKCTRL_ID_SERCOM, UART2_PORT, _CORE)
#define COM2_IRQ __helper__(SERCOM, UART2_PORT, _IRQn)
#define mcu_com2_isr __helper__(SERCOM, UART2_PORT, _Handler)
#define COM2_OUTREG (COM2_UART->USART.DATA.reg)
#define COM2_INREG (COM2_UART->USART.DATA.reg)
#define COM2_TX_PAD sercompad(TX_, UART2_PORT, TX2_PORT, TX2_BIT)
#define COM2_RX_PAD sercompad(RX_, UART2_PORT, RX2_PORT, RX2_BIT)
#endif

#if (defined(SPI_CLK) && defined(SPI_SDO) && defined(SPI_SDI))
#define MCU_HAS_SPI
#define MCU_HAS_DMA
#ifndef SPI_PORT
#define SPI_PORT 1
#endif
#ifndef SPI_MODE
#define SPI_MODE 0
#endif
#ifndef SPI_FREQ
#define SPI_FREQ 1000000UL
#endif

#define SPICOM __helper__(SERCOM, SPI_PORT, )
#define PM_APBCMASK_SPICOM __helper__(PM_APBCMASK_SERCOM, SPI_PORT, )
#define GCLK_CLKCTRL_ID_SPICOM __helper__(GCLK_CLKCTRL_ID_SERCOM, SPI_PORT, _CORE)
#define SPI_DATA (SPICOM->SPI.DATA.reg)
#define SPI_OUTPAD 0
#define SPI_INPAD 3

#define SPI_CLK_PMUX (pinmux(SPI_CLK_PORT, SPI_CLK_BIT))
#define SPI_CLK_PMUXVAL (sercommux_pin(SPI_PORT, SPI_CLK_PORT, SPI_CLK_BIT))
#define SPI_SDO_PMUX (pinmux(SPI_SDO_PORT, SPI_SDO_BIT))
#define SPI_SDO_PMUXVAL (sercommux_pin(SPI_PORT, SPI_SDO_PORT, SPI_SDO_BIT))
#define SPI_SDI_PMUX (pinmux(SPI_SDI_PORT, SPI_SDI_BIT))
#define SPI_SDI_PMUXVAL (sercommux_pin(SPI_PORT, SPI_SDI_PORT, SPI_SDI_BIT))

#define DIO204_PMUX SPI_CLK_PMUX
#define DIO204_PMUXVAL SPI_CLK_PMUXVAL
#define DIO205_PMUX SPI_SDI_PMUX
#define DIO205_PMUXVAL SPI_SDI_PMUXVAL
#define DIO206_PMUX SPI_SDO_PMUX
#define DIO206_PMUXVAL SPI_SDO_PMUXVAL

#define SPI_DMA_TRIGSRC_RX ((SPI_PORT << 1) + 1)
#define SPI_DMA_TRIGSRC_TX ((SPI_PORT << 1) + 2)

#define SPI_IRQ __helper__(SERCOM, SPI_PORT, _IRQn)
#define SPI_ISR __helper__(SERCOM, SPI_PORT, _Handler)

#if (SPI_PORT != 1 && SPI_PORT != 3)
#error "SPI PORT is not valid (SERCOM 1 or 3 only)"
#endif
#endif

#if (defined(SPI2_CLK) && defined(SPI2_SDO) && defined(SPI2_SDI))
#define MCU_HAS_SPI2
#define MCU_HAS_DMA
#ifndef SPI2_PORT
#define SPI2_PORT 1
#endif
#ifndef SPI2_MODE
#define SPI2_MODE 0
#endif
#ifndef SPI2_FREQ
#define SPI2_FREQ 1000000UL
#endif

#define SPI2COM __helper__(SERCOM, SPI2_PORT, )
#define PM_APBCMASK_SPI2COM __helper__(PM_APBCMASK_SERCOM, SPI2_PORT, )
#define GCLK_CLKCTRL_ID_SPI2COM __helper__(GCLK_CLKCTRL_ID_SERCOM, SPI2_PORT, _CORE)
#define SPI2_DATA (SPI2COM->SPI.DATA.reg)
#define SPI2_OUTPAD 0
#define SPI2_INPAD 3

#define SPI2_CLK_PMUX (pinmux(SPI2_CLK_PORT, SPI2_CLK_BIT))
#define SPI2_CLK_PMUXVAL (sercommux_pin(SPI2_PORT, SPI2_CLK_PORT, SPI2_CLK_BIT))
#define SPI2_SDO_PMUX (pinmux(SPI2_SDO_PORT, SPI2_SDO_BIT))
#define SPI2_SDO_PMUXVAL (sercommux_pin(SPI2_PORT, SPI2_SDO_PORT, SPI2_SDO_BIT))
#define SPI2_SDI_PMUX (pinmux(SPI2_SDI_PORT, SPI2_SDI_BIT))
#define SPI2_SDI_PMUXVAL (sercommux_pin(SPI2_PORT, SPI2_SDI_PORT, SPI2_SDI_BIT))

#define DIO212_PMUX SPI2_CLK_PMUX
#define DIO212_PMUXVAL SPI2_CLK_PMUXVAL
#define DIO213_PMUX SPI2_SDI_PMUX
#define DIO213_PMUXVAL SPI2_SDI_PMUXVAL
#define DIO214_PMUX SPI2_SDO_PMUX
#define DIO214_PMUXVAL SPI2_SDO_PMUXVAL

#define SPI2_DMA_TRIGSRC_RX ((SPI2_PORT<<1) + 1)
#define SPI2_DMA_TRIGSRC_TX ((SPI2_PORT<<1) + 2)

#define SPI2_IRQ __helper__(SERCOM, SPI2_PORT, _IRQn)
#define SPI2_ISR __helper__(SERCOM, SPI2_PORT, _Handler)

#if (SPI2_PORT != 1 && SPI2_PORT != 3)
#error "SPI2 PORT is not valid (SERCOM 1 or 3 only)"
#endif
#endif

#if (defined(I2C_CLK) && defined(I2C_DATA))
#define MCU_HAS_I2C
#define MCU_SUPPORTS_I2C_SLAVE

#ifndef I2C_PORT
#define I2C_PORT 3
#endif
#ifndef I2C_FREQ
#define I2C_FREQ 400000UL
#endif
#ifndef I2C_ADDRESS
#define I2C_ADDRESS 0
#endif

#define I2CCOM __helper__(SERCOM, I2C_PORT, )
#define PM_APBCMASK_I2CCOM __helper__(PM_APBCMASK_SERCOM, I2C_PORT, )
#define GCLK_CLKCTRL_ID_I2CCOM __helper__(GCLK_CLKCTRL_ID_SERCOM, I2C_PORT, _CORE)
#define I2C_IRQ __helper__(SERCOM, I2C_PORT, _IRQn)
#define I2C_ISR __helper__(SERCOM, I2C_PORT, _Handler)
	// #define OUTPAD 0
	// #define INPAD 3

#define I2C_CLK_PMUX (pinmux(I2C_CLK_PORT, I2C_CLK_BIT))
#define I2C_CLK_PMUXVAL (sercommux_pin(I2C_PORT, I2C_CLK_PORT, I2C_CLK_BIT))
#define I2C_DATA_PMUX (pinmux(I2C_DATA_PORT, I2C_DATA_BIT))
#define I2C_DATA_PMUXVAL (sercommux_pin(I2C_PORT, I2C_DATA_PORT, I2C_DATA_BIT))

#define DIO208_PMUX I2C_CLK_PMUX
#define DIO208_PMUXVAL I2C_CLK_PMUXVAL
#define DIO209_PMUX I2C_DATA_PMUX
#define DIO209_PMUXVAL I2C_DATA_PMUXVAL

// #if (I2C_PORT != 1 && I2C_PORT != 3)
// #error "SPI PORT is not valid (SERCOM 1 or 3 only)"
// #endif
#endif

#ifdef MCU_HAS_DMA
#define DMA_CHANNEL_COUNT 12
#endif

/*ISR inputs*/
#if (defined(LIMIT_X_ISR) && defined(LIMIT_X))
#define LIMIT_X_ISRBIT (LIMIT_X_BIT & 0x0F)
#define LIMIT_X_ISRMASK (1U << (LIMIT_X_BIT & 0x0F))
#define LIMIT_X_PMUXVAL 0
#define LIMIT_X_PMUX (pinmux(LIMIT_X_PORT, LIMIT_X_BIT))
#define DIO100_ISRBIT LIMIT_X_ISRBIT
#define DIO100_ISRMASK LIMIT_X_ISRMASK
#define DIO100_PMUXVAL 0
#define DIO100_PMUX LIMIT_X_PMUX
#else
#define LIMIT_X_ISRMASK 0
#define DIO100_ISRMASK 0
#endif
#if (defined(LIMIT_Y_ISR) && defined(LIMIT_Y))
#define LIMIT_Y_ISRBIT (LIMIT_Y_BIT & 0x0F)
#define LIMIT_Y_ISRMASK (1U << (LIMIT_Y_BIT & 0x0F))
#define LIMIT_Y_PMUXVAL 0
#define LIMIT_Y_PMUX (pinmux(LIMIT_Y_PORT, LIMIT_Y_BIT))
#define DIO101_ISRBIT LIMIT_Y_ISRBIT
#define DIO101_ISRMASK LIMIT_Y_ISRMASK
#define DIO101_PMUXVAL 0
#define DIO101_PMUX LIMIT_Y_PMUX
#else
#define LIMIT_Y_ISRMASK 0
#define DIO101_ISRMASK 0
#endif
#if (defined(LIMIT_Z_ISR) && defined(LIMIT_Z))
#define LIMIT_Z_ISRBIT (LIMIT_Z_BIT & 0x0F)
#define LIMIT_Z_ISRMASK (1U << (LIMIT_Z_BIT & 0x0F))
#define LIMIT_Z_PMUXVAL 0
#define LIMIT_Z_PMUX (pinmux(LIMIT_Z_PORT, LIMIT_Z_BIT))
#define DIO102_ISRBIT LIMIT_Z_ISRBIT
#define DIO102_ISRMASK LIMIT_Z_ISRMASK
#define DIO102_PMUXVAL 0
#define DIO102_PMUX LIMIT_Z_PMUX
#else
#define LIMIT_Z_ISRMASK 0
#define DIO102_ISRMASK 0
#endif
#if (defined(LIMIT_X2_ISR) && defined(LIMIT_X2))
#define LIMIT_X2_ISRBIT (LIMIT_X2_BIT & 0x0F)
#define LIMIT_X2_ISRMASK (1U << (LIMIT_X2_BIT & 0x0F))
#define LIMIT_X2_PMUXVAL 0
#define LIMIT_X2_PMUX (pinmux(LIMIT_X2_PORT, LIMIT_X2_BIT))
#define DIO103_ISRBIT LIMIT_X2_ISRBIT
#define DIO103_ISRMASK LIMIT_X2_ISRMASK
#define DIO103_PMUXVAL 0
#define DIO103_PMUX LIMIT_X2_PMUX
#else
#define LIMIT_X2_ISRMASK 0
#define DIO103_ISRMASK 0
#endif
#if (defined(LIMIT_Y2_ISR) && defined(LIMIT_Y2))
#define LIMIT_Y2_ISRBIT (LIMIT_Y2_BIT & 0x0F)
#define LIMIT_Y2_ISRMASK (1U << (LIMIT_Y2_BIT & 0x0F))
#define LIMIT_Y2_PMUXVAL 0
#define LIMIT_Y2_PMUX (pinmux(LIMIT_Y2_PORT, LIMIT_Y2_BIT))
#define DIO104_ISRBIT LIMIT_Y2_ISRBIT
#define DIO104_ISRMASK LIMIT_Y2_ISRMASK
#define DIO104_PMUXVAL 0
#define DIO104_PMUX LIMIT_Y2_PMUX
#else
#define LIMIT_Y2_ISRMASK 0
#define DIO104_ISRMASK 0
#endif
#if (defined(LIMIT_Z2_ISR) && defined(LIMIT_Z2))
#define LIMIT_Z2_ISRBIT (LIMIT_Z2_BIT & 0x0F)
#define LIMIT_Z2_ISRMASK (1U << (LIMIT_Z2_BIT & 0x0F))
#define LIMIT_Z2_PMUXVAL 0
#define LIMIT_Z2_PMUX (pinmux(LIMIT_Z2_PORT, LIMIT_Z2_BIT))
#define DIO105_ISRBIT LIMIT_Z2_ISRBIT
#define DIO105_ISRMASK LIMIT_Z2_ISRMASK
#define DIO105_PMUXVAL 0
#define DIO105_PMUX LIMIT_Z2_PMUX
#else
#define LIMIT_Z2_ISRMASK 0
#define DIO105_ISRMASK 0
#endif
#if (defined(LIMIT_A_ISR) && defined(LIMIT_A))
#define LIMIT_A_ISRBIT (LIMIT_A_BIT & 0x0F)
#define LIMIT_A_ISRMASK (1U << (LIMIT_A_BIT & 0x0F))
#define LIMIT_A_PMUXVAL 0
#define LIMIT_A_PMUX (pinmux(LIMIT_A_PORT, LIMIT_A_BIT))
#define DIO106_ISRBIT LIMIT_A_ISRBIT
#define DIO106_ISRMASK LIMIT_A_ISRMASK
#define DIO106_PMUXVAL 0
#define DIO106_PMUX LIMIT_A_PMUX
#else
#define LIMIT_A_ISRMASK 0
#define DIO106_ISRMASK 0
#endif
#if (defined(LIMIT_B_ISR) && defined(LIMIT_B))
#define LIMIT_B_ISRBIT (LIMIT_B_BIT & 0x0F)
#define LIMIT_B_ISRMASK (1U << (LIMIT_B_BIT & 0x0F))
#define LIMIT_B_PMUXVAL 0
#define LIMIT_B_PMUX (pinmux(LIMIT_B_PORT, LIMIT_B_BIT))
#define DIO107_ISRBIT LIMIT_B_ISRBIT
#define DIO107_ISRMASK LIMIT_B_ISRMASK
#define DIO107_PMUXVAL 0
#define DIO107_PMUX LIMIT_B_PMUX
#else
#define LIMIT_B_ISRMASK 0
#define DIO107_ISRMASK 0
#endif
#if (defined(LIMIT_C_ISR) && defined(LIMIT_C))
#define LIMIT_C_ISRBIT (LIMIT_C_BIT & 0x0F)
#define LIMIT_C_ISRMASK (1U << (LIMIT_C_BIT & 0x0F))
#define LIMIT_C_PMUXVAL 0
#define LIMIT_C_PMUX (pinmux(LIMIT_C_PORT, LIMIT_C_BIT))
#define DIO108_ISRBIT LIMIT_C_ISRBIT
#define DIO108_ISRMASK LIMIT_C_ISRMASK
#define DIO108_PMUXVAL 0
#define DIO108_PMUX LIMIT_C_PMUX
#else
#define LIMIT_C_ISRMASK 0
#define DIO108_ISRMASK 0
#endif
#if (defined(PROBE_ISR) && defined(PROBE))
#define PROBE_ISRBIT (PROBE_BIT & 0x0F)
#define PROBE_ISRMASK (1U << (PROBE_BIT & 0x0F))
#define PROBE_PMUXVAL 0
#define PROBE_PMUX (pinmux(PROBE_PORT, PROBE_BIT))
#define DIO109_ISRBIT PROBE_ISRBIT
#define DIO109_ISRMASK PROBE_ISRMASK
#define DIO109_PMUXVAL 0
#define DIO109_PMUX PROBE_PMUX
#else
#define PROBE_ISRMASK 0
#define DIO109_ISRMASK 0
#endif
#if (defined(ESTOP_ISR) && defined(ESTOP))
#define ESTOP_ISRBIT (ESTOP_BIT & 0x0F)
#define ESTOP_ISRMASK (1U << (ESTOP_BIT & 0x0F))
#define ESTOP_PMUXVAL 0
#define ESTOP_PMUX (pinmux(ESTOP_PORT, ESTOP_BIT))
#define DIO110_ISRBIT ESTOP_ISRBIT
#define DIO110_ISRMASK ESTOP_ISRMASK
#define DIO110_PMUXVAL 0
#define DIO110_PMUX ESTOP_PMUX
#else
#define ESTOP_ISRMASK 0
#define DIO110_ISRMASK 0
#endif
#if (defined(SAFETY_DOOR_ISR) && defined(SAFETY_DOOR))
#define SAFETY_DOOR_ISRBIT (SAFETY_DOOR_BIT & 0x0F)
#define SAFETY_DOOR_ISRMASK (1U << (SAFETY_DOOR_BIT & 0x0F))
#define SAFETY_DOOR_PMUXVAL 0
#define SAFETY_DOOR_PMUX (pinmux(SAFETY_DOOR_PORT, SAFETY_DOOR_BIT))
#define DIO111_ISRBIT SAFETY_DOOR_ISRBIT
#define DIO111_ISRMASK SAFETY_DOOR_ISRMASK
#define DIO111_PMUXVAL 0
#define DIO111_PMUX SAFETY_DOOR_PMUX
#else
#define SAFETY_DOOR_ISRMASK 0
#define DIO111_ISRMASK 0
#endif
#if (defined(FHOLD_ISR) && defined(FHOLD))
#define FHOLD_ISRBIT (FHOLD_BIT & 0x0F)
#define FHOLD_ISRMASK (1U << (FHOLD_BIT & 0x0F))
#define FHOLD_PMUXVAL 0
#define FHOLD_PMUX (pinmux(FHOLD_PORT, FHOLD_BIT))
#define DIO112_ISRBIT FHOLD_ISRBIT
#define DIO112_ISRMASK FHOLD_ISRMASK
#define DIO112_PMUXVAL 0
#define DIO112_PMUX FHOLD_PMUX
#else
#define FHOLD_ISRMASK 0
#define DIO112_ISRMASK 0
#endif
#if (defined(CS_RES_ISR) && defined(CS_RES))
#define CS_RES_ISRBIT (CS_RES_BIT & 0x0F)
#define CS_RES_ISRMASK (1U << (CS_RES_BIT & 0x0F))
#define CS_RES_PMUXVAL 0
#define CS_RES_PMUX (pinmux(CS_RES_PORT, CS_RES_BIT))
#define DIO113_ISRBIT CS_RES_ISRBIT
#define DIO113_ISRMASK CS_RES_ISRMASK
#define DIO113_PMUXVAL 0
#define DIO113_PMUX CS_RES_PMUX
#else
#define CS_RES_ISRMASK 0
#define DIO113_ISRMASK 0
#endif
#if (defined(DIN0_ISR) && defined(DIN0))
#define DIN0_ISRBIT (DIN0_BIT & 0x0F)
#define DIN0_ISRMASK (1U << (DIN0_BIT & 0x0F))
#define DIN0_PMUXVAL 0
#define DIN0_PMUX (pinmux(DIN0_PORT, DIN0_BIT))
#define DIO130_ISRBIT DIN0_ISRBIT
#define DIO130_ISRMASK DIN0_ISRMASK
#define DIO130_PMUXVAL 0
#define DIO130_PMUX DIN0_PMUX
#else
#define DIN0_ISRMASK 0
#define DIO130_ISRMASK 0
#endif
#if (defined(DIN1_ISR) && defined(DIN1))
#define DIN1_ISRBIT (DIN1_BIT & 0x0F)
#define DIN1_ISRMASK (1U << (DIN1_BIT & 0x0F))
#define DIN1_PMUXVAL 0
#define DIN1_PMUX (pinmux(DIN1_PORT, DIN1_BIT))
#define DIO131_ISRBIT DIN1_ISRBIT
#define DIO131_ISRMASK DIN1_ISRMASK
#define DIO131_PMUXVAL 0
#define DIO131_PMUX DIN1_PMUX
#else
#define DIN1_ISRMASK 0
#define DIO131_ISRMASK 0
#endif
#if (defined(DIN2_ISR) && defined(DIN2))
#define DIN2_ISRBIT (DIN2_BIT & 0x0F)
#define DIN2_ISRMASK (1U << (DIN2_BIT & 0x0F))
#define DIN2_PMUXVAL 0
#define DIN2_PMUX (pinmux(DIN2_PORT, DIN2_BIT))
#define DIO132_ISRBIT DIN2_ISRBIT
#define DIO132_ISRMASK DIN2_ISRMASK
#define DIO132_PMUXVAL 0
#define DIO132_PMUX DIN2_PMUX
#else
#define DIN2_ISRMASK 0
#define DIO132_ISRMASK 0
#endif
#if (defined(DIN3_ISR) && defined(DIN3))
#define DIN3_ISRBIT (DIN3_BIT & 0x0F)
#define DIN3_ISRMASK (1U << (DIN3_BIT & 0x0F))
#define DIN3_PMUXVAL 0
#define DIN3_PMUX (pinmux(DIN3_PORT, DIN3_BIT))
#define DIO133_ISRBIT DIN3_ISRBIT
#define DIO133_ISRMASK DIN3_ISRMASK
#define DIO133_PMUXVAL 0
#define DIO133_PMUX DIN3_PMUX
#else
#define DIN3_ISRMASK 0
#define DIO133_ISRMASK 0
#endif
#if (defined(DIN4_ISR) && defined(DIN4))
#define DIN4_ISRBIT (DIN4_BIT & 0x0F)
#define DIN4_ISRMASK (1U << (DIN4_BIT & 0x0F))
#define DIN4_PMUXVAL 0
#define DIN4_PMUX (pinmux(DIN4_PORT, DIN4_BIT))
#define DIO134_ISRBIT DIN4_ISRBIT
#define DIO134_ISRMASK DIN4_ISRMASK
#define DIO134_PMUXVAL 0
#define DIO134_PMUX DIN4_PMUX
#else
#define DIN4_ISRMASK 0
#define DIO134_ISRMASK 0
#endif
#if (defined(DIN5_ISR) && defined(DIN5))
#define DIN5_ISRBIT (DIN5_BIT & 0x0F)
#define DIN5_ISRMASK (1U << (DIN5_BIT & 0x0F))
#define DIN5_PMUXVAL 0
#define DIN5_PMUX (pinmux(DIN5_PORT, DIN5_BIT))
#define DIO135_ISRBIT DIN5_ISRBIT
#define DIO135_ISRMASK DIN5_ISRMASK
#define DIO135_PMUXVAL 0
#define DIO135_PMUX DIN5_PMUX
#else
#define DIN5_ISRMASK 0
#define DIO135_ISRMASK 0
#endif
#if (defined(DIN6_ISR) && defined(DIN6))
#define DIN6_ISRBIT (DIN6_BIT & 0x0F)
#define DIN6_ISRMASK (1U << (DIN6_BIT & 0x0F))
#define DIN6_PMUXVAL 0
#define DIN6_PMUX (pinmux(DIN6_PORT, DIN6_BIT))
#define DIO136_ISRBIT DIN6_ISRBIT
#define DIO136_ISRMASK DIN6_ISRMASK
#define DIO136_PMUXVAL 0
#define DIO136_PMUX DIN6_PMUX
#else
#define DIN6_ISRMASK 0
#define DIO136_ISRMASK 0
#endif
#if (defined(DIN7_ISR) && defined(DIN7))
#define DIN7_ISRBIT (DIN7_BIT & 0x0F)
#define DIN7_ISRMASK (1U << (DIN7_BIT & 0x0F))
#define DIN7_PMUXVAL 0
#define DIN7_PMUX (pinmux(DIN7_PORT, DIN7_BIT))
#define DIO137_ISRBIT DIN7_ISRBIT
#define DIO137_ISRMASK DIN7_ISRMASK
#define DIO137_PMUXVAL 0
#define DIO137_PMUX DIN7_PMUX
#else
#define DIN7_ISRMASK 0
#define DIO137_ISRMASK 0
#endif

#define LIMITS_EICMASK (LIMIT_X_ISRMASK | LIMIT_Y_ISRMASK | LIMIT_Z_ISRMASK | LIMIT_X2_ISRMASK | LIMIT_Y2_ISRMASK | LIMIT_Z2_ISRMASK | LIMIT_A_ISRMASK | LIMIT_B_ISRMASK | LIMIT_C_ISRMASK)
#define CONTROLS_EICMASK (ESTOP_ISRMASK | SAFETY_DOOR_ISRMASK | FHOLD_ISRMASK | CS_RES_ISRMASK)
#define PROBE_EICMASK (PROBE_ISRMASK)
#define DIN_IO_EICMASK (DIN0_ISRMASK | DIN1_ISRMASK | DIN2_ISRMASK | DIN3_ISRMASK | DIN4_ISRMASK | DIN5_ISRMASK | DIN6_ISRMASK | DIN7_ISRMASK)

#define SAMD21_EIC_MASK (LIMITS_EICMASK | CONTROLS_EICMASK | PROBE_EICMASK | DIN_IO_EICMASK)

/*timers-unused*/
#define gclk_clkctrl(X) (0x1A + (X >> 1))

/*PWM*/
#ifdef PWM0
#define PWM0_CLKCTRL gclk_clkctrl(PWM0_TIMER)
#define PWM0_PMUX (pinmux(PWM0_PORT, PWM0_BIT))
#define PWM0_PMUXVAL (pinmuxval(PWM0_MUX))
#if (PWM0_TIMER < 3)
#define PWM0_TMR __helper__(TCC, PWM0_TIMER, )
#define PWM0_CONFIG                       \
	{                                       \
		PWM0_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM0_TMR->SYNCBUSY.bit.SWRST)  \
			;                                   \
		PWM0_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM0_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM0_TMR->SYNCBUSY.bit.WAVE)   \
			;                                   \
		PWM0_TMR->PER.bit.PER = 255;          \
		while (PWM0_TMR->SYNCBUSY.bit.PER)    \
			;                                   \
		PWM0_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM0_TMR->SYNCBUSY.bit.ENABLE) \
			;                                   \
	}
#define PWM0_DUTYCYCLE (PWM0_TMR->CC[PWM0_CHANNEL].bit.CC)
#else
#define PWM0_TMR __helper__(TC, PWM0_TIMER, )
#define PWM0_CONFIG                              \
	{                                              \
		PWM0_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM0_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM0_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM0_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM0_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM0_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM0_TMR->COUNT8.PER.reg = 255;              \
		while (PWM0_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM0_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM0_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
	}
#define PWM0_DUTYCYCLE (PWM0_TMR->COUNT8.CC[PWM0_CHANNEL].reg)
#endif
#define DIO25_PMUX PWM0_PMUX
#define DIO25_PMUXVAL PWM0_PMUXVAL
#define DIO25_TMR PWM0_TMR
#define DIO25_CONFIG PWM0_CONFIG
#define DIO25_DUTYCYCLE PWM0_DUTYCYCLE
#endif
#ifdef PWM1
#define PWM1_CLKCTRL gclk_clkctrl(PWM1_TIMER)
#define PWM1_PMUX (pinmux(PWM1_PORT, PWM1_BIT))
#define PWM1_PMUXVAL (pinmuxval(PWM1_MUX))
#if (PWM1_TIMER < 3)
#define PWM1_TMR __helper__(TCC, PWM1_TIMER, )
#define PWM1_CONFIG                       \
	{                                       \
		PWM1_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM1_TMR->SYNCBUSY.bit.SWRST)  \
			;                                   \
		PWM1_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM1_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM1_TMR->SYNCBUSY.bit.WAVE)   \
			;                                   \
		PWM1_TMR->PER.bit.PER = 255;          \
		while (PWM1_TMR->SYNCBUSY.bit.PER)    \
			;                                   \
		PWM1_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM1_TMR->SYNCBUSY.bit.ENABLE) \
			;                                   \
	}
#define PWM1_DUTYCYCLE (PWM1_TMR->CC[PWM1_CHANNEL].bit.CC)
#else
#define PWM1_TMR __helper__(TC, PWM1_TIMER, )
#define PWM1_CONFIG                              \
	{                                              \
		PWM1_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM1_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM1_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM1_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM1_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM1_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM1_TMR->COUNT8.PER.reg = 255;              \
		while (PWM1_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM1_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM1_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
	}
#define PWM1_DUTYCYCLE (PWM1_TMR->COUNT8.CC[PWM1_CHANNEL].reg)
#endif
#define DIO26_PMUX PWM1_PMUX
#define DIO26_PMUXVAL PWM1_PMUXVAL
#define DIO26_TMR PWM1_TMR
#define DIO26_CONFIG PWM1_CONFIG
#define DIO26_DUTYCYCLE PWM1_DUTYCYCLE
#endif
#ifdef PWM2
#define PWM2_CLKCTRL gclk_clkctrl(PWM2_TIMER)
#define PWM2_PMUX (pinmux(PWM2_PORT, PWM2_BIT))
#define PWM2_PMUXVAL (pinmuxval(PWM2_MUX))
#if (PWM2_TIMER < 3)
#define PWM2_TMR __helper__(TCC, PWM2_TIMER, )
#define PWM2_CONFIG                       \
	{                                       \
		PWM2_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM2_TMR->SYNCBUSY.bit.SWRST)  \
			;                                   \
		PWM2_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM2_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM2_TMR->SYNCBUSY.bit.WAVE)   \
			;                                   \
		PWM2_TMR->PER.bit.PER = 255;          \
		while (PWM2_TMR->SYNCBUSY.bit.PER)    \
			;                                   \
		PWM2_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM2_TMR->SYNCBUSY.bit.ENABLE) \
			;                                   \
	}
#define PWM2_DUTYCYCLE (PWM2_TMR->CC[PWM2_CHANNEL].bit.CC)
#else
#define PWM2_TMR __helper__(TC, PWM2_TIMER, )
#define PWM2_CONFIG                              \
	{                                              \
		PWM2_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM2_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM2_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM2_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM2_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM2_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM2_TMR->COUNT8.PER.reg = 255;              \
		while (PWM2_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM2_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM2_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
	}
#define PWM2_DUTYCYCLE (PWM2_TMR->COUNT8.CC[PWM2_CHANNEL].reg)
#endif
#define DIO27_PMUX PWM2_PMUX
#define DIO27_PMUXVAL PWM2_PMUXVAL
#define DIO27_TMR PWM2_TMR
#define DIO27_CONFIG PWM2_CONFIG
#define DIO27_DUTYCYCLE PWM2_DUTYCYCLE
#endif
#ifdef PWM3
#define PWM3_CLKCTRL gclk_clkctrl(PWM3_TIMER)
#define PWM3_PMUX (pinmux(PWM3_PORT, PWM3_BIT))
#define PWM3_PMUXVAL (pinmuxval(PWM3_MUX))
#if (PWM3_TIMER < 3)
#define PWM3_TMR __helper__(TCC, PWM3_TIMER, )
#define PWM3_CONFIG                       \
	{                                       \
		PWM3_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM3_TMR->SYNCBUSY.bit.SWRST)  \
			;                                   \
		PWM3_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM3_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM3_TMR->SYNCBUSY.bit.WAVE)   \
			;                                   \
		PWM3_TMR->PER.bit.PER = 255;          \
		while (PWM3_TMR->SYNCBUSY.bit.PER)    \
			;                                   \
		PWM3_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM3_TMR->SYNCBUSY.bit.ENABLE) \
			;                                   \
	}
#define PWM3_DUTYCYCLE (PWM3_TMR->CC[PWM3_CHANNEL].bit.CC)
#else
#define PWM3_TMR __helper__(TC, PWM3_TIMER, )
#define PWM3_CONFIG                              \
	{                                              \
		PWM3_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM3_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM3_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM3_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM3_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM3_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM3_TMR->COUNT8.PER.reg = 255;              \
		while (PWM3_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM3_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM3_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
	}
#define PWM3_DUTYCYCLE (PWM3_TMR->COUNT8.CC[PWM3_CHANNEL].reg)
#endif
#define DIO28_PMUX PWM3_PMUX
#define DIO28_PMUXVAL PWM3_PMUXVAL
#define DIO28_TMR PWM3_TMR
#define DIO28_CONFIG PWM3_CONFIG
#define DIO28_DUTYCYCLE PWM3_DUTYCYCLE
#endif
#ifdef PWM4
#define PWM4_CLKCTRL gclk_clkctrl(PWM4_TIMER)
#define PWM4_PMUX (pinmux(PWM4_PORT, PWM4_BIT))
#define PWM4_PMUXVAL (pinmuxval(PWM4_MUX))
#if (PWM4_TIMER < 3)
#define PWM4_TMR __helper__(TCC, PWM4_TIMER, )
#define PWM4_CONFIG                       \
	{                                       \
		PWM4_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM4_TMR->SYNCBUSY.bit.SWRST)  \
			;                                   \
		PWM4_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM4_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM4_TMR->SYNCBUSY.bit.WAVE)   \
			;                                   \
		PWM4_TMR->PER.bit.PER = 255;          \
		while (PWM4_TMR->SYNCBUSY.bit.PER)    \
			;                                   \
		PWM4_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM4_TMR->SYNCBUSY.bit.ENABLE) \
			;                                   \
	}
#define PWM4_DUTYCYCLE (PWM4_TMR->CC[PWM4_CHANNEL].bit.CC)
#else
#define PWM4_TMR __helper__(TC, PWM4_TIMER, )
#define PWM4_CONFIG                              \
	{                                              \
		PWM4_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM4_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM4_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM4_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM4_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM4_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM4_TMR->COUNT8.PER.reg = 255;              \
		while (PWM4_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM4_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM4_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
	}
#define PWM4_DUTYCYCLE (PWM4_TMR->COUNT8.CC[PWM4_CHANNEL].reg)
#endif
#define DIO29_PMUX PWM4_PMUX
#define DIO29_PMUXVAL PWM4_PMUXVAL
#define DIO29_TMR PWM4_TMR
#define DIO29_CONFIG PWM4_CONFIG
#define DIO29_DUTYCYCLE PWM4_DUTYCYCLE
#endif
#ifdef PWM5
#define PWM5_CLKCTRL gclk_clkctrl(PWM5_TIMER)
#define PWM5_PMUX (pinmux(PWM5_PORT, PWM5_BIT))
#define PWM5_PMUXVAL (pinmuxval(PWM5_MUX))
#if (PWM5_TIMER < 3)
#define PWM5_TMR __helper__(TCC, PWM5_TIMER, )
#define PWM5_CONFIG                       \
	{                                       \
		PWM5_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM5_TMR->SYNCBUSY.bit.SWRST)  \
			;                                   \
		PWM5_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM5_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM5_TMR->SYNCBUSY.bit.WAVE)   \
			;                                   \
		PWM5_TMR->PER.bit.PER = 255;          \
		while (PWM5_TMR->SYNCBUSY.bit.PER)    \
			;                                   \
		PWM5_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM5_TMR->SYNCBUSY.bit.ENABLE) \
			;                                   \
	}
#define PWM5_DUTYCYCLE (PWM5_TMR->CC[PWM5_CHANNEL].bit.CC)
#else
#define PWM5_TMR __helper__(TC, PWM5_TIMER, )
#define PWM5_CONFIG                              \
	{                                              \
		PWM5_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM5_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM5_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM5_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM5_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM5_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM5_TMR->COUNT8.PER.reg = 255;              \
		while (PWM5_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM5_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM5_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
	}
#define PWM5_DUTYCYCLE (PWM5_TMR->COUNT8.CC[PWM5_CHANNEL].reg)
#endif
#define DIO30_PMUX PWM5_PMUX
#define DIO30_PMUXVAL PWM5_PMUXVAL
#define DIO30_TMR PWM5_TMR
#define DIO30_CONFIG PWM5_CONFIG
#define DIO30_DUTYCYCLE PWM5_DUTYCYCLE
#endif
#ifdef PWM6
#define PWM6_CLKCTRL gclk_clkctrl(PWM6_TIMER)
#define PWM6_PMUX (pinmux(PWM6_PORT, PWM6_BIT))
#define PWM6_PMUXVAL (pinmuxval(PWM6_MUX))
#if (PWM6_TIMER < 3)
#define PWM6_TMR __helper__(TCC, PWM6_TIMER, )
#define PWM6_CONFIG                       \
	{                                       \
		PWM6_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM6_TMR->SYNCBUSY.bit.SWRST)  \
			;                                   \
		PWM6_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM6_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM6_TMR->SYNCBUSY.bit.WAVE)   \
			;                                   \
		PWM6_TMR->PER.bit.PER = 255;          \
		while (PWM6_TMR->SYNCBUSY.bit.PER)    \
			;                                   \
		PWM6_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM6_TMR->SYNCBUSY.bit.ENABLE) \
			;                                   \
	}
#define PWM6_DUTYCYCLE (PWM6_TMR->CC[PWM6_CHANNEL].bit.CC)
#else
#define PWM6_TMR __helper__(TC, PWM6_TIMER, )
#define PWM6_CONFIG                              \
	{                                              \
		PWM6_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM6_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM6_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM6_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM6_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM6_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM6_TMR->COUNT8.PER.reg = 255;              \
		while (PWM6_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM6_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM6_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
	}
#define PWM6_DUTYCYCLE (PWM6_TMR->COUNT8.CC[PWM6_CHANNEL].reg)
#endif
#define DIO31_PMUX PWM6_PMUX
#define DIO31_PMUXVAL PWM6_PMUXVAL
#define DIO31_TMR PWM6_TMR
#define DIO31_CONFIG PWM6_CONFIG
#define DIO31_DUTYCYCLE PWM6_DUTYCYCLE
#endif
#ifdef PWM7
#define PWM7_CLKCTRL gclk_clkctrl(PWM7_TIMER)
#define PWM7_PMUX (pinmux(PWM7_PORT, PWM7_BIT))
#define PWM7_PMUXVAL (pinmuxval(PWM7_MUX))
#if (PWM7_TIMER < 3)
#define PWM7_TMR __helper__(TCC, PWM7_TIMER, )
#define PWM7_CONFIG                       \
	{                                       \
		PWM7_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM7_TMR->SYNCBUSY.bit.SWRST)  \
			;                                   \
		PWM7_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM7_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM7_TMR->SYNCBUSY.bit.WAVE)   \
			;                                   \
		PWM7_TMR->PER.bit.PER = 255;          \
		while (PWM7_TMR->SYNCBUSY.bit.PER)    \
			;                                   \
		PWM7_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM7_TMR->SYNCBUSY.bit.ENABLE) \
			;                                   \
	}
#define PWM7_DUTYCYCLE (PWM7_TMR->CC[PWM7_CHANNEL].bit.CC)
#else
#define PWM7_TMR __helper__(TC, PWM7_TIMER, )
#define PWM7_CONFIG                              \
	{                                              \
		PWM7_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM7_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM7_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM7_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM7_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM7_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM7_TMR->COUNT8.PER.reg = 255;              \
		while (PWM7_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM7_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM7_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
	}
#define PWM7_DUTYCYCLE (PWM7_TMR->COUNT8.CC[PWM7_CHANNEL].reg)
#endif
#define DIO32_PMUX PWM7_PMUX
#define DIO32_PMUXVAL PWM7_PMUXVAL
#define DIO32_TMR PWM7_TMR
#define DIO32_CONFIG PWM7_CONFIG
#define DIO32_DUTYCYCLE PWM7_DUTYCYCLE
#endif
#ifdef PWM8
#define PWM8_CLKCTRL gclk_clkctrl(PWM8_TIMER)
#define PWM8_PMUX (pinmux(PWM8_PORT, PWM8_BIT))
#define PWM8_PMUXVAL (pinmuxval(PWM8_MUX))
#if (PWM8_TIMER < 3)
#define PWM8_TMR __helper__(TCC, PWM8_TIMER, )
#define PWM8_CONFIG                       \
	{                                       \
		PWM8_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM8_TMR->SYNCBUSY.bit.SWRST)  \
			;                                   \
		PWM8_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM8_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM8_TMR->SYNCBUSY.bit.WAVE)   \
			;                                   \
		PWM8_TMR->PER.bit.PER = 255;          \
		while (PWM8_TMR->SYNCBUSY.bit.PER)    \
			;                                   \
		PWM8_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM8_TMR->SYNCBUSY.bit.ENABLE) \
			;                                   \
	}
#define PWM8_DUTYCYCLE (PWM8_TMR->CC[PWM8_CHANNEL].bit.CC)
#else
#define PWM8_TMR __helper__(TC, PWM8_TIMER, )
#define PWM8_CONFIG                              \
	{                                              \
		PWM8_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM8_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM8_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM8_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM8_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM8_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM8_TMR->COUNT8.PER.reg = 255;              \
		while (PWM8_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM8_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM8_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
	}
#define PWM8_DUTYCYCLE (PWM8_TMR->COUNT8.CC[PWM8_CHANNEL].reg)
#endif
#define DIO33_PMUX PWM8_PMUX
#define DIO33_PMUXVAL PWM8_PMUXVAL
#define DIO33_TMR PWM8_TMR
#define DIO33_CONFIG PWM8_CONFIG
#define DIO33_DUTYCYCLE PWM8_DUTYCYCLE
#endif
#ifdef PWM9
#define PWM9_CLKCTRL gclk_clkctrl(PWM9_TIMER)
#define PWM9_PMUX (pinmux(PWM9_PORT, PWM9_BIT))
#define PWM9_PMUXVAL (pinmuxval(PWM9_MUX))
#if (PWM9_TIMER < 3)
#define PWM9_TMR __helper__(TCC, PWM9_TIMER, )
#define PWM9_CONFIG                       \
	{                                       \
		PWM9_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM9_TMR->SYNCBUSY.bit.SWRST)  \
			;                                   \
		PWM9_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM9_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM9_TMR->SYNCBUSY.bit.WAVE)   \
			;                                   \
		PWM9_TMR->PER.bit.PER = 255;          \
		while (PWM9_TMR->SYNCBUSY.bit.PER)    \
			;                                   \
		PWM9_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM9_TMR->SYNCBUSY.bit.ENABLE) \
			;                                   \
	}
#define PWM9_DUTYCYCLE (PWM9_TMR->CC[PWM9_CHANNEL].bit.CC)
#else
#define PWM9_TMR __helper__(TC, PWM9_TIMER, )
#define PWM9_CONFIG                              \
	{                                              \
		PWM9_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM9_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM9_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM9_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM9_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM9_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM9_TMR->COUNT8.PER.reg = 255;              \
		while (PWM9_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
		PWM9_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM9_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                          \
	}
#define PWM9_DUTYCYCLE (PWM9_TMR->COUNT8.CC[PWM9_CHANNEL].reg)
#endif
#define DIO34_PMUX PWM9_PMUX
#define DIO34_PMUXVAL PWM9_PMUXVAL
#define DIO34_TMR PWM9_TMR
#define DIO34_CONFIG PWM9_CONFIG
#define DIO34_DUTYCYCLE PWM9_DUTYCYCLE
#endif
#ifdef PWM10
#define PWM10_CLKCTRL gclk_clkctrl(PWM10_TIMER)
#define PWM10_PMUX (pinmux(PWM10_PORT, PWM10_BIT))
#define PWM10_PMUXVAL (pinmuxval(PWM10_MUX))
#if (PWM10_TIMER < 3)
#define PWM10_TMR __helper__(TCC, PWM10_TIMER, )
#define PWM10_CONFIG                       \
	{                                        \
		PWM10_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM10_TMR->SYNCBUSY.bit.SWRST)  \
			;                                    \
		PWM10_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM10_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM10_TMR->SYNCBUSY.bit.WAVE)   \
			;                                    \
		PWM10_TMR->PER.bit.PER = 255;          \
		while (PWM10_TMR->SYNCBUSY.bit.PER)    \
			;                                    \
		PWM10_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM10_TMR->SYNCBUSY.bit.ENABLE) \
			;                                    \
	}
#define PWM10_DUTYCYCLE (PWM10_TMR->CC[PWM10_CHANNEL].bit.CC)
#else
#define PWM10_TMR __helper__(TC, PWM10_TIMER, )
#define PWM10_CONFIG                              \
	{                                               \
		PWM10_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM10_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM10_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM10_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM10_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM10_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM10_TMR->COUNT8.PER.reg = 255;              \
		while (PWM10_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM10_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM10_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
	}
#define PWM10_DUTYCYCLE (PWM10_TMR->COUNT8.CC[PWM10_CHANNEL].reg)
#endif
#define DIO35_PMUX PWM10_PMUX
#define DIO35_PMUXVAL PWM10_PMUXVAL
#define DIO35_TMR PWM10_TMR
#define DIO35_CONFIG PWM10_CONFIG
#define DIO35_DUTYCYCLE PWM10_DUTYCYCLE
#endif
#ifdef PWM11
#define PWM11_CLKCTRL gclk_clkctrl(PWM11_TIMER)
#define PWM11_PMUX (pinmux(PWM11_PORT, PWM11_BIT))
#define PWM11_PMUXVAL (pinmuxval(PWM11_MUX))
#if (PWM11_TIMER < 3)
#define PWM11_TMR __helper__(TCC, PWM11_TIMER, )
#define PWM11_CONFIG                       \
	{                                        \
		PWM11_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM11_TMR->SYNCBUSY.bit.SWRST)  \
			;                                    \
		PWM11_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM11_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM11_TMR->SYNCBUSY.bit.WAVE)   \
			;                                    \
		PWM11_TMR->PER.bit.PER = 255;          \
		while (PWM11_TMR->SYNCBUSY.bit.PER)    \
			;                                    \
		PWM11_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM11_TMR->SYNCBUSY.bit.ENABLE) \
			;                                    \
	}
#define PWM11_DUTYCYCLE (PWM11_TMR->CC[PWM11_CHANNEL].bit.CC)
#else
#define PWM11_TMR __helper__(TC, PWM11_TIMER, )
#define PWM11_CONFIG                              \
	{                                               \
		PWM11_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM11_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM11_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM11_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM11_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM11_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM11_TMR->COUNT8.PER.reg = 255;              \
		while (PWM11_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM11_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM11_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
	}
#define PWM11_DUTYCYCLE (PWM11_TMR->COUNT8.CC[PWM11_CHANNEL].reg)
#endif
#define DIO36_PMUX PWM11_PMUX
#define DIO36_PMUXVAL PWM11_PMUXVAL
#define DIO36_TMR PWM11_TMR
#define DIO36_CONFIG PWM11_CONFIG
#define DIO36_DUTYCYCLE PWM11_DUTYCYCLE
#endif
#ifdef PWM12
#define PWM12_CLKCTRL gclk_clkctrl(PWM12_TIMER)
#define PWM12_PMUX (pinmux(PWM12_PORT, PWM12_BIT))
#define PWM12_PMUXVAL (pinmuxval(PWM12_MUX))
#if (PWM12_TIMER < 3)
#define PWM12_TMR __helper__(TCC, PWM12_TIMER, )
#define PWM12_CONFIG                       \
	{                                        \
		PWM12_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM12_TMR->SYNCBUSY.bit.SWRST)  \
			;                                    \
		PWM12_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM12_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM12_TMR->SYNCBUSY.bit.WAVE)   \
			;                                    \
		PWM12_TMR->PER.bit.PER = 255;          \
		while (PWM12_TMR->SYNCBUSY.bit.PER)    \
			;                                    \
		PWM12_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM12_TMR->SYNCBUSY.bit.ENABLE) \
			;                                    \
	}
#define PWM12_DUTYCYCLE (PWM12_TMR->CC[PWM12_CHANNEL].bit.CC)
#else
#define PWM12_TMR __helper__(TC, PWM12_TIMER, )
#define PWM12_CONFIG                              \
	{                                               \
		PWM12_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM12_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM12_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM12_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM12_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM12_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM12_TMR->COUNT8.PER.reg = 255;              \
		while (PWM12_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM12_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM12_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
	}
#define PWM12_DUTYCYCLE (PWM12_TMR->COUNT8.CC[PWM12_CHANNEL].reg)
#endif
#define DIO37_PMUX PWM12_PMUX
#define DIO37_PMUXVAL PWM12_PMUXVAL
#define DIO37_TMR PWM12_TMR
#define DIO37_CONFIG PWM12_CONFIG
#define DIO37_DUTYCYCLE PWM12_DUTYCYCLE
#endif
#ifdef PWM13
#define PWM13_CLKCTRL gclk_clkctrl(PWM13_TIMER)
#define PWM13_PMUX (pinmux(PWM13_PORT, PWM13_BIT))
#define PWM13_PMUXVAL (pinmuxval(PWM13_MUX))
#if (PWM13_TIMER < 3)
#define PWM13_TMR __helper__(TCC, PWM13_TIMER, )
#define PWM13_CONFIG                       \
	{                                        \
		PWM13_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM13_TMR->SYNCBUSY.bit.SWRST)  \
			;                                    \
		PWM13_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM13_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM13_TMR->SYNCBUSY.bit.WAVE)   \
			;                                    \
		PWM13_TMR->PER.bit.PER = 255;          \
		while (PWM13_TMR->SYNCBUSY.bit.PER)    \
			;                                    \
		PWM13_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM13_TMR->SYNCBUSY.bit.ENABLE) \
			;                                    \
	}
#define PWM13_DUTYCYCLE (PWM13_TMR->CC[PWM13_CHANNEL].bit.CC)
#else
#define PWM13_TMR __helper__(TC, PWM13_TIMER, )
#define PWM13_CONFIG                              \
	{                                               \
		PWM13_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM13_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM13_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM13_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM13_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM13_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM13_TMR->COUNT8.PER.reg = 255;              \
		while (PWM13_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM13_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM13_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
	}
#define PWM13_DUTYCYCLE (PWM13_TMR->COUNT8.CC[PWM13_CHANNEL].reg)
#endif
#define DIO38_PMUX PWM13_PMUX
#define DIO38_PMUXVAL PWM13_PMUXVAL
#define DIO38_TMR PWM13_TMR
#define DIO38_CONFIG PWM13_CONFIG
#define DIO38_DUTYCYCLE PWM13_DUTYCYCLE
#endif
#ifdef PWM14
#define PWM14_CLKCTRL gclk_clkctrl(PWM14_TIMER)
#define PWM14_PMUX (pinmux(PWM14_PORT, PWM14_BIT))
#define PWM14_PMUXVAL (pinmuxval(PWM14_MUX))
#if (PWM14_TIMER < 3)
#define PWM14_TMR __helper__(TCC, PWM14_TIMER, )
#define PWM14_CONFIG                       \
	{                                        \
		PWM14_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM14_TMR->SYNCBUSY.bit.SWRST)  \
			;                                    \
		PWM14_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM14_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM14_TMR->SYNCBUSY.bit.WAVE)   \
			;                                    \
		PWM14_TMR->PER.bit.PER = 255;          \
		while (PWM14_TMR->SYNCBUSY.bit.PER)    \
			;                                    \
		PWM14_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM14_TMR->SYNCBUSY.bit.ENABLE) \
			;                                    \
	}
#define PWM14_DUTYCYCLE (PWM14_TMR->CC[PWM14_CHANNEL].bit.CC)
#else
#define PWM14_TMR __helper__(TC, PWM14_TIMER, )
#define PWM14_CONFIG                              \
	{                                               \
		PWM14_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM14_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM14_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM14_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM14_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM14_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM14_TMR->COUNT8.PER.reg = 255;              \
		while (PWM14_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM14_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM14_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
	}
#define PWM14_DUTYCYCLE (PWM14_TMR->COUNT8.CC[PWM14_CHANNEL].reg)
#endif
#define DIO39_PMUX PWM14_PMUX
#define DIO39_PMUXVAL PWM14_PMUXVAL
#define DIO39_TMR PWM14_TMR
#define DIO39_CONFIG PWM14_CONFIG
#define DIO39_DUTYCYCLE PWM14_DUTYCYCLE
#endif
#ifdef PWM15
#define PWM15_CLKCTRL gclk_clkctrl(PWM15_TIMER)
#define PWM15_PMUX (pinmux(PWM15_PORT, PWM15_BIT))
#define PWM15_PMUXVAL (pinmuxval(PWM15_MUX))
#if (PWM15_TIMER < 3)
#define PWM15_TMR __helper__(TCC, PWM15_TIMER, )
#define PWM15_CONFIG                       \
	{                                        \
		PWM15_TMR->CTRLA.bit.SWRST = 1;        \
		while (PWM15_TMR->SYNCBUSY.bit.SWRST)  \
			;                                    \
		PWM15_TMR->CTRLA.bit.PRESCALER = 2;    \
		PWM15_TMR->WAVE.bit.WAVEGEN = 2;       \
		while (PWM15_TMR->SYNCBUSY.bit.WAVE)   \
			;                                    \
		PWM15_TMR->PER.bit.PER = 255;          \
		while (PWM15_TMR->SYNCBUSY.bit.PER)    \
			;                                    \
		PWM15_TMR->CTRLA.bit.ENABLE = 1;       \
		while (PWM15_TMR->SYNCBUSY.bit.ENABLE) \
			;                                    \
	}
#define PWM15_DUTYCYCLE (PWM15_TMR->CC[PWM15_CHANNEL].bit.CC)
#else
#define PWM15_TMR __helper__(TC, PWM15_TIMER, )
#define PWM15_CONFIG                              \
	{                                               \
		PWM15_TMR->COUNT8.CTRLA.bit.SWRST = 1;        \
		while (PWM15_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM15_TMR->COUNT8.CTRLA.bit.MODE = 1;         \
		PWM15_TMR->COUNT8.CTRLA.bit.PRESCALER = 2;    \
		PWM15_TMR->COUNT8.CTRLA.bit.WAVEGEN = 2;      \
		while (PWM15_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM15_TMR->COUNT8.PER.reg = 255;              \
		while (PWM15_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
		PWM15_TMR->COUNT8.CTRLA.bit.ENABLE = 1;       \
		while (PWM15_TMR->COUNT8.STATUS.bit.SYNCBUSY) \
			;                                           \
	}
#define PWM15_DUTYCYCLE (PWM15_TMR->COUNT8.CC[PWM15_CHANNEL].reg)
#endif
#define DIO40_PMUX PWM15_PMUX
#define DIO40_PMUXVAL PWM15_PMUXVAL
#define DIO40_TMR PWM15_TMR
#define DIO40_CONFIG PWM15_CONFIG
#define DIO40_DUTYCYCLE PWM15_DUTYCYCLE
#endif

/*Analog*/
#ifdef ANALOG0
#ifdef ANALOG0_CHANNEL
#define ANALOG0_PMUXVAL 1
#define ANALOG0_PMUX (pinmux(ANALOG0_PORT, ANALOG0_BIT))
#else
#error "ANALOG0_CHANNEL not defined"
#endif
#define DIO114_CHANNEL ANALOG0_CHANNEL
#define DIO114_PMUXVAL ANALOG0_PMUXVAL
#define DIO114_PMUX ANALOG0_PMUX
#endif
#ifdef ANALOG1
#ifdef ANALOG1_CHANNEL
#define ANALOG1_PMUXVAL 1
#define ANALOG1_PMUX (pinmux(ANALOG1_PORT, ANALOG1_BIT))
#else
#error "ANALOG1_CHANNEL not defined"
#endif
#define DIO115_CHANNEL ANALOG1_CHANNEL
#define DIO115_PMUXVAL ANALOG1_PMUXVAL
#define DIO115_PMUX ANALOG1_PMUX
#endif
#ifdef ANALOG2
#ifdef ANALOG2_CHANNEL
#define ANALOG2_PMUXVAL 1
#define ANALOG2_PMUX (pinmux(ANALOG2_PORT, ANALOG2_BIT))
#else
#error "ANALOG2_CHANNEL not defined"
#endif
#define DIO116_CHANNEL ANALOG2_CHANNEL
#define DIO116_PMUXVAL ANALOG2_PMUXVAL
#define DIO116_PMUX ANALOG2_PMUX
#endif
#ifdef ANALOG3
#ifdef ANALOG3_CHANNEL
#define ANALOG3_PMUXVAL 1
#define ANALOG3_PMUX (pinmux(ANALOG3_PORT, ANALOG3_BIT))
#else
#error "ANALOG3_CHANNEL not defined"
#endif
#define DIO117_CHANNEL ANALOG3_CHANNEL
#define DIO117_PMUXVAL ANALOG3_PMUXVAL
#define DIO117_PMUX ANALOG3_PMUX
#endif
#ifdef ANALOG4
#ifdef ANALOG4_CHANNEL
#define ANALOG4_PMUXVAL 1
#define ANALOG4_PMUX (pinmux(ANALOG4_PORT, ANALOG4_BIT))
#else
#error "ANALOG4_CHANNEL not defined"
#endif
#define DIO118_CHANNEL ANALOG4_CHANNEL
#define DIO118_PMUXVAL ANALOG4_PMUXVAL
#define DIO118_PMUX ANALOG4_PMUX
#endif
#ifdef ANALOG5
#ifdef ANALOG5_CHANNEL
#define ANALOG5_PMUXVAL 1
#define ANALOG5_PMUX (pinmux(ANALOG5_PORT, ANALOG5_BIT))
#else
#error "ANALOG5_CHANNEL not defined"
#endif
#define DIO119_CHANNEL ANALOG5_CHANNEL
#define DIO119_PMUXVAL ANALOG5_PMUXVAL
#define DIO119_PMUX ANALOG5_PMUX
#endif
#ifdef ANALOG6
#ifdef ANALOG6_CHANNEL
#define ANALOG6_PMUXVAL 1
#define ANALOG6_PMUX (pinmux(ANALOG6_PORT, ANALOG6_BIT))
#else
#error "ANALOG6_CHANNEL not defined"
#endif
#define DIO120_CHANNEL ANALOG6_CHANNEL
#define DIO120_PMUXVAL ANALOG6_PMUXVAL
#define DIO120_PMUX ANALOG6_PMUX
#endif
#ifdef ANALOG7
#ifdef ANALOG7_CHANNEL
#define ANALOG7_PMUXVAL 1
#define ANALOG7_PMUX (pinmux(ANALOG7_PORT, ANALOG7_BIT))
#else
#error "ANALOG7_CHANNEL not defined"
#endif
#define DIO121_CHANNEL ANALOG7_CHANNEL
#define DIO121_PMUXVAL ANALOG7_PMUXVAL
#define DIO121_PMUX ANALOG7_PMUX
#endif
#ifdef ANALOG8
#ifdef ANALOG8_CHANNEL
#define ANALOG8_PMUXVAL 1
#define ANALOG8_PMUX (pinmux(ANALOG8_PORT, ANALOG8_BIT))
#else
#error "ANALOG8_CHANNEL not defined"
#endif
#define DIO122_CHANNEL ANALOG8_CHANNEL
#define DIO122_PMUXVAL ANALOG8_PMUXVAL
#define DIO122_PMUX ANALOG8_PMUX
#endif
#ifdef ANALOG9
#ifdef ANALOG9_CHANNEL
#define ANALOG9_PMUXVAL 1
#define ANALOG9_PMUX (pinmux(ANALOG9_PORT, ANALOG9_BIT))
#else
#error "ANALOG9_CHANNEL not defined"
#endif
#define DIO123_CHANNEL ANALOG9_CHANNEL
#define DIO123_PMUXVAL ANALOG9_PMUXVAL
#define DIO123_PMUX ANALOG9_PMUX
#endif
#ifdef ANALOG10
#ifdef ANALOG10_CHANNEL
#define ANALOG10_PMUXVAL 1
#define ANALOG10_PMUX (pinmux(ANALOG10_PORT, ANALOG10_BIT))
#else
#error "ANALOG10_CHANNEL not defined"
#endif
#define DIO124_CHANNEL ANALOG10_CHANNEL
#define DIO124_PMUXVAL ANALOG10_PMUXVAL
#define DIO124_PMUX ANALOG10_PMUX
#endif
#ifdef ANALOG11
#ifdef ANALOG11_CHANNEL
#define ANALOG11_PMUXVAL 1
#define ANALOG11_PMUX (pinmux(ANALOG11_PORT, ANALOG11_BIT))
#else
#error "ANALOG11_CHANNEL not defined"
#endif
#define DIO125_CHANNEL ANALOG11_CHANNEL
#define DIO125_PMUXVAL ANALOG11_PMUXVAL
#define DIO125_PMUX ANALOG11_PMUX
#endif
#ifdef ANALOG12
#ifdef ANALOG12_CHANNEL
#define ANALOG12_PMUXVAL 1
#define ANALOG12_PMUX (pinmux(ANALOG12_PORT, ANALOG12_BIT))
#else
#error "ANALOG12_CHANNEL not defined"
#endif
#define DIO126_CHANNEL ANALOG12_CHANNEL
#define DIO126_PMUXVAL ANALOG12_PMUXVAL
#define DIO126_PMUX ANALOG12_PMUX
#endif
#ifdef ANALOG13
#ifdef ANALOG13_CHANNEL
#define ANALOG13_PMUXVAL 1
#define ANALOG13_PMUX (pinmux(ANALOG13_PORT, ANALOG13_BIT))
#else
#error "ANALOG13_CHANNEL not defined"
#endif
#define DIO127_CHANNEL ANALOG13_CHANNEL
#define DIO127_PMUXVAL ANALOG13_PMUXVAL
#define DIO127_PMUX ANALOG13_PMUX
#endif
#ifdef ANALOG14
#ifdef ANALOG14_CHANNEL
#define ANALOG14_PMUXVAL 1
#define ANALOG14_PMUX (pinmux(ANALOG14_PORT, ANALOG14_BIT))
#else
#error "ANALOG14_CHANNEL not defined"
#endif
#define DIO128_CHANNEL ANALOG14_CHANNEL
#define DIO128_PMUXVAL ANALOG14_PMUXVAL
#define DIO128_PMUX ANALOG14_PMUX
#endif
#ifdef ANALOG15
#ifdef ANALOG15_CHANNEL
#define ANALOG15_PMUXVAL 1
#define ANALOG15_PMUX (pinmux(ANALOG15_PORT, ANALOG15_BIT))
#else
#error "ANALOG15_CHANNEL not defined"
#endif
#define DIO129_CHANNEL ANALOG15_CHANNEL
#define DIO129_PMUXVAL ANALOG15_PMUXVAL
#define DIO129_PMUX ANALOG15_PMUX
#endif

/*µCNC Pulse ISR*/
#ifndef ITP_TIMER
#define ITP_TIMER 5
#endif
#if (ITP_TIMER < 3)
#define MCU_ITP_ISR __helper__(TCC, ITP_TIMER, _Handler)
#define ITP_REG __helper__(TCC, ITP_TIMER, )
#define ITP_IRQ __helper__(TCC, ITP_TIMER, _IRQn)
#else
#define MCU_ITP_ISR __helper__(TC, ITP_TIMER, _Handler)
#define ITP_REG __helper__(TC, ITP_TIMER, )
#define ITP_IRQ __helper__(TC, ITP_TIMER, _IRQn)
#endif

#ifndef SERVO_TIMER
#define SERVO_TIMER 4
#endif
#if (SERVO_TIMER < 3)
#define MCU_SERVO_ISR __helper__(TCC, SERVO_TIMER, _Handler)
#define SERVO_REG __helper__(TCC, SERVO_TIMER, )
#define SERVO_IRQ __helper__(TCC, SERVO_TIMER, _IRQn)
#else
#define MCU_SERVO_ISR __helper__(TC, SERVO_TIMER, _Handler)
#define SERVO_REG __helper__(TC, SERVO_TIMER, )
#define SERVO_IRQ __helper__(TC, SERVO_TIMER, _IRQn)
#endif

#ifdef ONESHOT_TIMER
#define MCU_HAS_ONESHOT_TIMER
#if (ONESHOT_TIMER < 3)
#define MCU_ONESHOT_ISR __helper__(TCC, ONESHOT_TIMER, _Handler)
#define ONESHOT_REG __helper__(TCC, ONESHOT_TIMER, )
#define ONESHOT_IRQ __helper__(TCC, ONESHOT_TIMER, _IRQn)
#else
#define MCU_ONESHOT_ISR __helper__(TC, ONESHOT_TIMER, _Handler)
#define ONESHOT_REG __helper__(TC, ONESHOT_TIMER, )
#define ONESHOT_IRQ __helper__(TC, ONESHOT_TIMER, _IRQn)
#endif
#endif

#ifndef __indirect__
#define __indirect__ex__(X, Y) DIO##X##_##Y
#define __indirect__(X, Y) __indirect__ex__(X, Y)
#endif

#ifndef BYTE_OPS
#define BYTE_OPS
// Set bit y in byte x
#define SETBIT(x, y) ((x) |= (1 << (y)))
// Clear bit y in byte x
#define CLEARBIT(x, y) ((x) &= ~(1 << (y)))
// Check bit y in byte x
#define CHECKBIT(x, y) ((x) & (1 << (y)))
// Toggle bit y in byte x
#define TOGGLEBIT(x, y) ((x) ^= (1 << (y)))
// Set byte y in byte x
#define SETFLAG(x, y) ((x) |= (y))
// Clear byte y in byte x
#define CLEARFLAG(x, y) ((x) &= ~(y))
// Check byte y in byte x
#define CHECKFLAG(x, y) ((x) & (y))
// Toggle byte y in byte x
#define TOGGLEFLAG(x, y) ((x) ^= (y))
#endif

#define mcu_config_output(diopin)                                          \
	{                                                                        \
		SETBIT(__indirect__(diopin, GPIO).DIR.reg, __indirect__(diopin, BIT)); \
		__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg = 2;  \
	}
#define mcu_config_input(diopin)                                             \
	{                                                                          \
		CLEARBIT(__indirect__(diopin, GPIO).DIR.reg, __indirect__(diopin, BIT)); \
		__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg = 2;    \
	}
#define mcu_config_pullup(diopin)                                                \
	{                                                                              \
		SETBIT(__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg, 2); \
		SETBIT(__indirect__(diopin, GPIO).OUT.reg, __indirect__(diopin, BIT));       \
	}
#define mcu_config_altfunc(diopin)                                               \
	{                                                                              \
		SETBIT(__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg, 0); \
		(__indirect__(diopin, PMUX)) = __indirect__(diopin, PMUXVAL);                \
	}

#define mcu_config_input_isr(diopin) (mcu_config_altfunc(diopin))

#define mcu_config_pwm(diopin, freq)                                             \
	{                                                                              \
		SETBIT(__indirect__(diopin, GPIO).DIR.reg, __indirect__(diopin, BIT));       \
		__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg = 0;        \
		SETBIT(__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg, 0); \
		(__indirect__(diopin, PMUX)) = __indirect__(diopin, PMUXVAL);                \
		uint16_t div = ((F_TIMERS >> 8) / freq);                                     \
		uint8_t presc = 0;                                                           \
		while (div > 1)                                                              \
		{                                                                            \
			div = ((div + 1) >> 1);                                                    \
			presc++;                                                                   \
			if (presc >= 4)                                                            \
			{                                                                          \
				div = ((div + 1) >> 1);                                                  \
			}                                                                          \
			if (presc == 7)                                                            \
			{                                                                          \
				break;                                                                   \
			}                                                                          \
		}                                                                            \
		__indirect__(diopin, CONFIG);                                                \
	}

#define mcu_get_input(diopin) (CHECKBIT(__indirect__(diopin, GPIO).IN.reg, __indirect__(diopin, BIT)))
#define mcu_get_output(diopin) (CHECKBIT(__indirect__(diopin, GPIO).OUT.reg, __indirect__(diopin, BIT)))
#define mcu_set_output(diopin) (__indirect__(diopin, GPIO).OUTSET.reg = (1UL << __indirect__(diopin, BIT)))
#define mcu_clear_output(diopin) (__indirect__(diopin, GPIO).OUTCLR.reg = (1UL << __indirect__(diopin, BIT)))
#define mcu_toggle_output(diopin) (__indirect__(diopin, GPIO).OUTTGL.reg = (1UL << __indirect__(diopin, BIT)))

#define mcu_set_pwm(diopin, pwmvalue)             \
	{                                               \
		(__indirect__(diopin, DUTYCYCLE)) = pwmvalue; \
	}

#define mcu_get_analog(diopin)                                   \
	{                                                              \
		while (ADC->STATUS.bit.SYNCBUSY)                             \
			ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;                     \
		;                                                            \
		while (ADC->STATUS.bit.SYNCBUSY)                             \
			;                                                          \
		ADC->INPUTCTRL.bit.MUXPOS = (__indirect__(diopin, CHANNEL)); \
		while (ADC->STATUS.bit.SYNCBUSY)                             \
			;                                                          \
		ADC->SWTRIG.bit.START = 1;                                   \
		while (!(ADC->INTFLAG.bit.RESRDY))                           \
			;                                                          \
		ADC->RESULT.reg;                                             \
	}

#define mcu_config_analog(diopin)                                                \
	{                                                                              \
		CLEARBIT(__indirect__(diopin, GPIO).DIR.reg, __indirect__(diopin, BIT));     \
		__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg = 0;        \
		SETBIT(__indirect__(diopin, GPIO).PINCFG[__indirect__(diopin, BIT)].reg, 0); \
		(__indirect__(diopin, PMUX)) = __indirect__(diopin, PMUXVAL);                \
		mcu_get_analog(diopin);                                                      \
	}
	/*
#define mcu_get_pwm(diopin) ((uint8_t)((((uint32_t)__indirect__(diopin, TIMREG)->__indirect__(diopin, CCR)) * 255) / ((uint32_t)__indirect__(diopin, TIMREG)->ARR)))
#ifdef PROBE
#ifdef PROBE_ISR
#define mcu_enable_probe_isr() SETBIT(EXTI->IMR, PROBE_BIT)
#define mcu_disable_probe_isr() CLEARBIT(EXTI->IMR, PROBE_BIT)
#else
#define mcu_enable_probe_isr()
#define mcu_disable_probe_isr()
#endif
#endif
*/
	extern volatile bool samd21_global_isr_enabled;
#define mcu_enable_global_isr()       \
	{                                   \
		__enable_irq();                   \
		samd21_global_isr_enabled = true; \
	}
#define mcu_disable_global_isr()       \
	{                                    \
		samd21_global_isr_enabled = false; \
		__disable_irq();                   \
	}
#define mcu_get_global_isr() samd21_global_isr_enabled
#define mcu_free_micros() ({ (1000UL - (SysTick->VAL * 1000UL / SysTick->LOAD)); })

#ifdef __cplusplus
}
#endif

#endif
